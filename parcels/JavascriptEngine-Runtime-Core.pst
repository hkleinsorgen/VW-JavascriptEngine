<?xml version="1.0"?>

<st-source>
<!-- 
Name: JavascriptEngine-Runtime-Core
Notice: Licensed under the MIT license

Copyright (c) 2010 Holger Kleinsorgen

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
Comment: Runtime for ECMAScript aka Javascript. The runtime is created by visiting an AST with a JSERuntimeBuilderVisitor.
The created code (JSECompiledCode) can then be run.

Contact: h . kleinsorgen - at - gmail . com
Github repo: https://github.com/hkleinsorgen/VW-JavascriptEngine

Licensed under the MIT license

Copyright (c) 2010 Holger Kleinsorgen

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
DbIdentifier: psql_public_cst_2007
DbTrace: 96219
DbUsername: klnsrgn
DbVersion: 0.5.1
DevelopmentPrerequisites: #(#(#any 'JavascriptEngine-AST' '') #(#any 'JavascriptEngine-Namespace' '') #(#any 'JavascriptEngine-Parser-Core' '') #(#any 'JavascriptEngine-VisualWorks' ''))
DisregardedPrerequisites: #(#(#name 'Regex11' #componentType #package))
Id: 2e5190f6-a0fc-44ee-9f39-fbb05d1f79b8
Namespace: Smalltalk.JSE
PackageName: JavascriptEngine-Runtime-Core
Parcel: #('JavascriptEngine-Runtime-Core')
ParcelDirectory: e:\develop\git\jse\JavascriptEngine-Runtime-Core
PrerequisiteDescriptions: #(#(#name 'JavascriptEngine-AST' #componentType #package) #(#name 'JavascriptEngine-Namespace' #componentType #package) #(#name 'JavascriptEngine-Parser-Core' #componentType #package) #(#name 'JavascriptEngine-VisualWorks' #componentType #package))
PrerequisiteParcels: #(#('JavascriptEngine-AST' '') #('JavascriptEngine-Namespace' '') #('JavascriptEngine-Parser-Core' '') #('JavascriptEngine-VisualWorks' ''))
PrintStringCache: (0.5.1,klnsrgn)
Url: file:///c:/develop/smalltalk/squeak/Pharo3.0/package-cache/JavascriptEngine-Runtime-Core-hkleinsorgen.1.mcz
Version: 0.5.1
Date: 2:15:13 PM September 16, 2017
 -->
<time-stamp>From VisualWorks®, 8.1.1 of 10. März 2016 on 16. September 2017 at 14:15:13</time-stamp>


<do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it>

<class>
<name>JSERangeError</name>
<environment>JSE</environment>
<super>JSE.JSEError</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSERangeError</class-id>
<body>Represents a RangeError of the ECMA specification</body>
</comment>

<class>
<name>JSEObjectRegistry</name>
<environment>JSE</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>idToObjectReference objectToReference </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEObjectRegistry</class-id>
<body>Registry for object references. Used by the remote debugger.</body>
</comment>

<class>
<name>JSEBinding</name>
<environment>JSE</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>identifier value deletable immutable </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEBinding</class-id>
<body>A named binding of an environment record </body>
</comment>

<class>
<name>JSEThrowError</name>
<environment>JSE</environment>
<super>JSE.JSEError</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEThrowError</class-id>
<body>Raised when an unhandled throw statement is evaluated</body>
</comment>

<class>
<name>JSEReferenceError</name>
<environment>JSE</environment>
<super>JSE.JSEError</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEReferenceError</class-id>
<body>Represents a ReferenceError of the ECMA specification</body>
</comment>

<class>
<name>JSEAbstractCodeSection</name>
<environment>JSE</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEAbstractCodeSection</class-id>
<body>Represents a part of the compiled code</body>
</comment>

<class>
<name>JSEDebugError</name>
<environment>JSE</environment>
<super>Core.Error</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEDebugError</class-id>
<body>Internal error used by the debugger</body>
</comment>

<class>
<name>JSEURIError</name>
<environment>JSE</environment>
<super>JSE.JSEError</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEURIError</class-id>
<body>Represents a URIError of the ECMA specification</body>
</comment>

<class>
<name>JSELexicalEnvironment</name>
<environment>JSE</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>environmentRecord outerEnvironment </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSELexicalEnvironment</class-id>
<body>A lexical environment.See 10.2 Lexical Environments</body>
</comment>

<class>
<name>JSENotification</name>
<environment>JSE</environment>
<super>Core.Notification</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>sourceInterval sourceString </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSENotification</class-id>
<body>Abstract superclass of notifications</body>
</comment>

<class>
<name>JSERuntimeBuilder</name>
<environment>JSE</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>codeStack codeBlocks nodeCodeSections </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSERuntimeBuilder</class-id>
<body>Used by the runtime visitor to create compiled code</body>
</comment>

<class>
<name>JSERDebuggerArtefact</name>
<environment>JSE</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>id </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSERDebuggerArtefact</class-id>
<body>A part of the runtime environment that can be adressed by a debugger</body>
</comment>

<class>
<name>JSERuntimeImplementation</name>
<environment>JSE</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>executionContext </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSERuntimeImplementation</class-id>
<body>Implements the statements and expressions</body>
</comment>

<class>
<name>JSEAssertionNotification</name>
<environment>JSE</environment>
<super>Core.Notification</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEAssertionNotification</class-id>
<body>Raised when an assertion of the ECMA spec fails. Ignored by the runtime, but can be used for debgging.See "5.2 Algorithm Conventions"</body>
</comment>

<class>
<name>JSEJsonObjectFactory</name>
<environment>JSE</environment>
<super>JSE.JSEJsonFactory</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEJsonObjectFactory</class-id>
<body>Creates Javascript objects</body>
</comment>

<class>
<name>JSEExecutionContext</name>
<environment>JSE</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>lexicalEnvironment variableEnvironment thisBinding labelStack code executionEnvironment currentCodeSection implementation </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEExecutionContext</class-id>
<body>Represents a stack frame.See 10.3 Execution Contexts</body>
</comment>

<class>
<name>JSEAbstractObject</name>
<environment>JSE</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars>cachedPragmas cachedConditions cachedSendToPrototype </class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEAbstractObject</class-id>
<body>An object / primitive of the Javascript runtime</body>
</comment>

<class>
<name>JSEParseFloatParser</name>
<environment>JSE</environment>
<super>JSE.JSENumericStringParser</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEParseFloatParser</class-id>
<body>Parser used for the global function parseFloat (string)</body>
</comment>

<class>
<name>JSERunEnvironment</name>
<environment>JSE</environment>
<super>Core.Announcer</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>scripts nextId threads </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSERunEnvironment</class-id>
<body>Abstract API to access available / running scripts Instance Variables:	nextId	&lt;Integer&gt;	Counter for assigning IDs to scripts / threads etc.	scripts	&lt;Dictionary of: JSEScript&gt;	Known scripts	threads	&lt;(Dictionary of: JSEThread)&gt;		Running threads</body>
</comment>

<class>
<name>JSEEnvironmentRecord</name>
<environment>JSE</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEEnvironmentRecord</class-id>
<body>Abstract superclass of environment records which provide named bindings and the binding of "this"</body>
</comment>

<class>
<name>JSEStopThreadNotification</name>
<environment>JSE</environment>
<super>Core.Notification</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEStopThreadNotification</class-id>
<body>Signalled when a running thread should be stopped.</body>
</comment>

<class>
<name>JSEEvalError</name>
<environment>JSE</environment>
<super>JSE.JSEError</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEEvalError</class-id>
<body>Represents an EvalError of the ECMA specification</body>
</comment>

<class>
<name>JSECompiledCode</name>
<environment>JSE</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>isStrict codeSection functionDeclarations variableDeclarations </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSECompiledCode</class-id>
<body>Compiled code consists of a code section (that evaluates the script), and all declared functions and variables. Compiled code is associated with a script that provides information about the source and is also required for bookkeeping  by the debugger.</body>
</comment>

<class>
<name>JSEPrimitiveValue</name>
<environment>JSE</environment>
<super>JSE.JSEAbstractObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEPrimitiveValue</class-id>
<body>A primitive value (string, boolean etc.)</body>
</comment>

<class>
<name>JSEFunction</name>
<environment>JSE</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>identifier code formalParameters </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEFunction</class-id>
<body>A functionInstance Variables:	code	&lt;JSECompiledCode&gt;	The code of the function body	formalParameters	&lt;(Collection&gt;	List of formal parameters	identifier	&lt;Symbol&gt;	Name of the function</body>
</comment>

<class>
<name>JSEFunctionExpression</name>
<environment>JSE</environment>
<super>JSE.JSEFunction</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEFunctionExpression</class-id>
<body>A function expression</body>
</comment>

<class>
<name>JSEProperty</name>
<environment>JSE</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>name isConfigurable isEnumerable </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEProperty</class-id>
<body>A named property of an object</body>
</comment>

<class>
<name>JSEGenericProperty</name>
<environment>JSE</environment>
<super>JSE.JSEProperty</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEGenericProperty</class-id>
<body>A property that is neither an accessor nor a data property</body>
</comment>

<class>
<name>JSEFirstClassObject</name>
<environment>JSE</environment>
<super>JSE.JSEAbstractObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>internalProperties properties internalPrototype </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEFirstClassObject</class-id>
<body>A first class object with properties</body>
</comment>

<class>
<name>JSELiteralSection</name>
<environment>JSE</environment>
<super>JSE.JSEAbstractCodeSection</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>literal </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<class>
<name>JSECompletion</name>
<environment>JSE</environment>
<super>JSE.JSENotification</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>type value target </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSECompletion</class-id>
<body>Used for nonlocal control transfer. See 8.9 The Completion Specification Type.</body>
</comment>

<class>
<name>JSEScript</name>
<environment>JSE</environment>
<super>JSE.JSERDebuggerArtefact</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>code sourceInformation breakpoints rootNode nodeCodeSections </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEScript</class-id>
<body>A script. Contains information that is required by the debugger and also used to provide the error location for error messages</body>
</comment>

<class>
<name>JSEFunctionExecutionContext</name>
<environment>JSE</environment>
<super>JSE.JSEExecutionContext</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>callerIsStrict isDirectEvalCall </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEFunctionExecutionContext</class-id>
<body>Execution context of a function call.This specialized subclass is required to track if the call - was a direct eval call- the caller is strictwhich has subtle consequences regarding the execution of the function</body>
</comment>

<class>
<name>JSECodeSequence</name>
<environment>JSE</environment>
<super>JSE.JSEAbstractCodeSection</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>codeSections </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSECodeSequence</class-id>
<body>A sequence of code sections</body>
</comment>

<class>
<name>JSEDataProperty</name>
<environment>JSE</environment>
<super>JSE.JSEProperty</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>value isWritable </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEDataProperty</class-id>
<body>An data property that contains an arbitrary value</body>
</comment>

<class>
<name>JSEObjectEnvironmentRecord</name>
<environment>JSE</environment>
<super>JSE.JSEEnvironmentRecord</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>bindingObject provideThis </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEObjectEnvironmentRecord</class-id>
<body>Record associated with an objectSee 10.2.1 Environment Records.</body>
</comment>

<class>
<name>JSEPartCode</name>
<environment>JSE</environment>
<super>JSE.JSECompiledCode</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>parentCode </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEPartCode</class-id>
<body>Code that represents a part of a script, or code that has been generated</body>
</comment>

<class>
<name>JSEStackVariable</name>
<environment>JSE</environment>
<super>JSE.JSENotification</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEStackVariable</class-id>
<body>A variable of the Smalltalk callstack.</body>
</comment>

<class>
<name>JSESmalltalkBlockSection</name>
<environment>JSE</environment>
<super>JSE.JSEAbstractCodeSection</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>block </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSESmalltalkBlockSection</class-id>
<body>A code section that consists of a block closure</body>
</comment>

<class>
<name>JSEGlobalCode</name>
<environment>JSE</environment>
<super>JSE.JSECompiledCode</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>script </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEGlobalCode</class-id>
<body>Global code that represents a script</body>
</comment>

<class>
<name>JSESelectorCodeSection</name>
<environment>JSE</environment>
<super>JSE.JSEAbstractCodeSection</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>arguments selector </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSESelectorCodeSection</class-id>
<body>A code section that is evaluated by performing a selector of the runtime implementation</body>
</comment>

<class>
<name>JSEFunctionDeclaration</name>
<environment>JSE</environment>
<super>JSE.JSEFunction</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEFunctionDeclaration</class-id>
<body>The declaration of a function</body>
</comment>

<class>
<name>JSEThread</name>
<environment>JSE</environment>
<super>JSE.JSERDebuggerArtefact</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>state executionEnvironment objectRegistry suspendSemaphore process unhandledException </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEThread</class-id>
<body>A thread running a script. Can be controlled by a debugger.</body>
</comment>

<class>
<name>JSEUndefinedSection</name>
<environment>JSE</environment>
<super>JSE.JSEAbstractCodeSection</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEUndefinedSection</class-id>
<body>A code section that evaluates to undefined</body>
</comment>

<class>
<name>JSEBreakpoint</name>
<environment>JSE</environment>
<super>JSE.JSERDebuggerArtefact</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>script lineNumber condition installedLineNumber </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEBreakpoint</class-id>
<body>A breakpoint of a script which is handled by the debug environment and ignored by the runtime environment </body>
</comment>

<class>
<name>JSEObjectReference</name>
<environment>JSE</environment>
<super>JSE.JSERDebuggerArtefact</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>object </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEObjectReference</class-id>
<body>A registered reference to an object.  Used by the remote debugger.</body>
</comment>

<class>
<name>JSEAccessorProperty</name>
<environment>JSE</environment>
<super>JSE.JSEProperty</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>getFunction setFunction </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEAccessorProperty</class-id>
<body>An accessor property that uses getter and setter functions to access the value</body>
</comment>

<class>
<name>JSEDeclarativeEnvironmentRecord</name>
<environment>JSE</environment>
<super>JSE.JSEEnvironmentRecord</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>bindings </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEDeclarativeEnvironmentRecord</class-id>
<body>Record of the declarative environmentSee 10.2.1 Environment Records.</body>
</comment>

<class>
<name>JSESingletonValue</name>
<environment>JSE</environment>
<super>JSE.JSEPrimitiveValue</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars>singleton </class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSESingletonValue</class-id>
<body>A primitive singleton.Using singletons is just an optimization. The runtime does not require that primitives of this class are singletons.</body>
</comment>

<class>
<name>JSEString</name>
<environment>JSE</environment>
<super>JSE.JSEPrimitiveValue</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>value </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEString</class-id>
<body>A string primitive</body>
</comment>

<class>
<name>JSENumber</name>
<environment>JSE</environment>
<super>JSE.JSEPrimitiveValue</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>value </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSENumber</class-id>
<body>A number primitive</body>
</comment>

<class>
<name>JSEPrimitiveObject</name>
<environment>JSE</environment>
<super>JSE.JSEFirstClassObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEPrimitiveObject</class-id>
<body>An object that wraps a primitive value</body>
</comment>

<class>
<name>JSEBuiltInObject</name>
<environment>JSE</environment>
<super>JSE.JSEFirstClassObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEBuiltInObject</class-id>
<body>An object that is part of the Javascript engine</body>
</comment>

<class>
<name>JSEFunctionObject</name>
<environment>JSE</environment>
<super>JSE.JSEFirstClassObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>code scope isStrict </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEFunctionObject</class-id>
<body>A function object</body>
</comment>

<class>
<name>JSEHostObject</name>
<environment>JSE</environment>
<super>JSE.JSEFirstClassObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>wrappedObject </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEHostObject</class-id>
<body>Abstract superclass of Javascript objects that wrap a Smalltalk objectInstance Variables:	wrappedObject	&lt;Object&gt;	the wrapped Smalltalk object</body>
</comment>

<class>
<name>JSERegExpObject</name>
<environment>JSE</environment>
<super>JSE.JSEFirstClassObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>regularExpression </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSERegExpObject</class-id>
<body>A regular expression (either a literal or created as a new RegExp object)</body>
</comment>

<class>
<name>JSEArgumentsObject</name>
<environment>JSE</environment>
<super>JSE.JSEFirstClassObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>parameterMap </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEArgumentsObject</class-id>
<body>An object that represents arguments of a function call</body>
</comment>

<class>
<name>JSEErrorObject</name>
<environment>JSE</environment>
<super>JSE.JSEFirstClassObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>nativeError </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEErrorObject</class-id>
<body>Error object</body>
</comment>

<class>
<name>JSEBuiltInFunctionDeclaration</name>
<environment>JSE</environment>
<super>JSE.JSEFunctionDeclaration</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>length </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEBuiltInFunctionDeclaration</class-id>
<body>The declaration of a built-in function</body>
</comment>

<class>
<name>JSEBuiltInObjectPrototype</name>
<environment>JSE</environment>
<super>JSE.JSEFirstClassObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>prototypeObjectClass primitiveValue </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEBuiltInObjectPrototype</class-id>
<body>Prototype object of built-in objects</body>
</comment>

<class>
<name>JSEEvalCode</name>
<environment>JSE</environment>
<super>JSE.JSEPartCode</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEEvalCode</class-id>
<body>Code that is compiled by the eval() function</body>
</comment>

<class>
<name>JSEArray</name>
<environment>JSE</environment>
<super>JSE.JSEFirstClassObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>elements </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEArray</class-id>
<body>An optimized implementation for Array objects</body>
</comment>

<class>
<name>JSECurrentExecutionEnvironment</name>
<environment>JSE</environment>
<super>JSE.JSEStackVariable</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSECurrentExecutionEnvironment</class-id>
<body>Provides access to the current execution environment. Should only be used if no execution context is available.</body>
</comment>

<class>
<name>JSEDate</name>
<environment>JSE</environment>
<super>JSE.JSEPrimitiveValue</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>value </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEDate</class-id>
<body>A date primitive. The internal value is the date as milliseconds in UTC </body>
</comment>

<class>
<name>JSENodeCodeSection</name>
<environment>JSE</environment>
<super>JSE.JSESelectorCodeSection</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>node lineNumber </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSENodeCodeSection</class-id>
<body>A code section that is associated with a node of the syntax tree</body>
</comment>

<class>
<name>JSEFunctionCode</name>
<environment>JSE</environment>
<super>JSE.JSEPartCode</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>function </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEFunctionCode</class-id>
<body>Code of a function</body>
</comment>

<class>
<name>JSEObject</name>
<environment>JSE</environment>
<super>JSE.JSEFirstClassObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEObject</class-id>
<body>Represent literal objects, prototype objects and objects  created with the new operator</body>
</comment>

<class>
<name>JSEBoolean</name>
<environment>JSE</environment>
<super>JSE.JSESingletonValue</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEBoolean</class-id>
<body>Boolean primitive</body>
</comment>

<class>
<name>JSEGlobalObject</name>
<environment>JSE</environment>
<super>JSE.JSEBuiltInObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEGlobalObject</class-id>
<body>The global object</body>
</comment>

<class>
<name>JSEBoundFunctionObject</name>
<environment>JSE</environment>
<super>JSE.JSEFunctionObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>boundThis boundArguments targetFunction </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEBoundFunctionObject</class-id>
<body>A function object bound to arguments</body>
</comment>

<class>
<name>JSEBuiltInFunctionObject</name>
<environment>JSE</environment>
<super>JSE.JSEFunctionObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>isConstructor </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEBuiltInFunctionObject</class-id>
<body>An object for a built-in function</body>
</comment>

<class>
<name>JSEMathObject</name>
<environment>JSE</environment>
<super>JSE.JSEBuiltInObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>random </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEMathObject</class-id>
<body>The Math object</body>
</comment>

<class>
<name>JSEUndefined</name>
<environment>JSE</environment>
<super>JSE.JSESingletonValue</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEUndefined</class-id>
<body>undefined primitive</body>
</comment>

<class>
<name>JSEJsonObject</name>
<environment>JSE</environment>
<super>JSE.JSEBuiltInObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEJsonObject</class-id>
<body>The JSON object</body>
</comment>

<class>
<name>JSENull</name>
<environment>JSE</environment>
<super>JSE.JSESingletonValue</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSENull</class-id>
<body>null primitive. Javascript rarely uses null. The Smalltalk nil is thus mapped to undefined, not to null.</body>
</comment>

<class>
<name>JSENumberString</name>
<environment>JSE</environment>
<super>JSE.JSEString</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>number </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSENumberString</class-id>
<body>A string primitive that provides lazy conversion of a number to a string.</body>
</comment>

<class>
<name>JSEFalse</name>
<environment>JSE</environment>
<super>JSE.JSEBoolean</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEFalse</class-id>
<body>Boolean false primitive</body>
</comment>

<class>
<name>JSETrue</name>
<environment>JSE</environment>
<super>JSE.JSEBoolean</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSETrue</class-id>
<body>Boolean true primitive</body>
</comment>

<class>
<name>JSETypeError</name>
<environment>JSE</environment>
<super>JSE.JSEError</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSETypeError</class-id>
<body>Represents a TypeError of the ECMA specification</body>
</comment>

<class>
<name>JSEExecutionEnvironment</name>
<environment>JSE</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>contextStack globalObject evalParser throwTypeErrorFunctionObject formalParameterListParser functionBodyParser debugEnvironment stepCondition stepLineNumber stepDepth currentStepDepth </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEExecutionEnvironment</class-id>
<body>The execution environment of a running script.The most important parts are the execution context stack and the global object.Also contains various bits and pieces used by the debugger or built-in functions.</body>
</comment>

<class>
<name>JSERegExpState</name>
<environment>JSE</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>endIndex captures </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSERegExpState</class-id>
<body>Internal object used by regular expressions</body>
</comment>

<class>
<name>JSERuntimeBuilderVisitor</name>
<environment>JSE</environment>
<super>JSE.JSESyntaxTreeVisitor</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>builder codeClass </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSERuntimeBuilderVisitor</class-id>
<body>A syntax tree visitor that yields compiled code</body>
</comment>

<class>
<name>JSEReference</name>
<environment>JSE</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>base name isStrict </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEReference</class-id>
<body>A named reference to members of bindings</body>
</comment>

<class>
<name>JSEVariableDeclaration</name>
<environment>JSE</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>identifier </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</class>

<comment>
<class-id>JSE.JSEVariableDeclaration</class-id>
<body>Declaration of a variable</body>
</comment>

<shared-variable>
<name>BuiltInObjectClasses</name>
<environment>JSE.JSEAbstractObject</environment>
<private>false</private>
<constant>false</constant>
<category>accessing</category>
<initializer>nil</initializer>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</shared-variable>

<shared-variable>
<name>EncodeURIUnescaped</name>
<environment>JSE.JSEGlobalObject</environment>
<private>false</private>
<constant>false</constant>
<category>accessing</category>
<initializer>nil</initializer>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</shared-variable>

<shared-variable>
<name>EncodeURIComponentUnescaped</name>
<environment>JSE.JSEGlobalObject</environment>
<private>false</private>
<constant>false</constant>
<category>accessing</category>
<initializer>nil</initializer>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</shared-variable>

<shared-variable>
<name>DecodeURIReserved</name>
<environment>JSE.JSEGlobalObject</environment>
<private>false</private>
<constant>false</constant>
<category>accessing</category>
<initializer>nil</initializer>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</shared-variable>

<shared-variable>
<name>OperatorBlocksOrSelectors</name>
<environment>JSE.JSERuntimeBuilderVisitor</environment>
<private>false</private>
<constant>false</constant>
<category>accessing</category>
<initializer>nil</initializer>
<attributes>
<package>JavascriptEngine-Runtime-Core</package>
</attributes>
</shared-variable>

<methods>
<class-id>JSE.JSEAbstractObject class</class-id> <category>pragmas</category>

<body package="JavascriptEngine-Runtime-Core">additionalPragmas	&lt;pragmas: #instance&gt;	^ #(		" function / property comment "		comment: 		" for tagging prototype functions that should be sent to the prototype instead of the object bound to 'this' "		sendToPrototype 		" the function is only available if the condition is true "		condition: 	)</body>

<body package="JavascriptEngine-Runtime-Core">constructorPragmas	&lt;pragmas: #instance&gt;	^ #(		constructor:		constructor:length:	)</body>

<body package="JavascriptEngine-Runtime-Core">genericTagPragmas	&lt;pragmas: #instance&gt;	^ #(		tag:description:		tag:type:description:		tag:type:identifier:description:		tag:collectionType:description:		tag:collectionType:identifier:description:	)</body>

<body package="JavascriptEngine-Runtime-Core">parameterTagPragmas	&lt;pragmas: #instance&gt;	^ #(		param:type:description:		param:collectionType:description:		optionalParam:type:description:		optionalParam:collectionType:description:	)</body>

<body package="JavascriptEngine-Runtime-Core">prototypePragmas	" functions / properties of the constructor of prototype objects"	&lt;pragmas: #instance&gt;	^ #(		prototypeFunction:parameters:		prototypeFunction:parameters:length:		prototypeProperty:	)</body>

<body package="JavascriptEngine-Runtime-Core">specificTagPragmas	&lt;pragmas: #instance&gt;	^ #(		see:		see:property:		see:static:		deprecated		deprecated:		since:		experimental		customer: 	)</body>

<body package="JavascriptEngine-Runtime-Core">staticPragmas	" functions / properties of the constructor of built-in objects "	&lt;pragmas: #instance&gt;	^ #(		function:parameters: 		function:parameters:length: 		property:		property:readOnly:	)</body>
</methods>

<methods>
<class-id>JSE.JSEString</class-id> <category>built in - compatibility</category>

<body package="JavascriptEngine-Runtime-Core">functionSubstrFrom: start length: length executionContext: executionContext	"B.2.3 String.prototype.substr (start, length)"	&lt;prototypeFunction: #substr parameters: #( #start #length )&gt;	&lt;sendToPrototype&gt;	^ executionContext thisValue stringSubstrFrom: start length: length</body>
</methods>

<methods>
<class-id>JSE.JSEString</class-id> <category>functions</category>

<body package="JavascriptEngine-Runtime-Core">constructor: arguments executionContext: executionContext 	&lt;constructor: #( #varargs )&gt;		| primitiveValue |	primitiveValue := arguments isEmpty 			ifTrue: [ '' asJSEObject ]			ifFalse: [ arguments first toString ].	^ self constructWithPrimitiveValue: primitiveValue executionContext: executionContext</body>

<body package="JavascriptEngine-Runtime-Core">functionCharAt: position executionContext: executionContext	"15.5.4.4 String.prototype.charAt (pos)"	&lt;prototypeFunction: #charAt parameters: #( pos )&gt;	&lt;sendToPrototype&gt;	^ executionContext thisValue stringCharAt: position</body>

<body package="JavascriptEngine-Runtime-Core">functionCharCodeAt: position executionContext: executionContext	"15.5.4.5 String.prototype.charCodeAt (pos)"	&lt;prototypeFunction: #charCodeAt parameters: #( pos )&gt;	&lt;sendToPrototype&gt;	^ executionContext thisValue stringCharCodeAt: position</body>

<body package="JavascriptEngine-Runtime-Core">functionConcat: strings executionContext: executionContext	"15.5.4.6 String.prototype.concat ( [ string1 [ , string2 [ , ... ] ] ] )"	&lt;prototypeFunction: #concat parameters: #( #varargs )&gt;	&lt;sendToPrototype&gt;	^ executionContext thisValue stringConcat: strings</body>

<body package="JavascriptEngine-Runtime-Core">functionFromCharCode: charCodes 	&lt;function: #fromCharCode parameters: #( #varargs )&gt;		| string |	string := String new: charCodes size.	1 to: charCodes size do: [: i | string at: i put: ( Character codePoint: ( charCodes at: i ) toUnsignedInteger16Value )].	^ string</body>

<body package="JavascriptEngine-Runtime-Core">functionIndexOf: searchString position: position executionContext: executionContext	"15.5.4.7 String.prototype.indexOf (searchString, position) "	&lt;prototypeFunction: #indexOf parameters: #(searchString position) length: 1&gt;	&lt;sendToPrototype&gt;		^ executionContext thisValue stringIndexOf: searchString position: position</body>

<body package="JavascriptEngine-Runtime-Core">functionLastIndexOf: searchString position: position executionContext: executionContext	"15.5.4.8 String.prototype.lastIndexOf (searchString, position)"	&lt;prototypeFunction: #lastIndexOf parameters: #(searchString position) length: 1&gt;	&lt;sendToPrototype&gt;		^ executionContext thisValue stringLastIndexOf: searchString position: position</body>

<body package="JavascriptEngine-Runtime-Core">functionLocaleCompare: anotherObject executionContext: executionContext	" 15.5.4.9 String.prototype.localeCompare (that) "	&lt;prototypeFunction: #localeCompare parameters: #( that )&gt;	&lt;sendToPrototype&gt;	^ executionContext thisValue stringLocaleCompare: anotherObject</body>

<body package="JavascriptEngine-Runtime-Core">functionMatch: regexp executionContext: executionContext 	"15.5.4.10 String.prototype.match (regexp)"	&lt;prototypeFunction: #match parameters: #( regexp )&gt;	&lt;sendToPrototype&gt;	^ executionContext thisValue stringMatch: regexp executionContext: executionContext</body>

<body package="JavascriptEngine-Runtime-Core">functionReplace: searchValue with: replaceValue executionContext: executionContext	"15.5.4.11 String.prototype.replace (searchValue, replaceValue) "	&lt;prototypeFunction: #replace parameters: #( searchValue replaceValue )&gt;	&lt;sendToPrototype&gt;	^ executionContext thisValue stringReplace: searchValue with: replaceValue executionContext: executionContext</body>

<body package="JavascriptEngine-Runtime-Core">functionSearch: regexp executionContext: executionContext 	"15.5.4.12 String.prototype.search (regexp)"	&lt;prototypeFunction: #search parameters: #( regexp )&gt;	&lt;sendToPrototype&gt;	^ executionContext thisValue stringSearch: regexp executionContext: executionContext</body>

<body package="JavascriptEngine-Runtime-Core">functionSliceFrom: start to: end executionContext: executionContext	"15.5.4.13 String.prototype.slice (start, end)"	&lt;prototypeFunction: #slice parameters: #( #start #end )&gt;	&lt;sendToPrototype&gt;	^ executionContext thisValue stringSliceFrom: start to: end</body>

<body package="JavascriptEngine-Runtime-Core">functionSplit: separator limit: limit executionContext: executionContext	"15.5.4.14 String.prototype.split (separator, limit)"	&lt;prototypeFunction: #split parameters: #( #separator #limit )&gt;	&lt;sendToPrototype&gt;	^ executionContext thisValue stringSplit: separator limit: limit</body>

<body package="JavascriptEngine-Runtime-Core">functionSubstringFrom: start to: end executionContext: executionContext	"15.5.4.15 String.prototype.substring (start, end)"	&lt;prototypeFunction: #substring parameters: #( #start #end )&gt;	&lt;sendToPrototype&gt;	^ executionContext thisValue stringSubstringFrom: start to: end</body>

<body package="JavascriptEngine-Runtime-Core">functionToLocaleLowerCase: executionContext	" 15.5.4.17 String.prototype.toLocaleLowerCase ( ) "	&lt;prototypeFunction: #toLocaleLowerCase parameters: #()&gt;	&lt;sendToPrototype&gt;	^ executionContext thisValue stringToLocaleLowerCase</body>

<body package="JavascriptEngine-Runtime-Core">functionToLocaleUpperCase: executionContext	"15.5.4.19 String.prototype.toLocaleUpperCase ( )"	&lt;prototypeFunction: #toLocaleUpperCase parameters: #()&gt;	&lt;sendToPrototype&gt;	^ executionContext thisValue stringToLocaleUpperCase</body>

<body package="JavascriptEngine-Runtime-Core">functionToLowerCase: executionContext	" 15.5.4.16 String.prototype.toLowerCase ( ) "	&lt;prototypeFunction: #toLowerCase parameters: #()&gt;	&lt;sendToPrototype&gt;	^ executionContext thisValue stringToLowerCase</body>

<body package="JavascriptEngine-Runtime-Core">functionToString: executionContext 	" 15.5.4.2 String.prototype.toString ( ) "	&lt;prototypeFunction: #toString parameters: #()&gt;	^ self</body>

<body package="JavascriptEngine-Runtime-Core">functionToUpperCase: executionContext	"15.5.4.17 String.prototype.toLocaleLowerCase ( )"	&lt;prototypeFunction: #toUpperCase parameters: #()&gt;	&lt;sendToPrototype&gt;	^ executionContext thisValue stringToUpperCase</body>

<body package="JavascriptEngine-Runtime-Core">functionTrim: executionContext	"15.5.4.20 String.prototype.trim ( )"	&lt;prototypeFunction: #trim parameters: #()&gt;	&lt;sendToPrototype&gt;	^ executionContext thisValue stringTrim</body>

<body package="JavascriptEngine-Runtime-Core">functionValueOf: executionContext	" 15.5.4.3 String.prototype.valueOf ( ) "	&lt;prototypeFunction: #valueOf parameters: #()&gt;	^ self</body>
</methods>

<methods>
<class-id>JSE.JSENumber</class-id> <category>functions</category>

<body package="JavascriptEngine-Runtime-Core">constructor: arguments executionContext: executionContext 	" See 15.7.1.1 Number ( [ value ] )	Number() should return +0, Number(undefined) should return Nan "	&lt;constructor: #( #varargs )&gt;		| primitiveValue |	primitiveValue := arguments isEmpty			ifTrue: [ JSENumber value: 0 ]			ifFalse: [ arguments first toNumber ].	^ self constructWithPrimitiveValue: primitiveValue executionContext: executionContext</body>

<body package="JavascriptEngine-Runtime-Core">functionToExponential: fractionDigits 	"15.7.4.6 Number.prototype.toExponential (fractionDigits)"	&lt;prototypeFunction: #toExponential parameters: #( fractionDigits )&gt;		^ self numberToExponential: fractionDigits</body>

<body package="JavascriptEngine-Runtime-Core">functionToFixed: fractionDigits 	"15.7.4.5 Number.prototype.toFixed (fractionDigits)"	&lt;prototypeFunction: #toFixed parameters: #( fractionDigits )&gt;		^ self numberToFixed: fractionDigits</body>

<body package="JavascriptEngine-Runtime-Core">functionToLocaleString	"15.7.4.3 Number.prototype.toLocaleString()"	&lt;prototypeFunction: #toLocaleString parameters: #( )&gt;	^ self numberToLocaleString</body>

<body package="JavascriptEngine-Runtime-Core">functionToPrecision: precision 	"15.7.4.7 Number.prototype.toPrecision (precision)"	&lt;prototypeFunction: #toPrecision parameters: #( precision )&gt;		^ self numberToPrecision: precision</body>

<body package="JavascriptEngine-Runtime-Core">functionToString: radix executionContext: executionContext 	"15.7.4.2 Number.prototype.toString ( [ radix ] )"	&lt;prototypeFunction: #toString parameters: #( radix )&gt;	^ self numberToString: radix</body>

<body package="JavascriptEngine-Runtime-Core">functionValueOf: executionContext 	"15.7.4.4 Number.prototype.valueOf ( )"	&lt;prototypeFunction: #valueOf parameters: #( )&gt;		^ self numberValueOf</body>

<body package="JavascriptEngine-Runtime-Core">propertNegativeInfinity	&lt;property: #NEGATIVE_INFINITY&gt;	^ JSENumber negativeInfinity</body>

<body package="JavascriptEngine-Runtime-Core">propertPositiveInfinity	&lt;property: #POSITIVE_INFINITY&gt;	^ JSENumber positiveInfinity</body>

<body package="JavascriptEngine-Runtime-Core">propertyMaxValue	&lt;property: #MAX_VALUE&gt;	^ JSEPlatform floatClass fmax</body>

<body package="JavascriptEngine-Runtime-Core">propertyMinValue	&lt;property: #MIN_VALUE&gt;	^ JSEPlatform floatClass fmin</body>

<body package="JavascriptEngine-Runtime-Core">propertyNaN	&lt;property: #NaN&gt;	^ JSENumber nan</body>
</methods>

<methods>
<class-id>JSE.JSEFunctionObject</class-id> <category>functions</category>

<body package="JavascriptEngine-Runtime-Core">constructor: arguments executionContext: executionContext 	" 15.3.2 The Function Constructor "	&lt;constructor: #(#varargs)&gt;		| parameterListStream parametersListString bodyString bodyNode bodyCode functionObject functionExpressionNode formalParameters function bodyParser codeBuilder executionEnvironment |	parameterListStream := String new writeStream.	arguments size &gt; 1 		ifTrue: 		[( 1 to: arguments size - 1 ) 				do: [: i | parameterListStream nextPutAll: ( arguments at: i ) toString value ]				separatedBy: [ parameterListStream nextPutAll: ',' ]		].	" parse "	parametersListString := parameterListStream contents.	executionEnvironment  := executionContext executionEnvironment .	functionExpressionNode := executionEnvironment formalParameterListParser parse: parametersListString.	bodyString := arguments notEmpty 			ifTrue: [ arguments last toString value ]			ifFalse: [ '' ].	bodyParser := executionEnvironment functionBodyParser.	self isStrict 		ifTrue: [ bodyParser isInStrictMode: true ].	bodyNode := bodyParser parse: bodyString.	" Function bauen "	codeBuilder := JSERuntimeBuilderVisitor new.	bodyNode hasStrictDirective 		ifTrue: [ codeBuilder isInStrictMode: true ].	bodyCode := codeBuilder compileCode: bodyNode ofClass: JSEFunctionCode.	bodyCode parentCode: executionContext code.	formalParameters := functionExpressionNode formalParameters collect: [: parameterIdentifier | parameterIdentifier identifierSymbol ].	function := JSEFunctionExpression formalParameters: formalParameters.	function code: bodyCode.	bodyCode function: function.	functionObject := function 			createFunctionObjectInEnvironment: executionContext executionEnvironment globalExecutionContext lexicalEnvironment			executionContext: executionContext			strict: bodyCode isStrict.	^ functionObject</body>

<body package="JavascriptEngine-Runtime-Core">functionApply: thisObject arguments: argumentsArray executionContext: executionContext 	" 15.3.4.3 Function.prototype.apply (thisArg, argArray) "	&lt;prototypeFunction: #apply parameters: #(thisArg argArray )&gt;	&lt;sendToPrototype&gt;	| arguments function |	function := executionContext thisValue.	function isCallable 		ifFalse: [ function raiseCannotCall ].	arguments := ( argumentsArray isNil or: [ argumentsArray isUndefined ]) 			ifTrue: [ #( )]			ifFalse: 			[	argumentsArray isObject 					ifFalse: [ JSETypeError raiseSignal: 'Function.prototype.apply() expects an object as second argument' ].				argumentsArray arrayElements			].	^ function callWithThis: thisObject arguments: arguments executionEnvironment: executionContext executionEnvironment</body>

<body package="JavascriptEngine-Runtime-Core">functionBind: boundThis arguments: boundArguments executionContext: executionContext 	"15.3.4.5 Function.prototype.bind (thisArg [, arg1 [, arg2, ...]])"	&lt;prototypeFunction: #bind parameters: #(thisArg #varargs) length: 1&gt;	&lt;sendToPrototype&gt;		| target length boundFunctionObject |	target := executionContext thisValue.	target isCallable 		ifFalse: [ target raiseCannotCall ].	length := target length - boundArguments size max: 0.	boundFunctionObject := JSEBoundFunctionObject targetFunction: target boundThis: boundThis boundArguments: boundArguments.	boundFunctionObject 		uncheckedAddProperty: ( JSEDataProperty name: #length value: ( JSENumber value: length ) isWritable: false isEnumerable: false isConfigurable: false ).	boundFunctionObject addTypeErrorAccessorForPropertiesNamed: #( #caller #arguments ) executionEnvironment: executionContext executionEnvironment.	^ boundFunctionObject</body>

<body package="JavascriptEngine-Runtime-Core">functionCall: thisObject arguments: arguments executionContext: executionContext 	"15.3.4.4 Function.prototype.call (thisArg [ , arg1 [ , arg2, ... ] ] )"	&lt;prototypeFunction: #call parameters: #(#thisArg #varargs) length: 1&gt;	&lt;sendToPrototype&gt;		| function |	function := executionContext thisValue.	function isCallable 		ifFalse: [ function raiseCannotCall ].	^ function callWithThis: thisObject arguments: arguments executionEnvironment: executionContext executionEnvironment</body>

<body package="JavascriptEngine-Runtime-Core">functionToString: executionContext 	" 15.3.4.2 Function.prototype.toString ( )"	&lt;prototypeFunction: #toString parameters: #( )&gt;	&lt;sendToPrototype&gt;		| functionObject |	functionObject := executionContext thisValue.	functionObject isCallable 		ifFalse: [ self raiseFunctionOnlyAvailableForThisType ].	^ functionObject displayString asJSEObject</body>
</methods>

<methods>
<class-id>JSE.JSEHostObject</class-id> <category>debugger - properties</category>

<body package="JavascriptEngine-Runtime-Core">debuggerPropertyHostClass	&lt;debuggerProperty: #hostClass&gt;	^ self wrappedObject class fullName</body>

<body package="JavascriptEngine-Runtime-Core">debuggerPropertyHostObject	&lt;debuggerProperty: #hostObject&gt;	^ self wrappedObject displayString</body>
</methods>

<methods>
<class-id>JSE.JSERegExpObject</class-id> <category>functions</category>

<body package="JavascriptEngine-Runtime-Core">constructorPattern: pattern flags: flags executionContext: executionContext 	"15.10.3 The RegExp Constructor Called as a Function / 15.10.4 The RegExp Constructor "	&lt;constructor: #( #pattern flags )&gt;		| constructedObject |	constructedObject := executionContext thisValue.	constructedObject isUndefined 		ifTrue: 		[	( pattern isRegExp and: [ flags isUndefined ]) 				ifTrue: [ ^ pattern ].			constructedObject := ( self getPrototypeIn: executionContext executionEnvironment ) constructNewObject		].	constructedObject initializeWithPattern: pattern flags: flags mustEscapeStrings: true executionContext: executionContext.	^ constructedObject</body>

<body package="JavascriptEngine-Runtime-Core">functionExec: string 	"15.10.6.2 RegExp.prototype.exec(string)"	&lt;prototypeFunction: #exec parameters: #(string)&gt;		^ self exec: string</body>

<body package="JavascriptEngine-Runtime-Core">functionTest: string 	"15.10.6.3 RegExp.prototype.test(string)"	&lt;prototypeFunction: #test parameters: #(string)&gt;		^ ( self exec: string ) isJSENull not</body>

<body package="JavascriptEngine-Runtime-Core">functionToString: executionContext 	"15.10.6.4 RegExp.prototype.toString()"	&lt;prototypeFunction: #toString parameters: #( )&gt;		^ '/' , (( self get: #source ) ifNotNil: [: source | source value ] ifNil: [ '' ]) , '/'</body>
</methods>

<methods>
<class-id>JSE.JSEErrorObject</class-id> <category>functions</category>

<body package="JavascriptEngine-Runtime-Core">constructor: message executionContext: executionContext	" 15.11.2 The Error Constructor "	&lt;constructor: #( #message )&gt;	| constructedObject errorObject |	constructedObject := executionContext thisValue.	errorObject := constructedObject isUndefined 			ifTrue: 			[	" constructor as a function "				(self getPrototypeIn: executionContext executionEnvironment) constructNewObject			]			ifFalse: 			[	" constructor has created an object "				constructedObject			].	message isUndefined 		ifFalse: [ errorObject put: #message value: message throw: false ].	" non-standard extension "	errorObject uncheckedPut: #stack value: (executionContext executionEnvironment errorStackStringSkipCurrent: true).	^ errorObject</body>

<body package="JavascriptEngine-Runtime-Core">functionToString: executionContext 	"15.11.4.4 Error.prototype.toString ( )"	&lt;prototypeFunction: #toString parameters: #( )&gt;	&lt;sendToPrototype&gt;	| obj errorName errorNameString errorMessage errorMessageString |	obj := executionContext thisValue.	obj isObject 		ifFalse: [ self raiseFunctionOnlyAvailableForThisType ].	errorName := obj get: #name.	errorNameString := errorName isUndefined 			ifTrue: [ 'Error' ]			ifFalse: [ errorName toStringValue ].	errorMessage := obj get: #message.	errorMessageString := errorMessage isUndefined 			ifTrue: [ '' ]			ifFalse: [ errorMessage toStringValue ].	^ errorNameString isEmpty 		ifTrue: [ errorMessageString ]		ifFalse: 		[	errorMessageString isEmpty 				ifTrue: [ errorNameString ]				ifFalse: [ errorNameString , ': ' , errorMessageString ]		]</body>

<body package="JavascriptEngine-Runtime-Core">prototypePropertyMessage	" 15.11.2 The Error Constructor "	&lt;prototypeProperty: #message&gt;	^ ''</body>

<body package="JavascriptEngine-Runtime-Core">prototypePropertyName	" 15.11.2 The Error Constructor "	&lt;prototypeProperty: #name&gt;	^ self objectName asString</body>
</methods>

<methods>
<class-id>JSE.JSEArray</class-id> <category>functions</category>

<body package="JavascriptEngine-Runtime-Core">constructor: arguments	" 15.4.2 The Array Constructor "	&lt;constructor: #(#varargs)&gt;	^ (arguments size = 1 and: [ arguments first isJSENumber ])		ifTrue: [ JSEArray withLength: arguments first toNumberValue ]		ifFalse: [  JSEArray withElements: arguments ]</body>

<body package="JavascriptEngine-Runtime-Core">functionConcat: items executionContext: executionContext	"15.4.4.4 Array.prototype.concat ( [ item1 [ , item2 [ , ... ] ] ] )"	&lt;prototypeFunction: #concat parameters: #( #varargs) &gt;	&lt;sendToPrototype&gt;		^ executionContext thisValue arrayConcat: items</body>

<body package="JavascriptEngine-Runtime-Core">functionEvery: enumerateFunction thisArgument: thisArgument executionContext: executionContext 	"15.4.4.16 Array.prototype.every ( callbackfn [ , thisArg ] )"	&lt;prototypeFunction: #every parameters: #( callbackfn thisArg ) length: 1&gt;	&lt;sendToPrototype&gt;	^ executionContext thisValue arrayEvery: enumerateFunction thisArgument: thisArgument executionEnvironment: executionContext executionEnvironment</body>

<body package="JavascriptEngine-Runtime-Core">functionFilter: mapFunction thisArgument: thisArgument executionContext: executionContext 	"15.4.4.20 Array.prototype.filter ( callbackfn [ , thisArg ] )"	&lt;prototypeFunction: #filter parameters: #( callbackfn thisArg ) length: 1&gt;	&lt;sendToPrototype&gt;		^ executionContext thisValue arrayFilter: mapFunction thisArgument: thisArgument executionEnvironment: executionContext executionEnvironment</body>

<body package="JavascriptEngine-Runtime-Core">functionForEach: enumerateFunction thisArgument: thisArgument executionContext: executionContext 	"15.4.4.18 Array.prototype.forEach ( callbackfn [ , thisArg ] )"	&lt;prototypeFunction: #forEach parameters: #( callbackfn thisArg ) length: 1 &gt;	&lt;sendToPrototype&gt;		^ executionContext thisValue arrayForEach: enumerateFunction thisArgument: thisArgument executionEnvironment: executionContext executionEnvironment</body>

<body package="JavascriptEngine-Runtime-Core">functionIndexOf: searchElement fromIndex: fromIndex executionContext: executionContext	"15.4.4.14 Array.prototype.indexOf ( searchElement [ , fromIndex ] )"	&lt;prototypeFunction: #indexOf parameters: #( searchElement fromIndex) length: 1&gt;	&lt;sendToPrototype&gt;		^ executionContext thisValue arrayIndexOf: searchElement fromIndex: fromIndex</body>

<body package="JavascriptEngine-Runtime-Core">functionIsArray: object	" 15.4.3.2 Array.isArray ( arg ) "	&lt;function: #isArray parameters: #( #arg )&gt;		^ JSEBoolean value: object isArray</body>

<body package="JavascriptEngine-Runtime-Core">functionJoin: separator executionContext: executionContext	"15.4.4.5 Array.prototype.join (separator)"	&lt;prototypeFunction: #join parameters: #( #separator) &gt;	&lt;sendToPrototype&gt;	^ executionContext thisValue arrayJoin: separator</body>

<body package="JavascriptEngine-Runtime-Core">functionLastIndexOf: searchElement fromIndex: fromIndex executionContext: executionContext	"15.4.4.15 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )"	&lt;prototypeFunction: #lastIndexOf parameters: #( searchElement fromIndex) length: 1&gt;	&lt;sendToPrototype&gt;	^ executionContext thisValue arrayLastIndexOf: searchElement fromIndex: fromIndex</body>

<body package="JavascriptEngine-Runtime-Core">functionMap: mapFunction thisArgument: thisArgument executionContext: executionContext 	"15.4.4.19 Array.prototype.map ( callbackfn [ , thisArg ] )"	&lt;prototypeFunction: #map parameters: #( callbackfn thisArg ) length: 1 &gt;	&lt;sendToPrototype&gt;		^ executionContext thisValue arrayMap: mapFunction thisArgument: thisArgument executionEnvironment: executionContext executionEnvironment</body>

<body package="JavascriptEngine-Runtime-Core">functionPop: executionContext	"15.4.4.6 Array.prototype.pop ( )"	&lt;prototypeFunction: #pop parameters: #() &gt;	&lt;sendToPrototype&gt;	^ executionContext thisValue arrayPop</body>

<body package="JavascriptEngine-Runtime-Core">functionPush: items executionContext: executionContext	"15.4.4.7 Array.prototype.push ( [ item1 [ , item2 [ , ... ] ] ] )"	&lt;prototypeFunction: #push parameters: #( #varargs) &gt;	&lt;sendToPrototype&gt;	^ executionContext thisValue arrayPush: items</body>

<body package="JavascriptEngine-Runtime-Core">functionReduce: reduceFunction initialValue: initialValueArguments executionContext: executionContext 	" 15.4.4.21 Array.prototype.reduce ( callbackfn [ , initialValue ] ) "	&lt;prototypeFunction: #reduce parameters: #( callbackfn varargs ) length: 1&gt;	&lt;sendToPrototype&gt;		| initialValue |	" initalValue not present is different from undefined "	initialValue := initialValueArguments size &gt;= 1		ifTrue: [ initialValueArguments at: 1 ]		ifFalse: [ nil ].	^ executionContext thisValue 		arrayReduce: reduceFunction		initialValue: initialValue		executionEnvironment: executionContext executionEnvironment		reverse: false</body>

<body package="JavascriptEngine-Runtime-Core">functionReduceRight: reduceFunction initialValue: initialValueArguments executionContext: executionContext 	"15.4.4.22 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )"	&lt;prototypeFunction: #reduceRight parameters: #( callbackfn varargs ) length: 1&gt;	&lt;sendToPrototype&gt;		" initalValue not present is different from undefined "	| initialValue |	initialValue := initialValueArguments size &gt;= 1		ifTrue: [ initialValueArguments at: 1 ]		ifFalse: [ nil ].	^ executionContext thisValue 		arrayReduce: reduceFunction		initialValue: initialValue		executionEnvironment: executionContext executionEnvironment		reverse: true</body>

<body package="JavascriptEngine-Runtime-Core">functionReverse: executionContext	"15.4.4.8 Array.prototype.reverse ( )"	&lt;prototypeFunction: #reverse parameters: #() &gt;	&lt;sendToPrototype&gt;	^ executionContext thisValue arrayReverse</body>

<body package="JavascriptEngine-Runtime-Core">functionShift: executionContext	"15.4.4.9 Array.prototype.shift ( )"	&lt;prototypeFunction: #shift parameters: #() &gt;	&lt;sendToPrototype&gt;	^ executionContext thisValue arrayShift</body>

<body package="JavascriptEngine-Runtime-Core">functionSliceFrom: start to: end executionContext: executionContext	"15.4.4.10 Array.prototype.slice (start, end)"	&lt;prototypeFunction: #slice parameters: #( #start #end )&gt;	&lt;sendToPrototype&gt;	^ executionContext thisValue arraySliceFrom: start to: end</body>

<body package="JavascriptEngine-Runtime-Core">functionSome: enumerateFunction thisArgument: thisArgument executionContext: executionContext 	"15.4.4.17 Array.prototype.some ( callbackfn [ , thisArg ] )"	&lt;prototypeFunction: #some parameters: #( callbackfn thisArg ) length: 1&gt;	&lt;sendToPrototype&gt;	^ executionContext thisValue arraySome: enumerateFunction thisArgument: thisArgument executionEnvironment: executionContext executionEnvironment</body>

<body package="JavascriptEngine-Runtime-Core">functionSort: sortFunction executionContext: executionContext 	"15.4.4.11 Array.prototype.sort (comparefn)"	&lt;prototypeFunction: #sort parameters: #( comparefn ) &gt;	&lt;sendToPrototype&gt;	^ executionContext thisValue arraySort: sortFunction executionEnvironment: executionContext executionEnvironment</body>

<body package="JavascriptEngine-Runtime-Core">functionSplice: start deleteCount: deleteCount items: items executionContext: executionContext	"15.4.4.12 Array.prototype.splice (start, deleteCount [ , item1 [ , item2 [ , ... ] ] ] )"	&lt;prototypeFunction: #splice parameters: #( start deleteCount #varargs) length: 2&gt;	&lt;sendToPrototype&gt;		^ executionContext thisValue arraySplice: start deleteCount: deleteCount items: items</body>

<body package="JavascriptEngine-Runtime-Core">functionToString: executionContext 	"15.4.4.2 Array.prototype.toString ( ) "	&lt;prototypeFunction: #toString parameters: #( )&gt;	&lt;sendToPrototype&gt;	| array joinFunction |	array := executionContext thisValue.	joinFunction := array get: #join.	^ joinFunction isCallable 		ifTrue: [ joinFunction callWithThis: array arguments: #( ) executionEnvironment: executionContext executionEnvironment ]		ifFalse: [ array objectToStringValue ]</body>

<body package="JavascriptEngine-Runtime-Core">functionUnshift: items executionContext: executionContext	"15.4.4.13 Array.prototype.unshift ( [ item1 [ , item2 [ , ... ] ] ] )"	&lt;prototypeFunction: #unshift parameters: #( #varargs ) &gt;	&lt;sendToPrototype&gt;	^ executionContext thisValue arrayUnshift: items</body>
</methods>

<methods>
<class-id>JSE.JSEDate</class-id> <category>functions</category>

<body package="JavascriptEngine-Runtime-Core">constructor: dateElements executionContext: executionContext	"15.9.3 The Date Constructor"	&lt;constructor: #( #varargs ) length: 7&gt;		| internalValue constructedObject |	constructedObject := executionContext thisValue.	^ constructedObject isUndefined 		ifTrue: 		[	" constructor as a function ignores all arguments and returns a string representing the current time "			self toStringValue: Timestamp now isUTC: false locale: Locale current		]		ifFalse: 		[	" constructor has created an object "			internalValue := dateElements size = 0					ifTrue: [ JSEPlatform timestampNowUTC jseAsMilliseconds ]					ifFalse: 					[	dateElements size = 1							ifTrue: [ self internalValueFromValue: (dateElements at: 1) ]							ifFalse: 							[	self intervalValueFromElements: dateElements isUTC: false							]					].			constructedObject primitiveValue: ( JSEDate value: internalValue ).			constructedObject		]</body>

<body package="JavascriptEngine-Runtime-Core">functionGetDate	"15.9.5.14 Date.prototype.getDate ( )"	&lt;prototypeFunction: #getDate parameters: #()&gt;		^ self isValid 		ifTrue: [ self asLocalTimestamp day ]		ifFalse: [ JSEPlatform nanValue ]</body>

<body package="JavascriptEngine-Runtime-Core">functionGetDay	"15.9.5.16 Date.prototype.getDay ( )"	&lt;prototypeFunction: #getDay parameters: #()&gt;		^ self isValid 		ifTrue: [ self asLocalTimestamp jseWeekday ]		ifFalse: [ JSEPlatform nanValue ]</body>

<body package="JavascriptEngine-Runtime-Core">functionGetFullYear	"15.9.5.10 Date.prototype.getFullYear ( )"	&lt;prototypeFunction: #getFullYear parameters: #()&gt;		^ self isValid 		ifTrue: [ self asLocalTimestamp year ]		ifFalse: [ JSEPlatform nanValue ]</body>

<body package="JavascriptEngine-Runtime-Core">functionGetHours	"15.9.5.18 Date.prototype.getHours ( )"	&lt;prototypeFunction: #getHours parameters: #()&gt;		^ self isValid 		ifTrue: [ self asLocalTimestamp hour ]		ifFalse: [ JSEPlatform nanValue ]</body>

<body package="JavascriptEngine-Runtime-Core">functionGetMilliseconds	"15.9.5.24 Date.prototype.getMilliseconds ( )"	&lt;prototypeFunction: #getMilliseconds parameters: #()&gt;		^ self isValid 		ifTrue: [ self asLocalTimestamp millisecond ]		ifFalse: [ JSEPlatform nanValue ]</body>

<body package="JavascriptEngine-Runtime-Core">functionGetMinutes	"15.9.5.20 Date.prototype.getMinutes ( )"	&lt;prototypeFunction: #getMinutes parameters: #()&gt;		^ self isValid 		ifTrue: [ self asLocalTimestamp minute ]		ifFalse: [ JSEPlatform nanValue ]</body>

<body package="JavascriptEngine-Runtime-Core">functionGetMonth	"15.9.5.12 Date.prototype.getMonth ( )"	&lt;prototypeFunction: #getMonth parameters: #()&gt;		^ self isValid 		ifTrue: [ self asLocalTimestamp month - 1 ]		ifFalse: [ JSEPlatform nanValue ]</body>

<body package="JavascriptEngine-Runtime-Core">functionGetSeconds	"15.9.5.22 Date.prototype.getSeconds ( )"	&lt;prototypeFunction: #getSeconds parameters: #()&gt;		^ self isValid 		ifTrue: [ self asLocalTimestamp second ]		ifFalse: [ JSEPlatform nanValue ]</body>

<body package="JavascriptEngine-Runtime-Core">functionGetTime	"15.9.5.9 Date.prototype.getTime ( )"	&lt;prototypeFunction: #getTime parameters: #()&gt;		^ self value</body>

<body package="JavascriptEngine-Runtime-Core">functionGetTimezoneOffset	"15.9.5.26 Date.prototype.getTimezoneOffset ( )"	&lt;prototypeFunction: #getTimezoneOffset parameters: #()&gt;		^ self isValid 		ifTrue: [ self asLocalTimestamp jseTimeZone asSeconds / 60 ]		ifFalse: [ JSEPlatform nanValue ]</body>

<body package="JavascriptEngine-Runtime-Core">functionGetUTCDate	"15.9.5.15 Date.prototype.getUTCDate ( )"	&lt;prototypeFunction: #getUTCDate parameters: #()&gt;		^ self isValid 		ifTrue: [ self asUTCTimestamp day ]		ifFalse: [ JSEPlatform nanValue ]</body>

<body package="JavascriptEngine-Runtime-Core">functionGetUTCDay	"15.9.5.17 Date.prototype.getUTCDay ( )"	&lt;prototypeFunction: #getUTCDay parameters: #()&gt;		^ self isValid 		ifTrue: [ self asUTCTimestamp jseWeekday ]		ifFalse: [ JSEPlatform nanValue ]</body>

<body package="JavascriptEngine-Runtime-Core">functionGetUTCFullYear	"15.9.5.11 Date.prototype.getUTCFullYear ( )"	&lt;prototypeFunction: #getUTCFullYear parameters: #()&gt;		^ self isValid 		ifTrue: [ self asUTCTimestamp year ]		ifFalse: [ JSEPlatform nanValue ]</body>

<body package="JavascriptEngine-Runtime-Core">functionGetUTCHours	"15.9.5.19 Date.prototype.getUTCHours ( )"	&lt;prototypeFunction: #getUTCHours parameters: #()&gt;		^ self isValid 		ifTrue: [ self asUTCTimestamp hour ]		ifFalse: [ JSEPlatform nanValue ]</body>

<body package="JavascriptEngine-Runtime-Core">functionGetUTCMilliseconds	"15.9.5.24 Date.prototype.getUTCMilliseconds ( )"	&lt;prototypeFunction: #getUTCMilliseconds parameters: #()&gt;		^ self isValid 		ifTrue: [ self asUTCTimestamp millisecond ]		ifFalse: [ JSEPlatform nanValue ]</body>

<body package="JavascriptEngine-Runtime-Core">functionGetUTCMinutes	"15.9.5.21 Date.prototype.getUTCMinutes ( )"	&lt;prototypeFunction: #getUTCMinutes parameters: #()&gt;		^ self isValid 		ifTrue: [ self asUTCTimestamp minute ]		ifFalse: [ JSEPlatform nanValue ]</body>

<body package="JavascriptEngine-Runtime-Core">functionGetUTCMonth	"15.9.5.13 Date.prototype.getUTCMonth ( )"	&lt;prototypeFunction: #getUTCMonth parameters: #()&gt;		^ self isValid 		ifTrue: [ self asUTCTimestamp month - 1 ]		ifFalse: [ JSEPlatform nanValue ]</body>

<body package="JavascriptEngine-Runtime-Core">functionGetUTCSeconds	"15.9.5.23 Date.prototype.getUTCSeconds ( )"	&lt;prototypeFunction: #getUTCSeconds parameters: #()&gt;		^ self isValid 		ifTrue: [ self asUTCTimestamp second ]		ifFalse: [ JSEPlatform nanValue ]</body>

<body package="JavascriptEngine-Runtime-Core">functionNow	" 15.9.4.4 Date.now ( ) "	&lt;function: #now parameters: #()&gt;		^ JSEPlatform timestampNowUTC jseAsMilliseconds</body>

<body package="JavascriptEngine-Runtime-Core">functionParse: string 	"15.9.4.2 Date.parse (string)"	&lt;function: #parse parameters: #( string )&gt;		^ self parseString: string toStringValue</body>

<body package="JavascriptEngine-Runtime-Core">functionSetDate: date 	"15.9.5.36 Date.prototype.setDate (date)"	&lt;prototypeFunction: #setDate parameters: #(date)&gt;		^ self setYear: nil month: nil day: date inUTC: false</body>

<body package="JavascriptEngine-Runtime-Core">functionSetFullyYear: year month: month date: date 	"15.9.5.40 Date.prototype.setFullYear (year [, month [, date ] ] )"	&lt;prototypeFunction: #setFullYear parameters: #(year month date)&gt;		^ self setYear: year month: month day: date inUTC: false</body>

<body package="JavascriptEngine-Runtime-Core">functionSetHours: hours minutes: minutes seconds: seconds milliseconds: milliseconds 	"15.9.5.34 Date.prototype.setHours (hour [, min [, sec [, ms ] ] ] )"	&lt;prototypeFunction: #setHours parameters: #(hours minutes seconds milliseconds)&gt;		^ self setHours: hours minutes: minutes seconds: seconds milliseconds: milliseconds inUTC: false</body>

<body package="JavascriptEngine-Runtime-Core">functionSetMilliseconds: milliseconds 	"15.9.5.28 Date.prototype.setMilliseconds (ms)"	&lt;prototypeFunction: #setMilliseconds parameters: #(milliseconds)&gt;		^ self setHours: nil minutes: nil seconds: nil milliseconds: milliseconds inUTC: false</body>

<body package="JavascriptEngine-Runtime-Core">functionSetMinutes: minutes seconds: seconds milliseconds: milliseconds 	"15.9.5.32 Date.prototype.setMinutes (min [, sec [, ms ] ] )"	&lt;prototypeFunction: #setMinutes parameters: #(minutes seconds milliseconds)&gt;		^ self setHours: nil minutes: minutes seconds: seconds milliseconds: milliseconds inUTC: false</body>

<body package="JavascriptEngine-Runtime-Core">functionSetMonth: month date: date 	"15.9.5.38 Date.prototype.setMonth (month [, date ] )"	&lt;prototypeFunction: #setMonth parameters: #(month date)&gt;		^ self setYear: nil month: month day: date inUTC: false</body>

<body package="JavascriptEngine-Runtime-Core">functionSetSeconds: seconds milliseconds: milliseconds 	"15.9.5.30 Date.prototype.setSeconds (sec [, ms ] )"	&lt;prototypeFunction: #setSeconds parameters: #(seconds milliseconds)&gt;		^ self setHours: nil minutes: nil seconds: seconds milliseconds: milliseconds inUTC: false</body>

<body package="JavascriptEngine-Runtime-Core">functionSetTime: time 	"15.9.5.27 Date.prototype.setTime (time)"	&lt;prototypeFunction: #setTime parameters: #(time)&gt;		| timeValue |	timeValue := time toNumberValue.	self value: timeValue.	^ self value</body>

<body package="JavascriptEngine-Runtime-Core">functionSetUTCDate: date 	"15.9.5.37 Date.prototype.setUTCDate (date)"	&lt;prototypeFunction: #setUTCDate parameters: #(date)&gt;		^ self setYear: nil month: nil day: date inUTC: true</body>

<body package="JavascriptEngine-Runtime-Core">functionSetUTCFullyYear: year month: month date: date 	"15.9.5.41 Date.prototype.setUTCFullYear (year [, month [, date ] ] )"	&lt;prototypeFunction: #setUTCFullYear parameters: #(year month date)&gt;		^ self setYear: year month: month day: date inUTC: true</body>

<body package="JavascriptEngine-Runtime-Core">functionSetUTCHours: hours minutes: minutes seconds: seconds milliseconds: milliseconds 	"15.9.5.35 Date.prototype.setUTCHours (hour [, min [, sec [, ms ] ] ] )"	&lt;prototypeFunction: #setUTCHours parameters: #(hours minutes seconds milliseconds)&gt;		^ self setHours: hours minutes: minutes seconds: seconds milliseconds: milliseconds inUTC: true</body>

<body package="JavascriptEngine-Runtime-Core">functionSetUTCMilliseconds: milliseconds 	"15.9.5.29 Date.prototype.setUTCMilliseconds (ms)"	&lt;prototypeFunction: #setUTCMilliseconds parameters: #(milliseconds)&gt;		^ self setHours: nil minutes: nil seconds: nil milliseconds: milliseconds inUTC: true</body>

<body package="JavascriptEngine-Runtime-Core">functionSetUTCMinutes: minutes seconds: seconds milliseconds: milliseconds 	"15.9.5.33 Date.prototype.setUTCMinutes (min [, sec [, ms ] ] )"	&lt;prototypeFunction: #setUTCMinutes parameters: #(minutes seconds milliseconds)&gt;		^ self setHours: nil minutes: minutes seconds: seconds milliseconds: milliseconds inUTC: true</body>

<body package="JavascriptEngine-Runtime-Core">functionSetUTCMonth: month date: date 	"15.9.5.39 Date.prototype.setUTCMonth (month [, date ] )"	&lt;prototypeFunction: #setUTCMonth parameters: #(month date)&gt;		^ self setYear: nil month: month day: date inUTC: true</body>

<body package="JavascriptEngine-Runtime-Core">functionSetUTCSeconds: seconds milliseconds: milliseconds 	"15.9.5.31 Date.prototype.setUTCSeconds (sec [, ms ] )"	&lt;prototypeFunction: #setUTCSeconds parameters: #(seconds milliseconds)&gt;		^ self setHours: nil minutes: nil seconds: seconds milliseconds: milliseconds inUTC: true</body>

<body package="JavascriptEngine-Runtime-Core">functionToDateString	"15.9.5.3 Date.prototype.toDateString ( )"	&lt;prototypeFunction: #toDateString parameters: #()&gt;		^ self toLocaleDateString</body>

<body package="JavascriptEngine-Runtime-Core">functionToISOString	"15.9.5.43 Date.prototype.toISOString ( )"	&lt;prototypeFunction: #toISOString parameters: #()&gt;		^ self isValid 		ifTrue: [ self uncheckedDateToISOString ]		ifFalse: [ JSERangeError raiseSignal: self class invalidDateString ]</body>

<body package="JavascriptEngine-Runtime-Core">functionToJSON: key executionContext: executionContext	"15.9.5.44 Date.prototype.toJSON ( key )"	&lt;prototypeFunction: #toJSON parameters: #(key)&gt;	&lt;sendToPrototype&gt;	^ executionContext thisValue dateToJSON: key</body>

<body package="JavascriptEngine-Runtime-Core">functionToLocaleDateString	"15.9.5.6 Date.prototype.toLocaleDateString ( )"	&lt;prototypeFunction: #toLocaleDateString parameters: #()&gt;		^ self toLocaleDateString</body>

<body package="JavascriptEngine-Runtime-Core">functionToLocaleString	"15.9.5.5 Date.prototype.toLocaleString ( )"	&lt;prototypeFunction: #toLocaleString parameters: #()&gt;	^ self toLocaleString</body>

<body package="JavascriptEngine-Runtime-Core">functionToLocaleTimeString	"15.9.5.7 Date.prototype.toLocaleTimeString ( )"	&lt;prototypeFunction: #toLocaleTimeString parameters: #()&gt;	^ self toLocaleTimeString</body>

<body package="JavascriptEngine-Runtime-Core">functionToString	"15.9.5.2 Date.prototype.toString ( )"	&lt;prototypeFunction: #toString parameters: #()&gt;	^ self dateToString</body>

<body package="JavascriptEngine-Runtime-Core">functionToTimeString	"15.9.5.4 Date.prototype.toTimeString ( )"	&lt;prototypeFunction: #toTimeString parameters: #()&gt;	^ self toTimeString</body>

<body package="JavascriptEngine-Runtime-Core">functionToUTCString	"15.9.5.42 Date.prototype.toUTCString ( )"	&lt;prototypeFunction: #toUTCString parameters: #()&gt;		^ self isValid 		ifTrue: [ self toStringValue: self asUTCTimestamp isUTC: true locale: Locale current ]		ifFalse: [ self class invalidDateString ]</body>

<body package="JavascriptEngine-Runtime-Core">functionUTC: dateElements	&lt;function: #UTC parameters: #( #varargs ) length: 7&gt;		^ self intervalValueFromElements: dateElements isUTC: true</body>

<body package="JavascriptEngine-Runtime-Core">functionValueOf 	"15.9.5.8 Date.prototype.valueOf ( )"	&lt;prototypeFunction: #valueOf parameters: #()&gt;		^ self value</body>
</methods>

<methods>
<class-id>JSE.JSEObject</class-id> <category>functions</category>

<body package="JavascriptEngine-Runtime-Core">constructor: arguments executionContext: executionContext	" 15.2.1.1 Object ( [ value ] ) "	&lt;constructor: #(#varargs)&gt;		| value |	value := arguments size &gt;= 1 			ifTrue: [ arguments first ]			ifFalse: [ nil ].	^ ( value isNil or: [ value isJSENull or: [ value isUndefined ]]) 		ifTrue: [ (self getPrototypeIn: executionContext executionEnvironment) constructNewObject ]		ifFalse: [ value toObject ]</body>

<body package="JavascriptEngine-Runtime-Core">functionCreate: object properties: objectProperties 	" 15.2.3.5 Object.create ( O [, Properties] ) "	&lt;function: #create parameters: #( #O #Properties )&gt;		| newObject |	self checkTypeIsObject: object.	newObject := object constructNewObject.	( objectProperties notNil and: [ objectProperties isUndefined not ]) 		ifTrue: [ newObject definePropertiesFromObject: objectProperties ].	^ newObject</body>

<body package="JavascriptEngine-Runtime-Core">functionDefinePropertiesOf: object properties: objectProperties 	" 15.2.3.7 Object.defineProperties ( O, Properties ) "	&lt;function: #defineProperties parameters: #( #O #Properties )&gt;		| newObject |	self checkTypeIsObject: object.	newObject := object constructNewObject.	objectProperties isUndefined		ifFalse: [ object definePropertiesFromObject: objectProperties ].	^ newObject</body>

<body package="JavascriptEngine-Runtime-Core">functionDefinePropertyOf: object name: propertyName attributes: attributes	" 15.2.3.6 Object.defineProperty ( O, P, Attributes ) "	&lt;function: #defineProperty parameters: #( #O #P #attributes )&gt;		self checkTypeIsObject: object.	object defineProperty: propertyName toStringValue fromObject: attributes .	^ object</body>

<body package="JavascriptEngine-Runtime-Core">functionFreeze: object	" 15.2.3.9 Object.freeze ( O ) "	&lt;function: #freeze parameters: #( #O )&gt;		self checkTypeIsObject: object.	object freeze.	^ object</body>

<body package="JavascriptEngine-Runtime-Core">functionGetOwnPropertyDescriptorOf: object property: propertyName 	" 15.2.3.3 Object.getOwnPropertyDescriptor ( O, P ) "	&lt;function: #getOwnPropertyDescriptor parameters: #( #O #P )&gt;		| property |	self checkTypeIsObject: object.	property := object getOwnPropertyOrNil: propertyName asPropertyName.	^ property notNil 		ifTrue: [ property objectFromPropertyDescriptor ]		ifFalse: [ self undefined ]</body>

<body package="JavascriptEngine-Runtime-Core">functionGetOwnPropertyNamesOf: object	" 15.2.3.4 Object.getOwnPropertyNames ( O ) "	&lt;function: #getOwnPropertyNames parameters: #( #O )&gt;	| names |	self checkTypeIsObject: object.	names := OrderedCollection new.	object propertyNamesDo: [ : propertyName |		names add: propertyName asJSEPropertyNameObject.	].	^ JSEArray withElements: names</body>

<body package="JavascriptEngine-Runtime-Core">functionGetPrototypeOf: object	&lt;function: #getPrototypeOf parameters: #( #O )&gt;	self checkTypeIsObject: object.	^ object internalPrototype</body>

<body package="JavascriptEngine-Runtime-Core">functionHasOwnProperty: aPropertyName executionContext: executionContext	"15.2.4.5 Object.prototype.hasOwnProperty (V)"	&lt;prototypeFunction: #hasOwnProperty parameters: #(V)&gt;	&lt;sendToPrototype&gt;	| object ownProperty |	object := executionContext thisValue toObject.	ownProperty := object  getOwnPropertyOrNil: aPropertyName asPropertyName.	^ ownProperty notNil</body>

<body package="JavascriptEngine-Runtime-Core">functionIsExtensible: object	" 15.2.3.13 Object.isExtensible ( O ) "	&lt;function: #isExtensible parameters: #( #O )&gt;		self checkTypeIsObject: object.	^ object isExtensible</body>

<body package="JavascriptEngine-Runtime-Core">functionIsFrozen: object	" 15.2.3.12 Object.isFrozen ( O ) "	&lt;function: #isFrozen parameters: #( #O )&gt;		self checkTypeIsObject: object.	^ object isFrozen</body>

<body package="JavascriptEngine-Runtime-Core">functionIsPrototypeOf: aConcreteObject executionContext: executionContext 	"15.2.4.6 Object.prototype.isPrototypeOf (V)"	&lt;prototypeFunction: #isPrototypeOf parameters: #(V)&gt;	&lt;sendToPrototype&gt;	| thisProtoype otherObject otherPrototype |	aConcreteObject isObject 		ifTrue: 		[	thisProtoype := executionContext thisValue toObject.			otherObject := aConcreteObject.			[	otherPrototype := otherObject internalPrototype.				otherPrototype isUndefined or: [ otherPrototype isJSENull ]			] whileFalse: 				[	thisProtoype == otherPrototype 						ifTrue: [ ^ true ].					otherObject := otherPrototype 				]		].	^ false</body>

<body package="JavascriptEngine-Runtime-Core">functionIsSealed: object 	" 15.2.3.11 Object.isSealed ( O ) "	&lt;function: #isSealed parameters: #( #O )&gt;		self checkTypeIsObject: object.	^ object isSealed</body>

<body package="JavascriptEngine-Runtime-Core">functionKeys: object	" 15.2.3.14 Object.keys ( O ) "	&lt;function: #keys parameters: #( #O )&gt;		| names |	self checkTypeIsObject: object.	names := OrderedCollection new.	object enumerablePropertyNamesDo: [ : propertyName |		names add: propertyName asJSEPropertyNameObject.	].	^ JSEArray withElements: names</body>

<body package="JavascriptEngine-Runtime-Core">functionPreventExtensions: object	" 15.2.3.10 Object.preventExtensions ( O ) "	&lt;function: #preventExtensions parameters: #( #O )&gt;		self checkTypeIsObject: object.	object isExtensible: false.	^ object</body>

<body package="JavascriptEngine-Runtime-Core">functionPropertyIsEnumerable: aPropertyName executionContext: executionContext	"15.2.4.7 Object.prototype.propertyIsEnumerable (V)"	&lt;prototypeFunction: #propertyIsEnumerable parameters: #(V)&gt;	&lt;sendToPrototype&gt;	| object ownProperty |	object := executionContext thisValue toObject.	ownProperty := object getOwnPropertyOrNil: aPropertyName toStringValue asJSEPropertyName.	^ ownProperty notNil 		ifTrue: [ ownProperty isEnumerable ]		ifFalse: [ false ]</body>

<body package="JavascriptEngine-Runtime-Core">functionSeal: object	" 15.2.3.8 Object.seal ( O ) "	&lt;function: #seal parameters: #( #O )&gt;		self checkTypeIsObject: object.	object seal.	^ object</body>

<body package="JavascriptEngine-Runtime-Core">functionToLocaleString: executionContext 	"15.2.4.3 Object.prototype.toLocaleString ( )"	&lt;prototypeFunction: #toLocaleString parameters: #()&gt;	&lt;sendToPrototype&gt;	| object toStringFunction |	object := executionContext thisValue.	toStringFunction := object get: #toString.	toStringFunction isCallable 		ifFalse: [ JSETypeError raiseSignal: 'No callable function named toString() defined' ].	^ toStringFunction callWithThis: object arguments: #( ) executionEnvironment: executionContext executionEnvironment</body>

<body package="JavascriptEngine-Runtime-Core">functionToString: executionContext 	" 15.2.4.2 Object.prototype.toString ( ) "	&lt;prototypeFunction: #toString parameters: #( )&gt;	&lt;sendToPrototype&gt;		^ executionContext thisValue objectToStringValue asJSEObject</body>

<body package="JavascriptEngine-Runtime-Core">functionValueOf: executionContext	" 15.2.4.4 Object.prototype.valueOf ( ) "	&lt;prototypeFunction: #valueOf parameters: #()&gt;	&lt;sendToPrototype&gt;	^ executionContext thisValue toObject</body>
</methods>

<methods>
<class-id>JSE.JSEBoolean</class-id> <category>functions</category>

<body package="JavascriptEngine-Runtime-Core">constructor: aJSEObject executionContext: executionContext 	&lt;constructor: #( #value )&gt;		^ self constructWithPrimitiveValue: aJSEObject toBoolean executionContext: executionContext</body>

<body package="JavascriptEngine-Runtime-Core">functionToString	" 15.6.4.2 Boolean.prototype.toString ( ) "	&lt;prototypeFunction: #toString parameters: #()&gt;		^ self booleanToString</body>

<body package="JavascriptEngine-Runtime-Core">functionValueOf	" 15.6.4.3 Boolean.prototype.valueOf ( ) "	&lt;prototypeFunction: #valueOf parameters: #()&gt;		^ self booleanValueOf</body>
</methods>

<methods>
<class-id>JSE.JSEGlobalObject</class-id> <category>functions</category>

<body package="JavascriptEngine-Runtime-Core">functionDecodeURI: encodedURI	"15.1.3.1 decodeURI (encodedURI)"	&lt;function: #decodeURI parameters: #( #encodedURI )&gt;		^ self uriDecode: encodedURI toStringValue reserved: self decodeURIReserved</body>

<body package="JavascriptEngine-Runtime-Core">functionDecodeURIComponent: encodedURIComponent	"15.1.3.2 decodeURIComponent (encodedURIComponent)"	&lt;function: #decodeURIComponent parameters: #( #encodedURIComponent )&gt;	^ self uriDecode: encodedURIComponent toStringValue reserved: self decodeURIComponentReserved</body>

<body package="JavascriptEngine-Runtime-Core">functionEncodeURI: uri	" 15.1.3.3 encodeURI (uri) "	&lt;function: #encodeURI parameters: #( #uri )&gt;		^ self uriEncode: uri toStringValue unescaped: self encodeURIUnescaped</body>

<body package="JavascriptEngine-Runtime-Core">functionEncodeURIComponent: uriComponent	" 15.1.3.4 encodeURIComponent (uriComponent) "	&lt;function: #encodeURIComponent parameters: #( #uriComponent )&gt;		^ self uriEncode: uriComponent toStringValue unescaped: self encodeURIComponentUnescaped</body>

<body package="JavascriptEngine-Runtime-Core">functionEval: codeString executionContext: executionContext 	" 15.1.2.1 eval (x) "	&lt;function: #eval parameters: #( #x )&gt;		| isStrict isDirect |	codeString isJSEString 		ifFalse: [ ^ codeString ].	isDirect := executionContext isDirectEvalCall.	isStrict := isDirect and: [ executionContext callerIsStrict ].	" currentExecutionContext includes the eval argument x, so use callingExecutionContext, as described in the ECMA standard "	^ executionContext executionEnvironment callingExecutionContext eval: codeString value isDirect: isDirect isString: isStrict</body>

<body package="JavascriptEngine-Runtime-Core">functionIsFinite: number 	" 15.1.2 Function Properties of the Global Object "	&lt;function: #isFinite parameters: #( #number )&gt;		^ [ JSEBoolean value: number toNumber isFinite ] on: JSEError do: [ : ex | JSETrue singleton ]</body>

<body package="JavascriptEngine-Runtime-Core">functionIsNaN: number 	" 15.1.2 Function Properties of the Global Object "	&lt;function: #isNaN parameters: #( #number )&gt;		^ [ JSEBoolean value: number toNumber isNaN ] on: JSEError do: [: ex | JSEFalse singleton ]</body>

<body package="JavascriptEngine-Runtime-Core">functionParseFloat: string	" 15.1.2 Function Properties of the Global Object "	&lt;function: #parseFloat parameters:  #( string )&gt;		^ string parseFloat</body>

<body package="JavascriptEngine-Runtime-Core">functionParseInt: string radix: radix	" 15.1.2 Function Properties of the Global Object "	&lt;function: #parseInt parameters:  #( string radix )&gt;		^ string parseIntegerWithRadix: radix</body>
</methods>

<methods>
<class-id>JSE.JSEGlobalObject</class-id> <category>predefined properties</category>

<body package="JavascriptEngine-Runtime-Core">propertInfinity	&lt;property: #Infinity&gt;	^ JSENumber positiveInfinity</body>

<body package="JavascriptEngine-Runtime-Core">propertUndefined	&lt;property: #undefined&gt;	^ JSEUndefined singleton.</body>

<body package="JavascriptEngine-Runtime-Core">propertyNaN	&lt;property: #NaN&gt;	^ JSENumber nan</body>
</methods>

<methods>
<class-id>JSE.JSEMathObject</class-id> <category>functions</category>

<body package="JavascriptEngine-Runtime-Core">functionAbs: number	"15.8.2.1 abs (x)"	&lt;function: #abs parameters: #( #number )&gt;		^ number toNumberValue abs</body>

<body package="JavascriptEngine-Runtime-Core">functionAcos: number	"15.8.2.2 acos (x)"	&lt;function: #acos parameters: #( #number )&gt;		^ number toNumberValue asDouble arcCos</body>

<body package="JavascriptEngine-Runtime-Core">functionAsin: number	"15.8.2.3 asin (x)"	&lt;function: #asin parameters: #( #number )&gt;		^ number toNumberValue asDouble arcSin</body>

<body package="JavascriptEngine-Runtime-Core">functionAtan2: y x: x 	"15.8.2.5 atan2 (y, x)"	&lt;function: #atan2 parameters: #( #y #x )&gt;		| yd xd |	yd := y toNumberValue asDouble.	xd := x toNumberValue asDouble.	" NaN "	yd isNaN 		ifTrue: [ ^ JSENumber nan ].	xd isNaN 		ifTrue: [ ^ JSENumber nan ].	" Zero "	yd = 0 		ifTrue: 		[	^ yd jseIsPositiveZero 				ifTrue: 				[	(xd &gt; 0 or: [ xd jseIsPositiveZero ])						ifTrue: [  0 ]						ifFalse: [  self pi ]				] ifFalse: [					(xd &gt; 0 or: [ xd jseIsPositiveZero ])						ifTrue: [  JSEPlatform negativeZeroValue ]						ifFalse: [  self pi negated ]				]		].	" Infinity "	yd isInfinity 		ifTrue: 		[	yd isPositiveInfinity 				ifTrue: 				[	xd isPositiveInfinity 						ifTrue: [ ^ self pi / 4 ].					xd isNegativeInfinity 						ifTrue: [ ^ self pi * 3 / 4 ].					^ self pi / 2				].			yd isNegativeInfinity 				ifTrue: 				[	xd isPositiveInfinity 						ifTrue: [ ^ self pi negated / 4 ].					xd isNegativeInfinity 						ifTrue: [ ^ self pi * -3 / 4 ].					^ self pi negated / 2				]		]		ifFalse: 		[	xd isPositiveInfinity 				ifTrue: [ ^ 0 ].			xd isNegativeInfinity 				ifTrue: [ ^ self pi * yd sign ]		].	^ ( yd / ((( xd raisedTo: 2 ) + ( yd raisedTo: 2 )) sqrt + xd )) arcTan * 2</body>

<body package="JavascriptEngine-Runtime-Core">functionAtan: number	"15.8.2.4 atan (x)"	&lt;function: #atan parameters: #( #number )&gt;		^ number toNumberValue asDouble arcTan</body>

<body package="JavascriptEngine-Runtime-Core">functionCeil: number	"15.8.2.6 ceil (x)"	&lt;function: #ceil parameters: #( #number )&gt;		^ number toNumberValue ceiling</body>

<body package="JavascriptEngine-Runtime-Core">functionCos: number	"15.8.2.7 cos (x)"	&lt;function: #cos parameters: #( #number )&gt;		^ number toNumberValue asDouble cos</body>

<body package="JavascriptEngine-Runtime-Core">functionExp: number	"15.8.2.8 exp (x)"	&lt;function: #exp parameters: #( #number )&gt;		^ JSEPlatform floatClass e raisedTo: number toNumberValue</body>

<body package="JavascriptEngine-Runtime-Core">functionFloor: number	"15.8.2.9 floor (x)"	&lt;function: #floor parameters: #( #number )&gt;		^ number toNumberValue floor</body>

<body package="JavascriptEngine-Runtime-Core">functionLog: number	"15.8.2.10 log (x)"	&lt;function: #log parameters: #( #number )&gt;		^ number toNumberValue asDouble ln</body>

<body package="JavascriptEngine-Runtime-Core">functionMax: numbers 	"15.8.2.11 max ( [ value1 [ , value2 [ , ... ] ] ] )"	&lt;function: #max parameters: #(  #varargs ) length: 2 &gt;		| max |	numbers isEmpty 		ifTrue: [ ^ JSENumber negativeInfinity ]		ifFalse: 		[	max := nil.			numbers do: 				[: n | | v |					v := n toNumberValue.					v isNaN 						ifTrue: [ ^ v ].					( max isNil or: [ v &gt; max ]) 						ifTrue: [ max := v ]				].			^ max		]</body>

<body package="JavascriptEngine-Runtime-Core">functionMin: numbers 	"15.8.2.12 min ( [ value1 [ , value2 [ , ... ] ] ] )"	&lt;function: #min parameters: #(  #varargs ) length: 2&gt;		| min |	numbers isEmpty 		ifTrue: [ ^ JSENumber positiveInfinity ]		ifFalse: 		[	min := nil.			numbers do: 				[: n | | v |					v := n toNumberValue.					v isNaN 						ifTrue: [ ^ v ].					( min isNil or: [ v &lt; min ]) 						ifTrue: [ min := v ]				].			^ min		]</body>

<body package="JavascriptEngine-Runtime-Core">functionPow: x y: y 	"15.8.2.13 pow (x, y)"	&lt;function: #pow parameters: #(x y)&gt;		| xv yv xvabs |	xv := x toNumberValue.	yv := y toNumberValue.	yv isNaN 		ifTrue: [ ^ JSENumber nan ].	yv = 0 		ifTrue: [ ^ 1 ].	yv isInfinity 		ifTrue: 		[	xvabs := xv abs.			xvabs &gt; 1 				ifTrue: 				[	yv isPositiveInfinity 						ifTrue: [ ^ JSENumber positiveInfinity ].					yv isNegativeInfinity 						ifTrue: [ ^ 0 ]				].			( xvabs = 1 and: [ yv isInfinity ]) 				ifTrue: [ ^ JSENumber nan ].			^ yv isPositiveInfinity 				ifTrue: [ 0 ]				ifFalse: [ JSENumber positiveInfinity ]		].	xv isInfinity 		ifTrue: 		[	xv isPositiveInfinity 				ifTrue: 				[	yv &gt; 0 						ifTrue: [ ^ JSENumber positiveInfinity ].					yv &lt; 0 						ifTrue: [ ^ 0 ]				].			xv isNegativeInfinity 				ifTrue: 				[	yv &gt; 0 						ifTrue: 						[	^ yv odd 								ifTrue: [ JSENumber negativeInfinity ]								ifFalse: [ JSENumber positiveInfinity ]						].					yv &lt; 0 						ifTrue: [ ^ 0 ]				]		].	xv = 0 		ifTrue: 		[	yv &gt; 0 				ifTrue: [ ^ 0 ].			yv &lt; 0 				ifTrue: [ ^ JSENumber positiveInfinity ]		]		ifFalse: 		[( xv &lt; 0 and: [ xv isInfinity not and: [ yv isInfinity not and: [ yv ~= yv jseAsInteger ]]]) 				ifTrue: [ ^ JSENumber nan ]		].	^ xv raisedTo: yv</body>

<body package="JavascriptEngine-Runtime-Core">functionRandom	"15.8.2.14 random ( )"	&lt;function: #random parameters: #( )&gt;		^ self random next</body>

<body package="JavascriptEngine-Runtime-Core">functionRound: number 	"15.8.2.15 round (x)"	&lt;function: #round parameters: #( #number )&gt;		| nv rounded |	nv := number toNumberValue.	rounded := nv rounded.	^ ( nv &lt; 0 and: [ nv - rounded = 0.5 ]) 		ifTrue: 		[	" round towards +Infinity "			rounded + 1		]		ifFalse: [ rounded ]</body>

<body package="JavascriptEngine-Runtime-Core">functionSin: number	"15.8.2.16 sin (x)"	&lt;function: #sin parameters: #( #number )&gt;		^ number toNumberValue asDouble sin</body>

<body package="JavascriptEngine-Runtime-Core">functionSqrt: number	"15.8.2.17 sqrt (x)"	&lt;function: #sqrt parameters: #( #number )&gt;		^ number toNumberValue asDouble sqrt</body>

<body package="JavascriptEngine-Runtime-Core">functionTan: number	"15.8.2.18 tan (x)"	&lt;function: #tan parameters: #( #number )&gt;		^ number toNumberValue asDouble tan</body>
</methods>

<methods>
<class-id>JSE.JSEMathObject</class-id> <category>predefined properties</category>

<body package="JavascriptEngine-Runtime-Core">propertyE	&lt;property: #E&gt;	^ JSEPlatform floatClass e</body>

<body package="JavascriptEngine-Runtime-Core">propertyLN10	&lt;property: #LN10&gt;	^ 10d ln</body>

<body package="JavascriptEngine-Runtime-Core">propertyLN2	&lt;property: #LN2&gt;	^ 2d ln</body>

<body package="JavascriptEngine-Runtime-Core">propertyLOG10E	&lt;property: #LOG10E&gt;	^ 1d / 10d ln</body>

<body package="JavascriptEngine-Runtime-Core">propertyLOG2E	&lt;property: #LOG2E&gt;	^ 1d / 2d ln</body>

<body package="JavascriptEngine-Runtime-Core">propertyPI	&lt;property: #PI&gt;	^ JSEPlatform floatClass pi</body>

<body package="JavascriptEngine-Runtime-Core">propertySQRT1_2	&lt;property: #SQRT1_2&gt;	^ 0.5d sqrt</body>

<body package="JavascriptEngine-Runtime-Core">propertySQRT2	&lt;property: #SQRT2&gt;	^ 2d sqrt</body>
</methods>

<methods>
<class-id>JSE.JSEJsonObject</class-id> <category>functions</category>

<body package="JavascriptEngine-Runtime-Core">functionParse: text reviver: reviver executionContext: executionContext 	" 15.12.2 parse ( text [ , reviver ] ) "	&lt;function: #parse parameters: #( #text #reviver )&gt;		| parser object root executionEnvironment |	parser := JSEJsonParser new.	parser factory: JSEJsonObjectFactory new.	object :=		[ parser parse: text toStringValue ] on: JSEError do: [: ex | JSESyntaxError raiseSignal: 'Could not parse JSON: ' , ex description ].	^ reviver isCallable 		ifTrue: 		[	executionEnvironment := executionContext executionEnvironment.			root := JSEObject constructNewObjectIn: executionEnvironment.			root defineOwnProperty: ( JSEDataProperty name: #''  value: object isWritable: true isEnumerable: true isConfigurable: true ) throw: false.			root walk: #'' reviver: reviver executionEnvironment: executionEnvironment		]		ifFalse: [ object ]</body>

<body package="JavascriptEngine-Runtime-Core">functionStringify: value replacer: replacer space: space executionContext: executionContext 	"15.12.3 stringify ( value [ , replacer [ , space ] ] )"	&lt;function: #stringify parameters: #( #value #replacer #space )&gt;		^ value stringifyReplacer: replacer space: space executionEnvironment: executionContext executionEnvironment</body>
</methods>

<methods>
<class-id>JSE.JSERuntimeBuilderVisitor</class-id> <category>operators - blocks</category>

<body package="JavascriptEngine-Runtime-Core">assignmentOperator	&lt;assignmentOperator: #'='&gt;		^ [: reference : assignedValue | reference assign: assignedValue ]</body>

<body package="JavascriptEngine-Runtime-Core">assignmentOperatorAdd	&lt;assignmentOperator: #'+='&gt;		^ [: reference : assignedValue | reference compoundAssign: assignedValue with: [: left : right | left add: right ] ]</body>

<body package="JavascriptEngine-Runtime-Core">assignmentOperatorBitwiseAnd	&lt;assignmentOperator: #'&amp;='&gt;		^ [: reference : assignedValue | reference compoundAssign: assignedValue with: [: left : right | left bitwiseAnd: right ] ]</body>

<body package="JavascriptEngine-Runtime-Core">assignmentOperatorBitwiseOr	&lt;assignmentOperator: #'|='&gt;		^ [: reference : assignedValue | reference compoundAssign: assignedValue with: [: left : right | left bitwiseOr: right ] ]</body>

<body package="JavascriptEngine-Runtime-Core">assignmentOperatorBitwiseXor	&lt;assignmentOperator: #'^='&gt;		^ [: reference : assignedValue | reference compoundAssign: assignedValue with: [: left : right | left bitwiseXor: right ] ]</body>

<body package="JavascriptEngine-Runtime-Core">assignmentOperatorDivide	&lt;assignmentOperator: #'/='&gt;		^ [: reference : assignedValue | reference compoundAssign: assignedValue with: [: left : right | left divide: right ] ]</body>

<body package="JavascriptEngine-Runtime-Core">assignmentOperatorLeftShift	&lt;assignmentOperator: #'&lt;&lt;='&gt;		^ [: reference : assignedValue | reference compoundAssign: assignedValue with: [: left : right | left leftShift: right ] ]</body>

<body package="JavascriptEngine-Runtime-Core">assignmentOperatorModulo	&lt;assignmentOperator: #'%='&gt;		^ [: reference : assignedValue | reference compoundAssign: assignedValue with: [: left : right | left modulo: right ] ]</body>

<body package="JavascriptEngine-Runtime-Core">assignmentOperatorMultiply	&lt;assignmentOperator: #'*='&gt;		^ [: reference : assignedValue | reference compoundAssign: assignedValue with: [: left : right | left multiply: right ] ]</body>

<body package="JavascriptEngine-Runtime-Core">assignmentOperatorSignedRightShift	&lt;assignmentOperator: #'&gt;&gt;='&gt;		^ [: reference : assignedValue | reference compoundAssign: assignedValue with: [: left : right | left signedRightShift: right ] ]</body>

<body package="JavascriptEngine-Runtime-Core">assignmentOperatorSubtract	&lt;assignmentOperator: #'-='&gt;		^ [: reference : assignedValue | reference compoundAssign: assignedValue with: [: left : right | left subtract: right ] ]</body>

<body package="JavascriptEngine-Runtime-Core">assignmentOperatorUnsignedRightShift	&lt;assignmentOperator: #'&gt;&gt;&gt;='&gt;		^ [: reference : assignedValue | reference compoundAssign: assignedValue with: [: left : right | left unsignedRightShift: right ] ]</body>

<body package="JavascriptEngine-Runtime-Core">binaryOperatorAdd	&lt;binaryOperator: #'+'&gt;		^ [: left : right | left add: right ]</body>

<body package="JavascriptEngine-Runtime-Core">binaryOperatorBitwiseAnd	&lt;binaryOperator: #'&amp;'&gt;		^ [: left : right | left bitwiseAnd: right ]</body>

<body package="JavascriptEngine-Runtime-Core">binaryOperatorBitwiseOr	&lt;binaryOperator: #'|'&gt;		^ [: left : right | left bitwiseOr: right ]</body>

<body package="JavascriptEngine-Runtime-Core">binaryOperatorBitwiseXor	&lt;binaryOperator: #'^'&gt;		^ [: left : right | left bitwiseXor: right ]</body>

<body package="JavascriptEngine-Runtime-Core">binaryOperatorDivide	&lt;binaryOperator: #'/'&gt;	^ [: left : right | left divide: right ]</body>

<body package="JavascriptEngine-Runtime-Core">binaryOperatorEquals	&lt;binaryOperator: #'=='&gt;	^ [: left : right | left equals: right ]</body>

<body package="JavascriptEngine-Runtime-Core">binaryOperatorGreaterThan	&lt;binaryOperator:  #'&gt;'&gt;		^ [: left : right | left greaterThan: right ]</body>

<body package="JavascriptEngine-Runtime-Core">binaryOperatorGreaterThanOrEqual	&lt;binaryOperator:  #'&gt;='&gt;		^ [: left : right | left greaterThanOrEqual: right ]</body>

<body package="JavascriptEngine-Runtime-Core">binaryOperatorIn	&lt;binaryOperator:  #in&gt;	^ [: left : right | left in: right ]</body>

<body package="JavascriptEngine-Runtime-Core">binaryOperatorInstanceOf	&lt;binaryOperator:  #instanceof&gt;		^ [: left : right | left instanceOf: right ]</body>

<body package="JavascriptEngine-Runtime-Core">binaryOperatorLeftShift	&lt;binaryOperator: #'&lt;&lt;'&gt;	^ [: left : right | left leftShift: right ]</body>

<body package="JavascriptEngine-Runtime-Core">binaryOperatorLessThan	&lt;binaryOperator: #'&lt;'&gt;	^ [: left : right | left lessThan: right ]</body>

<body package="JavascriptEngine-Runtime-Core">binaryOperatorLessThanOrEqual	&lt;binaryOperator:  #'&lt;='&gt;		^ [: left : right | left lessThanOrEqual: right ]</body>

<body package="JavascriptEngine-Runtime-Core">binaryOperatorLogicalAnd	&lt;binaryOperator: #'&amp;&amp;'&gt;		^ #logicalAndLeft:right:</body>

<body package="JavascriptEngine-Runtime-Core">binaryOperatorLogicalOr	&lt;binaryOperator: #'||'&gt;		^ #logicalOrLeft:right:</body>

<body package="JavascriptEngine-Runtime-Core">binaryOperatorModulo	&lt;binaryOperator: #'%'&gt;		^ [: left : right | left modulo: right ]</body>

<body package="JavascriptEngine-Runtime-Core">binaryOperatorMultiply	&lt;binaryOperator: #'*'&gt;		^ [: left : right | left multiply: right ]</body>

<body package="JavascriptEngine-Runtime-Core">binaryOperatorNotEqual	&lt;binaryOperator: #'!='&gt;		^ [: left : right | ( left equals: right ) not ]</body>

<body package="JavascriptEngine-Runtime-Core">binaryOperatorNotStrictEqual	&lt;binaryOperator: #'!=='&gt;		^ [: left : right | ( left strictEquals: right ) not ]</body>

<body package="JavascriptEngine-Runtime-Core">binaryOperatorSignedRightShift	&lt;binaryOperator: #'&gt;&gt;'&gt;	^ [: left : right | left signedRightShift: right ]</body>

<body package="JavascriptEngine-Runtime-Core">binaryOperatorStrictEquals	&lt;binaryOperator: #'==='&gt;	^ [: left : right | left strictEquals: right ]</body>

<body package="JavascriptEngine-Runtime-Core">binaryOperatorSubtract	&lt;binaryOperator: #'-'&gt;		^ [: left : right | left subtract: right ]</body>

<body package="JavascriptEngine-Runtime-Core">binaryOperatorUnsignedRightShift	&lt;binaryOperator: #'&gt;&gt;&gt;'&gt;	^ [: left : right | left unsignedRightShift: right ]</body>

<body package="JavascriptEngine-Runtime-Core">postfixOperatorDecrement	&lt;postfixOperator: #'--'&gt;	^ [: operand | operand postfixOperatorAdd: -1 ]</body>

<body package="JavascriptEngine-Runtime-Core">postfixOperatorIncrement	&lt;postfixOperator: #'++'&gt;	^ [: operand | operand postfixOperatorAdd: 1 ]</body>

<body package="JavascriptEngine-Runtime-Core">prefixOperatorDecrement	&lt;prefixOperator: #'--'&gt;	^ [: operand | operand prefixOperatorAdd: -1 ]</body>

<body package="JavascriptEngine-Runtime-Core">prefixOperatorIncrement	&lt;prefixOperator: #'++'&gt;	^ [: operand | operand prefixOperatorAdd: 1 ]</body>

<body package="JavascriptEngine-Runtime-Core">unaryOperatorBitwiseNot	&lt;unaryOperator: #'~'&gt;	^ [: operand | operand getValue bitwiseNot ]</body>

<body package="JavascriptEngine-Runtime-Core">unaryOperatorDelete	&lt;unaryOperator: #delete&gt;	^ [: operand | operand delete ]</body>

<body package="JavascriptEngine-Runtime-Core">unaryOperatorLogicalNot	&lt;unaryOperator: #'!'&gt;	^ [: operand | operand getValue logicalNot ]</body>

<body package="JavascriptEngine-Runtime-Core">unaryOperatorMinus	&lt;unaryOperator: #'-'&gt;	^ [: operand | operand getValue toNumber negated ]</body>

<body package="JavascriptEngine-Runtime-Core">unaryOperatorPlus	&lt;unaryOperator: #'+'&gt;	^ [: operand | operand getValue toNumber ]</body>

<body package="JavascriptEngine-Runtime-Core">unaryOperatorTypeof	&lt;unaryOperator: #typeof&gt;	^ [: operand | operand typeOf ]</body>

<body package="JavascriptEngine-Runtime-Core">unaryOperatorVoid	&lt;unaryOperator: #void&gt;		^ [: operand |		operand getValue.		JSEUndefined singleton	]</body>
</methods>

<methods>
<class-id>JSE.JSERuntimeBuilderVisitor class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">operatorPragma	&lt;pragmas: #instance&gt;	^ #(		binaryOperator:		unaryOperator:		prefixOperator:		postfixOperator:		assignmentOperator:	)</body>
</methods>

<methods>
<class-id>Core.Object</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">asJSEObject	JSE.JSETypeError raiseSignal: ('Cannot represent native object of class "&lt;1s&gt;" in Javascript' expandMacrosWith: self class fullName)</body>
</methods>

<methods>
<class-id>Core.Object</class-id> <category>printing</category>

<body package="JavascriptEngine-Runtime-Core">jseDisplayString	^ self displayString</body>
</methods>

<methods>
<class-id>Core.Object</class-id> <category>testing</category>

<body package="JavascriptEngine-Runtime-Core">jseIsBlockClosure	^ false</body>
</methods>

<methods>
<class-id>Core.String</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">asJSEObject	^ JSEString value: self</body>

<body package="JavascriptEngine-Runtime-Core">asJSEPropertyName	^ ( self notEmpty and: [ self allSatisfy: [: char | char isDigit ]]) 		ifTrue: [ JSEPlatform parseIntegerFrom: self readStream ]		ifFalse: [ self asSymbol ]</body>

<body package="JavascriptEngine-Runtime-Core">asJSEPropertyNameObject	^ self asJSEObject</body>

<body package="JavascriptEngine-Runtime-Core">asJSEPropertyNameString	^ self asString</body>

<body package="JavascriptEngine-Runtime-Core">jseAsStringValue	" returns a valid internal value for JSEString "	^ self</body>
</methods>

<methods>
<class-id>Core.String</class-id> <category>printing</category>

<body package="JavascriptEngine-Runtime-Core">jseDisplayString	^ self</body>
</methods>

<methods>
<class-id>Core.String</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">jseType	^ JSEString</body>
</methods>

<methods>
<class-id>Core.Collection</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">asJSEObject	| arrayElements |	arrayElements := OrderedCollection new: self size.	self do: [ : each | arrayElements add: each asJSEObject ].	^ JSE.JSEArray withElements: arrayElements</body>
</methods>

<methods>
<class-id>Core.False</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">asJSEObject	^ JSEFalse singleton</body>
</methods>

<methods>
<class-id>Core.Character</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">asJSEObject	^ (String with: self) asJSEObject</body>

<body package="JavascriptEngine-Runtime-Core">jseAlphaNumValueWithRadix: radix 	| codePoint |	codePoint := self codePoint.	" digit "	( codePoint &gt;= 48 and: [ codePoint &lt;= ( 57 min: 47 + radix )]) 		ifTrue: [ ^ codePoint - 48 ].	radix &gt; 10 		ifTrue: 		[	" alpha "			( codePoint &gt;= 97 and: [ codePoint &lt;= ( 122 min: 96 + radix - 10 )]) 				ifTrue: [ ^ codePoint - 87 ].			( codePoint &gt;= 65 and: [ codePoint &lt;= ( 90 min: 64 + radix - 10 )]) 				ifTrue: [ ^ codePoint - 55 ]		].	^ nil</body>
</methods>

<methods>
<class-id>Core.Integer</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">asJSEPropertyName	^ self</body>
</methods>

<methods>
<class-id>Core.Symbol</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">asJSEObject	^ self asString asJSEObject</body>

<body package="JavascriptEngine-Runtime-Core">asJSEPropertyName	^  self</body>
</methods>

<methods>
<class-id>Core.Timestamp</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">asJSEObject	| date |	date := JSEDate value: self asTimestampForUTC jseAsInternalMillisecondValue.	^ date toObject</body>
</methods>

<methods>
<class-id>Core.Number</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">asJSEObject	^ JSENumber value: self</body>

<body package="JavascriptEngine-Runtime-Core">asJSEPropertyName	^ self = self asInteger 		ifTrue: 		[	" integers are used as internal property names, instead of creating a symbol "			self		]		ifFalse: [( JSENumber toStringValue: self ) asJSEPropertyName ]</body>

<body package="JavascriptEngine-Runtime-Core">asJSEPropertyNameObject	^ JSENumberString number: self</body>

<body package="JavascriptEngine-Runtime-Core">asJSEPropertyNameString	^ self displayString</body>

<body package="JavascriptEngine-Runtime-Core">jseAsNumberValue	" returns a valid internal value for JSENumber "	^ self</body>

<body package="JavascriptEngine-Runtime-Core">jseType	^ JSENumber</body>
</methods>

<methods>
<class-id>Core.Dictionary</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">asJSEObject	| object |	object := JSE.JSEObject constructNewObjectIn: JSECurrentExecutionEnvironment value.	self keysAndValuesDo: [: key : value | 		key isCharacters ifFalse: [ JSE.JSETypeError raiseSignal: 'Dictionary keys must be strings for Javascript conversion' ].		object put: key value: value asJSEObject throw: true 	].	^ object</body>
</methods>

<methods>
<class-id>Core.UndefinedObject</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">asJSEObject	^ JSEUndefined singleton</body>

<body package="JavascriptEngine-Runtime-Core">jseType	^ JSEUndefined</body>
</methods>

<methods>
<class-id>Core.Boolean</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">jseType	^ JSEBoolean</body>
</methods>

<methods>
<class-id>Core.True</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">asJSEObject	^ JSETrue singleton</body>
</methods>

<methods>
<class-id>Core.CharacterArray</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">asJSEObject	^ self asString asJSEObject</body>
</methods>

<methods>
<class-id>JSE.JSERangeError class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'Represents a RangeError of the ECMA specification'</body>

<body package="JavascriptEngine-Runtime-Core">objectName	^ #RangeError</body>
</methods>

<methods>
<class-id>JSE.JSEObjectRegistry</class-id> <category>initialize-release</category>

<body package="JavascriptEngine-Runtime-Core">initialize	idToObjectReference := Dictionary new.	objectToReference := Dictionary new.</body>
</methods>

<methods>
<class-id>JSE.JSEObjectRegistry</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">registerObject: anObject	| refId ref |	refId := idToObjectReference size + 1.	ref := JSEObjectReference object: anObject.	ref id: refId.	idToObjectReference at: refId put: ref.	objectToReference at: anObject put: ref.	^ ref</body>
</methods>

<methods>
<class-id>JSE.JSEObjectRegistry</class-id> <category>registry</category>

<body package="JavascriptEngine-Runtime-Core">==&gt; anObject 	" returns the id of the object "	^ anObject notNil 		ifTrue: [( self referenceTo: anObject ) id ]		ifFalse: [ nil ]</body>

<body package="JavascriptEngine-Runtime-Core">referenceTo: anObject	^ objectToReference at: anObject ifAbsent: [ self registerObject: anObject ]</body>

<body package="JavascriptEngine-Runtime-Core">referenceWithID: anId	^ idToObjectReference at: anId ifAbsent: [ nil ]</body>
</methods>

<methods>
<class-id>JSE.JSEObjectRegistry class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">new	^ super new initialize</body>
</methods>

<methods>
<class-id>JSE.JSEBinding</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">deletable	^ deletable ifNil: [ false ]</body>

<body package="JavascriptEngine-Runtime-Core">deletable: aDeletable 	deletable := aDeletable.</body>

<body package="JavascriptEngine-Runtime-Core">identifier	^ identifier</body>

<body package="JavascriptEngine-Runtime-Core">identifier: aIdentifier 	identifier := aIdentifier.</body>

<body package="JavascriptEngine-Runtime-Core">immutable	^ immutable ifNil: [ false ]</body>

<body package="JavascriptEngine-Runtime-Core">immutable: aImmutable 	immutable := aImmutable.</body>

<body package="JavascriptEngine-Runtime-Core">value	" allow lazy evaluation "	value jseIsBlockClosure		ifTrue: [ value := value value ].	^ value</body>

<body package="JavascriptEngine-Runtime-Core">value: aValue 	value := aValue.</body>
</methods>

<methods>
<class-id>JSE.JSEBinding class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">identifier: aIdentifier 	^ self new identifier: aIdentifier;		yourself</body>
</methods>

<methods>
<class-id>JSE.JSEThrowError</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">asJSEObjectIn: anExecutionEnvironment	" return the thrown object "	^ self parameter</body>
</methods>

<methods>
<class-id>JSE.JSEThrowError class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'Raised when an unhandled throw statement is evaluated'</body>
</methods>

<methods>
<class-id>JSE.JSEReferenceError class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'Represents a ReferenceError of the ECMA specification'</body>

<body package="JavascriptEngine-Runtime-Core">objectName	^ #ReferenceError</body>
</methods>

<methods>
<class-id>JSE.JSEAbstractCodeSection</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">, anotherCodeBlock	" combine the code blocks "	^ JSECodeSequence codeSections: self codeSections, anotherCodeBlock codeSections</body>

<body package="JavascriptEngine-Runtime-Core">codeSections	^ OrderedCollection with: self</body>

<body package="JavascriptEngine-Runtime-Core">lineNumberInterval	^ nil</body>

<body package="JavascriptEngine-Runtime-Core">node	^ nil</body>
</methods>

<methods>
<class-id>JSE.JSEAbstractCodeSection</class-id> <category>testing</category>

<body package="JavascriptEngine-Runtime-Core">isUndefinedSection	^ false</body>
</methods>

<methods>
<class-id>JSE.JSEAbstractCodeSection</class-id> <category>evaluating</category>

<body package="JavascriptEngine-Runtime-Core">executeIn: anExecutionContext 	" Execute the code within the context "	self subclassResponsibility.</body>

<body package="JavascriptEngine-Runtime-Core">getValueIn: anExecutionContext 	" Execute the code within the context. Resolves the result with getValue "	^ ( self executeIn: anExecutionContext ) getValue</body>
</methods>

<methods>
<class-id>JSE.JSEURIError class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'Represents a URIError of the ECMA specification'</body>

<body package="JavascriptEngine-Runtime-Core">objectName	^ #URIError</body>
</methods>

<methods>
<class-id>JSE.JSELexicalEnvironment</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">environmentRecord	^ environmentRecord</body>

<body package="JavascriptEngine-Runtime-Core">environmentRecord: aEnvironmentRecord 	environmentRecord := aEnvironmentRecord.</body>

<body package="JavascriptEngine-Runtime-Core">outerEnvironment	^ outerEnvironment</body>

<body package="JavascriptEngine-Runtime-Core">outerEnvironment: aOuterEnvironment 	outerEnvironment := aOuterEnvironment.</body>
</methods>

<methods>
<class-id>JSE.JSELexicalEnvironment</class-id> <category>environment</category>

<body package="JavascriptEngine-Runtime-Core">getIdentifierReference: identifier strict: strict 	^ ( self environmentRecord getIdentifierReference: identifier strict: strict ) ifNil: 		[	self outerEnvironment notNil 				ifTrue: [ self outerEnvironment getIdentifierReference: identifier strict: strict ]				ifFalse: [ JSEReference base: JSEUndefined singleton name: identifier strict: strict ]		]</body>

<body package="JavascriptEngine-Runtime-Core">newDeclarativeEnvironment	^ self class on: JSEDeclarativeEnvironmentRecord new outerEnvironment: self</body>

<body package="JavascriptEngine-Runtime-Core">newObjectEnvironmentProvideThis: aProvideThis bindingObject: aBindingObject 	^ self class on: (JSEObjectEnvironmentRecord provideThis: aProvideThis  bindingObject: aBindingObject ) outerEnvironment: self</body>
</methods>

<methods>
<class-id>JSE.JSELexicalEnvironment</class-id> <category>testing</category>

<body package="JavascriptEngine-Runtime-Core">hasOwnBinding: identifier	^ self environmentRecord hasBinding: identifier</body>
</methods>

<methods>
<class-id>JSE.JSELexicalEnvironment class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">on: aEnvironmentRecord outerEnvironment: outerEnvironment 	^ self new environmentRecord: aEnvironmentRecord;		outerEnvironment: outerEnvironment;		yourself</body>
</methods>

<methods>
<class-id>JSE.JSENotification</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">sourceInterval	^ sourceInterval</body>

<body package="JavascriptEngine-Runtime-Core">sourceInterval: anInterval 	sourceInterval := anInterval.</body>

<body package="JavascriptEngine-Runtime-Core">sourceString	^ sourceString</body>

<body package="JavascriptEngine-Runtime-Core">sourceString: aSourceString 	sourceString := aSourceString.</body>
</methods>

<methods>
<class-id>JSE.JSERuntimeBuilder</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">addCodeSection: aCodeSection	self codeSections last add: aCodeSection</body>

<body package="JavascriptEngine-Runtime-Core">addSelector: aSelector node: aNode arguments: someArguments 	| codeSection |	codeSection := JSENodeCodeSection selector: aSelector arguments: someArguments.	codeSection node: aNode.	nodeCodeSections at: aNode put: codeSection.	self addCodeSection: codeSection.</body>

<body package="JavascriptEngine-Runtime-Core">combineCodeSections: codeSections 	^ codeSections size = 1 		ifTrue: [ codeSections first ]		ifFalse: [ JSECodeSequence codeSections: codeSections ]</body>

<body package="JavascriptEngine-Runtime-Core">currentCode	^  self codeStack last</body>

<body package="JavascriptEngine-Runtime-Core">endCode	| code block blocks |	code := self codeStack removeLast.	blocks := self endCodeSections.	block := self combineCodeSections: blocks.	code codeSection: block.	^ code</body>

<body package="JavascriptEngine-Runtime-Core">endCodeSections	" return all recorded code sections "	^ self codeSections removeLast</body>

<body package="JavascriptEngine-Runtime-Core">nodeCodeSections	^ nodeCodeSections</body>

<body package="JavascriptEngine-Runtime-Core">startCode: aCompiledCode	self codeStack addLast: aCompiledCode.	self startCodeSections.</body>

<body package="JavascriptEngine-Runtime-Core">startCodeSections	" start recording code sections "	self codeSections addLast: OrderedCollection new.</body>
</methods>

<methods>
<class-id>JSE.JSERuntimeBuilder</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">codeSections	codeBlocks isNil ifTrue: [ codeBlocks := OrderedCollection new ].	^ codeBlocks</body>

<body package="JavascriptEngine-Runtime-Core">codeStack	codeStack isNil ifTrue: [ codeStack := OrderedCollection new ].	^ codeStack</body>
</methods>

<methods>
<class-id>JSE.JSERuntimeBuilder</class-id> <category>initialize-release</category>

<body package="JavascriptEngine-Runtime-Core">initialize	nodeCodeSections := Dictionary new.</body>
</methods>

<methods>
<class-id>JSE.JSERuntimeBuilder class</class-id> <category>compiling</category>

<body package="JavascriptEngine-Runtime-Core">compileSource: aJavascriptSourceString 	| syntaxTree |	syntaxTree := self parse: aJavascriptSourceString.	^ JSERuntimeBuilderVisitor new visit: syntaxTree</body>

<body package="JavascriptEngine-Runtime-Core">parse: aJavascriptSourceString 	| syntaxTree parser | 	parser := JSEParser new.	parser factory: JSESyntaxTreeFactory new.	syntaxTree := parser parse: aJavascriptSourceString.	syntaxTree validate.	^ syntaxTree</body>
</methods>

<methods>
<class-id>JSE.JSERuntimeBuilder class</class-id> <category>convenience</category>

<body package="JavascriptEngine-Runtime-Core">compileAndRun: aJavascriptSourceString 	| code |	code := self compileSource: aJavascriptSourceString.	^ code run</body>
</methods>

<methods>
<class-id>JSE.JSERuntimeBuilder class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">new	^ super new initialize</body>
</methods>

<methods>
<class-id>JSE.JSERDebuggerArtefact</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">id	^ id</body>

<body package="JavascriptEngine-Runtime-Core">id: aId 	id := aId.</body>
</methods>

<methods>
<class-id>JSE.JSERDebuggerArtefact class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">new	^ super new initialize</body>
</methods>

<methods>
<class-id>JSE.JSERuntimeImplementation</class-id> <category>statements and expressions</category>

<body package="JavascriptEngine-Runtime-Core">arrayLiteralArrayBlocks: arrayBlocks padBefore: padBefore padAfter: padAfter 	" 11.1.4 Array Initialiser "	| array |	array := arrayBlocks collect: 			[: arrayBlock |				arrayBlock notNil 					ifTrue: [ arrayBlock getValueIn: executionContext ]					ifFalse: [ nil ]			].	^ JSEArray withElements: array padBefore: padBefore padAfter: padAfter</body>

<body package="JavascriptEngine-Runtime-Core">assignmentLeftHandBlockBlock: leftHandBlockBlock assignedBlock: assignedBlock assignmentBlock: assignmentBlock 	" 11.13 Assignment Operators "	| reference assignedValue |	reference := leftHandBlockBlock executeIn: executionContext.	assignedValue := assignedBlock getValueIn: executionContext.	^ assignmentBlock value: reference value: assignedValue</body>

<body package="JavascriptEngine-Runtime-Core">binaryOperatorLeftBlock: leftBlock rightBlock: rightBlock operatorBlock: operatorBlock 	" 11.5 and following chapters "	| leftValue rightValue |	leftValue := leftBlock getValueIn: executionContext.	rightValue := rightBlock getValueIn: executionContext.	^ ( operatorBlock value: leftValue value: rightValue ) asJSEObject</body>

<body package="JavascriptEngine-Runtime-Core">bracketMemberBaseBlock: baseBlock propertyNameBlock: propertyNameBlock isStrict: isStrict 	" 11.2.1 Property Accessors "	| baseValue propertyName |	baseValue := baseBlock getValueIn: executionContext.	propertyName := propertyNameBlock getValueIn: executionContext.	baseValue checkObjectCoercible.	^ JSEReference base: baseValue name: propertyName asPropertyName strict: isStrict</body>

<body package="JavascriptEngine-Runtime-Core">break: target 	" 12.8 The break Statement "	^ executionContext completion: #break value: nil target: target</body>

<body package="JavascriptEngine-Runtime-Core">catchThrownValue: thrownValue catchBlock: catchBlock catchIdentifier: catchIdentifier 	" 12.14 The try Statement "	| oldEnvironment newEnvironment binding |	oldEnvironment := executionContext lexicalEnvironment.	newEnvironment := oldEnvironment newDeclarativeEnvironment.	binding := newEnvironment environmentRecord createBinding: catchIdentifier.	binding value: thrownValue.	^ [	executionContext lexicalEnvironment: newEnvironment.		catchBlock executeIn: executionContext	] ensure: [ executionContext lexicalEnvironment: oldEnvironment ]</body>

<body package="JavascriptEngine-Runtime-Core">commaSeparatedExpressionsLeftBlock: leftBlock rightBlock: rightBlock 	" 11.14 Comma Operator ( , ) "	leftBlock getValueIn: executionContext.	^ rightBlock getValueIn: executionContext</body>

<body package="JavascriptEngine-Runtime-Core">conditional: conditionBlockOrNil updateBlockOrNil: updateBlockOrNil statementBlock: statementBlock initialiserBlockOrNil: initialiserBlockOrNil 	" 12.6.3 The for Statement		for (initialiser/declaration;expression;expression) statement "	| value currentLabel |	initialiserBlockOrNil notNil 		ifTrue: [ initialiserBlockOrNil executeIn: executionContext ].	currentLabel := executionContext currentLabel.	executionContext noLabelWhile: 		[	value := JSEUndefined singleton.			[					[	conditionBlockOrNil isNil 						or: [( conditionBlockOrNil getValueIn: executionContext ) toBooleanValue ]				] whileTrue: 					[							[ value := statementBlock executeIn: executionContext ] 							on: JSECompletion							do: [: completion | completion handleIterationContinueInLabel: currentLabel ].						updateBlockOrNil notNil 							ifTrue: 							[	executionContext noLabelWhile: [ updateBlockOrNil getValueIn: executionContext ]							]					]			] on: JSECompletion do: [: completion | completion handleIterationBreak ]		].	^ value</body>

<body package="JavascriptEngine-Runtime-Core">conditionalExpression: conditionBlock trueBlock: trueBlock falseBlock: falseBlock 	" 11.12 Conditional Operator "	| condition |	condition := conditionBlock getValueIn: executionContext.	^ condition toBooleanValue 		ifTrue: [ trueBlock getValueIn: executionContext ]		ifFalse: [ falseBlock getValueIn: executionContext ]</body>

<body package="JavascriptEngine-Runtime-Core">continue: target 	" 12.7 The continue Statement "	^ executionContext completion: #continue value: nil target: target</body>

<body package="JavascriptEngine-Runtime-Core">debuggerSourceInterval: sourceInterval lineNumber: lineNumber 	" 12.15 The debugger statement "	executionContext executionEnvironment debugEnvironment 		ifNotNil: [: debugEnvironment | debugEnvironment triggerDebuggerIn: executionContext at: lineNumber ].	^ JSEUndefined singleton</body>

<body package="JavascriptEngine-Runtime-Core">doWhile: statementBlock conditionBlock: conditionBlock 	" 12.6.1 The do-while Statement "	| value currentLabel |	value := JSEUndefined singleton.	currentLabel := executionContext currentLabel.	executionContext executionEnvironment increaseStepDepthWhile: 		[	executionContext noLabelWhile: 				[						[							[								[ value := statementBlock executeIn: executionContext ] on: JSECompletion do: [: completion | completion handleIterationContinueInLabel: currentLabel ].							( conditionBlock getValueIn: executionContext ) toBooleanValue						] whileTrue					] on: JSECompletion do: [: completion | completion handleIterationBreak ]				]		].	^ value</body>

<body package="JavascriptEngine-Runtime-Core">dotMember: baseBlock propertyName: propertyName isStrict: isStrict 	" 11.2.1 Property Accessors "	| baseValue |	baseValue := baseBlock getValueIn: executionContext.	baseValue checkObjectCoercible.	^ JSEReference base: baseValue name: propertyName strict: isStrict</body>

<body package="JavascriptEngine-Runtime-Core">enumerate: enumeratedBlock statementBlock: statementBlock enumerableBlock: enumerableBlock strict: strict 	" 12.6.4 The for-in Statement		for (enumerable in object) statement "	^ self 		enumeratBlock: enumeratedBlock		statementBlock: statementBlock		referenceBlock: [ enumerableBlock executeIn: executionContext ]		strict: strict</body>

<body package="JavascriptEngine-Runtime-Core">enumerate: enumeratedBlock statementBlock: statementBlock variableDeclarationBlock: variableDeclarationBlock strict: strict 	" 12.6.4 The for-in Statement		for (enumerable in object) statement "	| identifier |	identifier := ( variableDeclarationBlock getValueIn: executionContext ) toStringValue 			asJSEPropertyName.	^ self 		enumeratBlock: enumeratedBlock		statementBlock: statementBlock		referenceBlock: 		[	executionContext lexicalEnvironment getIdentifierReference: identifier strict: strict		]		strict: strict</body>

<body package="JavascriptEngine-Runtime-Core">expressionStatement: expressionBlock 	" 12.4 Expression Statement  "	^ expressionBlock getValueIn: executionContext</body>

<body package="JavascriptEngine-Runtime-Core">functionCall: memberBlock argumentListBlocks: argumentListBlocks strict: strict 	" 11.2.3 Function Calls "	| function memberReferenceOrValue arguments thisValue executionEnvironment |	memberReferenceOrValue := memberBlock executeIn: executionContext.	function := memberReferenceOrValue getValue.	arguments := argumentListBlocks collect: [: block | block getValueIn: executionContext ].	thisValue := memberReferenceOrValue getFunctionCallThisValue.	function checkIsCallableMember: memberReferenceOrValue thisValue: thisValue.	executionEnvironment := executionContext executionEnvironment.	^ function 		callWithThis: thisValue		arguments: arguments		executionEnvironment: executionEnvironment		callerIsStrict: strict		isDirectEvalCall: memberReferenceOrValue isDirectEvalCall</body>

<body package="JavascriptEngine-Runtime-Core">functionExpression: function strict: strict 	" 13 Function Definition "	^ function 		createFunctionObjectInEnvironment: executionContext lexicalEnvironment		executionContext: executionContext		strict: strict</body>

<body package="JavascriptEngine-Runtime-Core">getPropertyAssignment: propertyName function: function strict: strict 	" 11.1.5 Object Initialiser "	| functionObject |	functionObject := function 			createFunctionObjectInEnvironment: executionContext lexicalEnvironment			executionContext: executionContext			strict: strict.	^ JSEAccessorProperty name: propertyName getFunction: functionObject</body>

<body package="JavascriptEngine-Runtime-Core">if: conditionBlock trueBlock: trueBlock falseBlock: falseBlockOrNil 	" 12.5 The if Statement "	| condition |	condition := conditionBlock getValueIn: executionContext.	^ condition toBooleanValue 		ifTrue: [ trueBlock executeIn: executionContext ]		ifFalse: 		[	falseBlockOrNil notNil 				ifTrue: [ falseBlockOrNil executeIn: executionContext ]				ifFalse: [ JSEUndefined singleton ]		]</body>

<body package="JavascriptEngine-Runtime-Core">labelledStatement: statementBlock label: label 	" 12.12 Labelled Statements "	^ executionContext 		label: label		while: 		[				[ statementBlock executeIn: executionContext ] 				on: JSECompletion				do: [: completion | completion handleForStatementLabelled: label ]		]</body>

<body package="JavascriptEngine-Runtime-Core">logicalAndLeft: leftSide right: rightSide 	" 11.11 Binary Logical Operators "	| leftValue |	leftValue := leftSide getValueIn: executionContext.	^ leftValue toBooleanValue 		ifTrue: [ rightSide getValueIn: executionContext ]		ifFalse: [ leftValue ]</body>

<body package="JavascriptEngine-Runtime-Core">logicalOrLeft: leftSide right: rightSide 	" 11.11 Binary Logical Operators "	| leftValue |	leftValue := leftSide getValueIn: executionContext.	^ leftValue toBooleanValue 		ifTrue: [ leftValue ]		ifFalse: [ rightSide getValueIn: executionContext ]</body>

<body package="JavascriptEngine-Runtime-Core">new: memberBlock argumentListBlocks: argumentListBlocksOrNil 	" 11.2.2 The new Operator "	| constructor arguments |	constructor := memberBlock getValueIn: executionContext.	arguments := argumentListBlocksOrNil notNil 			ifTrue: 			[	argumentListBlocksOrNil collect: [: block | block getValueIn: executionContext ]			]			ifFalse: [ #( )].	constructor isConstructor 		ifFalse: 		[	JSETypeError 				raiseSignal: ( '"&lt;1s&gt;" is not a constructor' expandMacrosWith: constructor displayString )		].	^ constructor constructWithArguments: arguments</body>

<body package="JavascriptEngine-Runtime-Core">objectLiteral: propertyAssignmentBlocks strict: strict 	" 11.1.5 Object Initialiser "	| object previous |	object := ( JSEObject getPrototypeIn: executionContext executionEnvironment ) constructNewObject.	executionContext executionEnvironment increaseStepDepthWhile: 		[	propertyAssignmentBlocks do: 				[: assignmentBlock | | property |					property := assignmentBlock executeIn: executionContext.					previous := object getOwnPropertyOrNil: property name.					( previous isNil or: 						[	previous canBeOverwrittenInObjectInitialiserBy: property strict: strict						]) 						ifFalse: 						[	JSESyntaxError 								raiseSignal: ( 'Cannot overwrite property "&lt;1s&gt;"' expandMacrosWith: property name )						].					object defineOwnProperty: property throw: false				]		].	^ object</body>

<body package="JavascriptEngine-Runtime-Core">postfixOperator: expressionBlock operatorBlock: operatorBlock 	" 11.3 Postfix Expressions "	| operand |	operand := expressionBlock executeIn: executionContext.	^ ( operatorBlock value: operand ) asJSEObject</body>

<body package="JavascriptEngine-Runtime-Core">prefixOperator: expressionBlock operatorBlock: operatorBlock 	" 11.4 Unary Operators "	| operand |	operand := expressionBlock executeIn: executionContext.	^ ( operatorBlock value: operand ) asJSEObject</body>

<body package="JavascriptEngine-Runtime-Core">propertyAssignment: propertyName assignmentBlock: assignmentBlock 	" 11.1.5 Object Initialiser "	| propertyValue |	propertyValue := assignmentBlock getValueIn: executionContext.	^ JSEDataProperty 		name: propertyName		value: propertyValue		isWritable: true		isEnumerable: true		isConfigurable: true</body>

<body package="JavascriptEngine-Runtime-Core">regExpLiteral: string flags: flags 	" 7.8.5 Regular Expression Literals	Create a RegExp object from the literal "	| proto regExpObject |	proto := JSERegExpObject getPrototypeIn: executionContext executionEnvironment.	regExpObject := proto constructNewObject.	regExpObject 		initializeWithPattern: string		flags: flags		mustEscapeStrings: false		executionContext: executionContext.	^ regExpObject</body>

<body package="JavascriptEngine-Runtime-Core">resolution: identifier isStrict: isStrict 	" see 10.3.1 Identifier Resolution "	^ executionContext lexicalEnvironment getIdentifierReference: identifier strict: isStrict</body>

<body package="JavascriptEngine-Runtime-Core">return: returnBlock 	" 12.9 The return Statement "	| returnedValue |	returnedValue := returnBlock executeIn: executionContext.	^ executionContext return: returnedValue</body>

<body package="JavascriptEngine-Runtime-Core">returnUndefined	" 12.9 The return Statement "	^ executionContext return: JSEUndefined singleton</body>

<body package="JavascriptEngine-Runtime-Core">setPropertyAssignment: propertyName function: function strict: strict 	" 11.1.5 Object Initialiser "	| functionObject |	functionObject := function 			createFunctionObjectInEnvironment: executionContext lexicalEnvironment			executionContext: executionContext			strict: strict.	^ JSEAccessorProperty name: propertyName setFunction: functionObject</body>

<body package="JavascriptEngine-Runtime-Core">smalltalkFunctionBlock: executionBlock parameterSymbols: parameterSymbols strict: strict 	" Evaluate the Smalltalk block "	| arguments result |	arguments := executionContext 			getArguments: parameterSymbols			addExecutionContext: false			strict: strict.	result := executionBlock cull: arguments cull: executionContext.	^ result asJSEObject</body>

<body package="JavascriptEngine-Runtime-Core">smalltalkFunctionPrototype: prototype selector: selector parameterSymbols: parameterSymbols strict: strict 	" Evaluate the prototype method, with the object bound to 'this' as receiver "	| arguments result |	arguments := executionContext 			getArguments: parameterSymbols			addExecutionContext: selector numArgs &gt; parameterSymbols size			strict: strict.	result := prototype 			thisOfSameTypeFrom: executionContext			do: [: receiver | receiver perform: selector withArguments: arguments ].	^ result asJSEObject</body>

<body package="JavascriptEngine-Runtime-Core">smalltalkFunctionReceiver: receiver selector: selector parameterSymbols: parameterSymbols strict: strict 	" Evaluate the method of the receiver "	| arguments result |	arguments := executionContext 			getArguments: parameterSymbols			addExecutionContext: selector numArgs &gt; parameterSymbols size			strict: strict.	result := receiver perform: selector withArguments: arguments.	^ result asJSEObject</body>

<body package="JavascriptEngine-Runtime-Core">switch: switchBlock clausesAndStatementBlocks: clausesAndStatementBlocks 	" 12.11 The switch Statement "	| switchValue value matches defaultIndex |	switchValue := switchBlock getValueIn: executionContext.	value := JSEUndefined singleton.	executionContext noLabelWhile: 		[	matches := false.			defaultIndex := nil.			[	clausesAndStatementBlocks keysAndValuesDo: 					[: i : clauseAndStatementBlock | | clauseValue clauseBlock |						clauseBlock := clauseAndStatementBlock key.						matches 							ifFalse: 							[	matches := clauseBlock notNil 										ifTrue: 										[	clauseValue := clauseBlock getValueIn: executionContext.											switchValue strictEqualsValue: clauseValue										]										ifFalse: 										[	" Default clause. "											defaultIndex := i.											false										]							].						matches 							ifTrue: 							[	value := clauseAndStatementBlock value executeIn: executionContext							]					].				" evaluate default and all following statements "				( matches not and: [ defaultIndex notNil ]) 					ifTrue: 					[	defaultIndex to: clausesAndStatementBlocks size							do: 							[: i | ( clausesAndStatementBlocks at: i ) value executeIn: executionContext							]					]			] on: JSECompletion do: [: completion | completion handleForSwitch ]		].	^ value</body>

<body package="JavascriptEngine-Runtime-Core">this	" 11.1.1 The this Keyword "	^ executionContext thisValue</body>

<body package="JavascriptEngine-Runtime-Core">throw: throwBlock 	" 12.13 The throw Statement "	| thrown |	thrown := throwBlock getValueIn: executionContext.	^ executionContext completion: #throw value: thrown target: nil</body>

<body package="JavascriptEngine-Runtime-Core">try: tryBlock catchBlock: catchBlock identifier: catchIdentifier finallyBlock: finallyBlock 	" 12.14 The try Statement "	| value thrownValue thrown |	thrown := false.	value :=		[				[ tryBlock executeIn: executionContext ] 				on: JSECompletion				do: 				[: completion |					completion type = #throw 						ifTrue: 						[	thrown := true.							thrownValue := completion value						]						ifFalse: 						[	finallyBlock notNil 								ifTrue: [ finallyBlock executeIn: executionContext ].							completion pass						]				]		] 			on: JSEError			do: 			[: ex |				thrown := true.				thrownValue := ex asJSEObjectIn: executionContext executionEnvironment			].	( thrown and: [ catchBlock notNil ]) 		ifTrue: 		[				[	value := self catchThrownValue: thrownValue catchBlock: catchBlock catchIdentifier: catchIdentifier			] 				on: JSECompletion				do: 				[: completion |					finallyBlock notNil 						ifTrue: [ finallyBlock executeIn: executionContext ].					completion pass				]		].	finallyBlock notNil 		ifTrue: [ finallyBlock executeIn: executionContext ].	^ ( thrown and: [ catchBlock isNil ]) 		ifTrue: [ executionContext completion: #throw value: thrownValue target: nil ]		ifFalse: [ value ]</body>

<body package="JavascriptEngine-Runtime-Core">unaryOperator: expressionBlock operatorBlock: operatorBlock 	" 11.4 Unary Operators "	| operand |	operand := expressionBlock executeIn: executionContext.	^ ( operatorBlock value: operand ) asJSEObject</body>

<body package="JavascriptEngine-Runtime-Core">variableDeclaration: identifierString identifierBlock: identifierBlock initializerBlock: initializerBlock 	" 12.2 Variable Statement "	| reference initialValueOrReference |	initializerBlock notNil 		ifTrue: 		[	reference := identifierBlock executeIn: executionContext.			initialValueOrReference := initializerBlock getValueIn: executionContext.			reference assign: initialValueOrReference		].	^ identifierString</body>

<body package="JavascriptEngine-Runtime-Core">while: statementBlock conditionBlock: conditionBlock 	" 12.6.2 The while Statement "	| value currentLabel |	value := JSEUndefined singleton.	currentLabel := executionContext currentLabel.	executionContext executionEnvironment increaseStepDepthWhile: 		[				[					[( conditionBlock getValueIn: executionContext ) toBooleanValue ] whileTrue: 					[							[ value := statementBlock executeIn: executionContext ] on: JSECompletion do: [: completion | completion handleIterationContinueInLabel: currentLabel ]					]			] on: JSECompletion do: [: completion | completion handleIterationBreak ]		].	^ value</body>

<body package="JavascriptEngine-Runtime-Core">with: expressionBlock statementBlock: statementBlock 	" 12.10 The with Statement "	| withObject oldEnvironment newEnvironment |	withObject := ( expressionBlock getValueIn: executionContext ) toObject.	oldEnvironment := executionContext lexicalEnvironment.	newEnvironment := oldEnvironment newObjectEnvironmentProvideThis: true bindingObject: withObject.	^ [	executionContext lexicalEnvironment: newEnvironment.		[ statementBlock executeIn: executionContext ] 			on: JSECompletion			do: [: completion | completion handleForWith ]	] ensure: [ executionContext lexicalEnvironment: oldEnvironment ]</body>
</methods>

<methods>
<class-id>JSE.JSERuntimeImplementation</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">executionContext	^ executionContext</body>

<body package="JavascriptEngine-Runtime-Core">executionContext: aExecutionContext 	executionContext := aExecutionContext.</body>
</methods>

<methods>
<class-id>JSE.JSERuntimeImplementation</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">enumeratBlock: enumeratedBlock statementBlock: statementBlock referenceBlock: referenceBlock strict: strict 	" 12.6.4 The for-in Statement "	| objectValue object value currentLabel |	currentLabel := executionContext currentLabel.	executionContext executionEnvironment increaseStepDepthWhile: 		[	executionContext noLabelWhile: 				[	objectValue := enumeratedBlock getValueIn: executionContext.					value := JSEUndefined singleton.					( objectValue isJSENull or: [ objectValue isUndefined ]) 						ifFalse: 						[	object := objectValue toObject.							[	object enumerablePropertyNamesDo: 									[: propertyName | | reference | 										[	reference := referenceBlock value.											reference putValue: propertyName asJSEPropertyNameObject.											value := statementBlock executeIn: executionContext										] 											on: JSECompletion											do: 											[: completion |												completion handleIterationContinueInLabel: currentLabel											]									]							] on: JSECompletion do: [: completion | completion handleIterationBreak ]						]				]		].	^ value</body>
</methods>

<methods>
<class-id>JSE.JSEJsonObjectFactory</class-id> <category>factory</category>

<body package="JavascriptEngine-Runtime-Core">createArrayWithElements: aList	^ JSEArray withElements: aList</body>

<body package="JavascriptEngine-Runtime-Core">createLiteral: aLiteralValue 	^ aLiteralValue notNil 		ifTrue: [ aLiteralValue asJSEObject ]		ifFalse: [ JSENull singleton ]</body>

<body package="JavascriptEngine-Runtime-Core">createMember: aName value: aValue	^ aName -&gt; aValue</body>

<body package="JavascriptEngine-Runtime-Core">createObjectWithMembers: aListOfMembers	" see 15.12.2 parse ( text [ , reviver ] ) "	| object |	object := JSEObject new.	aListOfMembers do: [ : member |		object put: member key value: member value throw: false	].	^ object</body>
</methods>

<methods>
<class-id>JSE.JSEExecutionContext</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">code	^ code</body>

<body package="JavascriptEngine-Runtime-Core">code: aCode 	code := aCode.</body>

<body package="JavascriptEngine-Runtime-Core">currentCodeSection	^ currentCodeSection</body>

<body package="JavascriptEngine-Runtime-Core">currentCodeSection: aCurrentCodeSection 	currentCodeSection := aCurrentCodeSection.</body>

<body package="JavascriptEngine-Runtime-Core">executionEnvironment	^ executionEnvironment</body>

<body package="JavascriptEngine-Runtime-Core">executionEnvironment: aExecutionEnvironment 	executionEnvironment := aExecutionEnvironment.</body>

<body package="JavascriptEngine-Runtime-Core">function	" optional "	^ nil</body>

<body package="JavascriptEngine-Runtime-Core">globalCode	^ self code globalCode</body>

<body package="JavascriptEngine-Runtime-Core">lexicalEnvironment	^ lexicalEnvironment</body>

<body package="JavascriptEngine-Runtime-Core">lexicalEnvironment: aLexicalEnvironment 	lexicalEnvironment := aLexicalEnvironment.</body>

<body package="JavascriptEngine-Runtime-Core">lineNumber	^ self node notNil 		ifTrue: [ self node lineNumber ]		ifFalse: [ nil ]</body>

<body package="JavascriptEngine-Runtime-Core">node	^ self currentCodeSection ifNotNil: [: section | section node ]</body>

<body package="JavascriptEngine-Runtime-Core">script	" returns the associated JSEScript "	^ self code notNil 		ifTrue: [ self code script ]		ifFalse: [ nil ]</body>

<body package="JavascriptEngine-Runtime-Core">sourceInformation	| sourceInformation node |	sourceInformation := (node := self node) notNil 			ifTrue: [ node sourceInformation ]			ifFalse: [ nil ].	^ sourceInformation ifNil: 		[	self code notNil 				ifTrue: [ self code script ifNotNil: [: script | script sourceInformation ]]				ifFalse: [ nil ]		]</body>

<body package="JavascriptEngine-Runtime-Core">sourceInterval	| node |	^ (node := self node) notNil 		ifTrue: [ node sourceInterval ]		ifFalse: [ nil ]</body>

<body package="JavascriptEngine-Runtime-Core">sourceString	^ self node notNil 		ifTrue: [ self node sourceString ]		ifFalse: [ nil ]</body>

<body package="JavascriptEngine-Runtime-Core">thisBinding	^ thisBinding</body>

<body package="JavascriptEngine-Runtime-Core">thisBinding: aThisBinding 	thisBinding := aThisBinding.</body>

<body package="JavascriptEngine-Runtime-Core">thisValue	" return the value of 'this' "	^ self thisBinding getValue</body>

<body package="JavascriptEngine-Runtime-Core">variableEnvironment	^ variableEnvironment</body>

<body package="JavascriptEngine-Runtime-Core">variableEnvironment: aVariableEnvironment 	variableEnvironment := aVariableEnvironment.</body>
</methods>

<methods>
<class-id>JSE.JSEExecutionContext</class-id> <category>execution</category>

<body package="JavascriptEngine-Runtime-Core">addSourceInformationToException: exception 	exception sourceInterval isNil 		ifTrue: [ exception sourceInterval: self sourceInterval ].	exception sourceInformation isNil 		ifTrue: [ exception sourceInformation: self sourceInformation ].</body>

<body package="JavascriptEngine-Runtime-Core">completion: typeSymbol value: value target: targetIdentifier	" see 8.9 The Completion Specification Type.	Only required for abrupt completions (type is not #normal) "	^ JSECompletion signalType: typeSymbol value: value target: targetIdentifier</body>

<body package="JavascriptEngine-Runtime-Core">eval: aSourceString isDirect: isDirect isString: isStrict 	" compile &amp; evaluate in this context "	| parser syntaxTree builder evalCode |	parser := self executionEnvironment evalParser.	parser factory: JSESyntaxTreeFactory new.	isStrict 		ifTrue: [ parser isInStrictMode: true ].	[ | validation sourceInfo evalLocation |		sourceInfo := self sourceInformation copy.		evalLocation := sourceInfo location ifNotNil: [ : location | 'eval script in ', location ] ifNil: [ 'eval script' ].		self lineNumber ifNotNil: [ : lineNumber | evalLocation := evalLocation , ' (generated @ ', lineNumber displayString, ')' ].		sourceInfo location: evalLocation. 		syntaxTree := parser parse: aSourceString sourceInformation: sourceInfo.		validation := JSESyntaxValidationVisitor new.		validation isInStrictMode: isStrict.		validation visit: syntaxTree	] on: JSEError do: [: ex | JSESyntaxError raiseSignal: ex description ].	builder := JSERuntimeBuilderVisitor new.	builder codeClass: JSEEvalCode.	isStrict 		ifTrue: [ builder isInStrictMode: true ].	evalCode := builder visit: syntaxTree.	evalCode parentCode: self code.	^ evalCode evalDirect: isDirect executionContext: self</body>

<body package="JavascriptEngine-Runtime-Core">getArguments: parameterSymbols addExecutionContext: addExecutionContext strict: strict 	" Resolve the function arguments. Include this context as the last argument if desired "	| arguments length |	length := parameterSymbols size.	addExecutionContext 		ifTrue: [ length := length + 1 ].	arguments := Array new: length.	1 to: parameterSymbols size		do: [: i | arguments at: i put: ( self lexicalEnvironment getIdentifierReference: ( parameterSymbols at: i ) strict: strict ) getValue ].	addExecutionContext 		ifTrue: [ arguments at: length put: self ].	^ arguments</body>

<body package="JavascriptEngine-Runtime-Core">return: anObjectOrReference	" return from the context with the value of the object/reference "	^ self completion: #return value: anObjectOrReference getValue target: nil</body>
</methods>

<methods>
<class-id>JSE.JSEExecutionContext</class-id> <category>debugger</category>

<body package="JavascriptEngine-Runtime-Core">canDebug	^ true</body>
</methods>

<methods>
<class-id>JSE.JSEExecutionContext</class-id> <category>labels</category>

<body package="JavascriptEngine-Runtime-Core">currentLabel	^ (labelStack notNil and: [ labelStack notEmpty  ])		ifTrue: [ labelStack last ]		ifFalse: [ nil ]</body>

<body package="JavascriptEngine-Runtime-Core">label: aLabel while: aBlock 	labelStack isNil 		ifTrue: [ labelStack := OrderedCollection new ].	labelStack add: aLabel.	^ aBlock ensure: [ labelStack removeLast ]</body>

<body package="JavascriptEngine-Runtime-Core">noLabelWhile: aBlock 	^ ( labelStack notNil and: [ labelStack notEmpty and: [ labelStack last notNil ]]) 		ifTrue: [ self label: nil while: aBlock ]		ifFalse: [ aBlock value ]</body>
</methods>

<methods>
<class-id>JSE.JSEExecutionContext</class-id> <category>printing</category>

<body package="JavascriptEngine-Runtime-Core">displayString	| s |	s := (self sourceInformation ifNotNil: [: sourceInformation | sourceInformation location ]) ifNil: [ 'anonymous context' ].	self lineNumber ifNotNil: [: lineNumber | s := s , ' @ ' , lineNumber printString ].	^ s</body>

<body package="JavascriptEngine-Runtime-Core">printErrorStackOn: aStream	aStream nextPutAll: self displayString.</body>
</methods>

<methods>
<class-id>JSE.JSEExecutionContext</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">implementation	^ implementation</body>
</methods>

<methods>
<class-id>JSE.JSEExecutionContext</class-id> <category>initialize-release</category>

<body package="JavascriptEngine-Runtime-Core">initialize	implementation := JSERuntimeImplementation new.	implementation executionContext: self.</body>
</methods>

<methods>
<class-id>JSE.JSEExecutionContext class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">new	^ super new initialize</body>

<body package="JavascriptEngine-Runtime-Core">thisBinding: aThisBinding lexicalEnvironment: aLexicalEnvironment variableEnvironment: aVariableEnvironment 	^ self new		thisBinding: aThisBinding asJSEObject;		lexicalEnvironment: aLexicalEnvironment;		variableEnvironment: aVariableEnvironment;		yourself</body>
</methods>

<methods>
<class-id>JSE.JSEAbstractObject</class-id> <category>comparing</category>

<body package="JavascriptEngine-Runtime-Core">equals: anotherObject	" see 11.9.3 The Abstract Equality Comparison Algorithm "	^ self typeOfSymbol = anotherObject typeOfSymbol		ifTrue: [ self equalsObjectOfSameType: anotherObject ]		ifFalse: [ self equalsObjectOfDifferentType: anotherObject ]</body>

<body package="JavascriptEngine-Runtime-Core">greaterThan: anotherObject	" 11.8.2 The Greater-than Operator ( &gt; ) "	| comparison |	comparison := anotherObject compare: self leftFirst: false.	^  JSEBoolean value: (comparison ifNil: [ false ])</body>

<body package="JavascriptEngine-Runtime-Core">greaterThanOrEqual: anotherObject	" 11.8.4 The Greater-than-or-equal Operator ( &gt;= ) "	| comparison |	comparison := self compare: anotherObject leftFirst: true.	^  JSEBoolean value: (comparison == false )</body>

<body package="JavascriptEngine-Runtime-Core">lessThan: anotherObject	" 11.8.1 The Less-than Operator ( &lt; ) "	| comparison |	comparison := self compare: anotherObject leftFirst: true.	^  JSEBoolean value: (comparison ifNil: [ false ])</body>

<body package="JavascriptEngine-Runtime-Core">lessThanOrEqual: anotherObject	" 11.8.3 The Less-than-or-equal Operator ( &lt;= ) "	| comparison |	comparison := anotherObject compare: self leftFirst: false.	^  JSEBoolean value: (comparison == false )</body>

<body package="JavascriptEngine-Runtime-Core">strictEquals: anotherObject	" see The Strict Equality Comparison Algorithm "	^ (self strictEqualsValue: anotherObject) asJSEObject</body>

<body package="JavascriptEngine-Runtime-Core">strictEqualsValue: anotherObject 	" see The Strict Equality Comparison Algorithm.	returns a Boolean "	^ self typeOfSymbol = anotherObject typeOfSymbol 		ifTrue: [ self strictEqualsObjectOfSameType: anotherObject ]		ifFalse: [ false ]</body>
</methods>

<methods>
<class-id>JSE.JSEAbstractObject</class-id> <category>operators - private</category>

<body package="JavascriptEngine-Runtime-Core">checkIsValidForPreOrPostfixOperator	" 11.4.4 Prefix Increment Operator / 11.4.5 Prefix Decrement Operator "	JSETypeError raiseSignal: ('Prefix/postfix operator cannot be applied to objects')</body>

<body package="JavascriptEngine-Runtime-Core">delete: aName strict: isStrict 	" delete the binding. returns a boolean "	^ self delete: aName throw: isStrict</body>

<body package="JavascriptEngine-Runtime-Core">raisePrePostfixOperatorError	JSEReferenceError raiseSignal: 'Prefix/postfix operator cannot be applied to objects, only to references'.</body>
</methods>

<methods>
<class-id>JSE.JSEAbstractObject</class-id> <category>internal - testing</category>

<body package="JavascriptEngine-Runtime-Core">checkIsCallableMember: memberReferenceOrValue thisValue: thisValue 	| thisString memberString |	self isCallable 		ifFalse: 		[	thisString := thisValue classString.			memberString := memberReferenceOrValue displayString.			self isUndefined 				ifTrue: 				[	JSETypeError raiseSignal: ( 'Function "&lt;1s&gt;" is not defined for "&lt;2s&gt;"' expandMacrosWith: memberString with: thisString )				]				ifFalse: 				[	JSETypeError 						raiseSignal: ( 'Member "&lt;1s&gt;" (&lt;2s&gt;) is not a function of "&lt;3s&gt;"' expandMacrosWith: memberString with: self typeOfSymbol with: thisString )				]		].</body>

<body package="JavascriptEngine-Runtime-Core">isArray	^ false</body>

<body package="JavascriptEngine-Runtime-Core">isCallable	^ false</body>

<body package="JavascriptEngine-Runtime-Core">isConstructor	^ false</body>

<body package="JavascriptEngine-Runtime-Core">isDefined	^ self isUndefined not</body>

<body package="JavascriptEngine-Runtime-Core">isJSEBoolean	^ false</body>

<body package="JavascriptEngine-Runtime-Core">isJSENull	^ false</body>

<body package="JavascriptEngine-Runtime-Core">isJSENumber	^ false</body>

<body package="JavascriptEngine-Runtime-Core">isJSEString	^ false</body>

<body package="JavascriptEngine-Runtime-Core">isObject	^ false</body>

<body package="JavascriptEngine-Runtime-Core">isPrimitive	^ false</body>

<body package="JavascriptEngine-Runtime-Core">isPrimitiveBase	" used by references "	^ self isPrimitive</body>

<body package="JavascriptEngine-Runtime-Core">isProperty	^ false</body>

<body package="JavascriptEngine-Runtime-Core">isPropertyReferenceValue	" used by references "	^ self isPrimitiveBase</body>

<body package="JavascriptEngine-Runtime-Core">isReference	^ false</body>

<body package="JavascriptEngine-Runtime-Core">isRegExp	^ false</body>

<body package="JavascriptEngine-Runtime-Core">isUndefined	^ false</body>
</methods>

<methods>
<class-id>JSE.JSEAbstractObject</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">asPropertyName	^  self toStringValue asJSEPropertyName</body>

<body package="JavascriptEngine-Runtime-Core">checkImplementationClass: aJSEClass 	( self isKindOf: aJSEClass ) 		ifFalse: 		[	JSETypeError 				raiseSignal: ( 'Expected argument of kind "&lt;1s&gt;", got "&lt;2s&gt;"' expandMacrosWith: aJSEClass qualifiedObjectName with: self typeDisplayString )		].</body>

<body package="JavascriptEngine-Runtime-Core">checkOverwriteDataProperty: ownProperty value: value throw: throw 	^ ownProperty checkOverwriteValue: value throw: throw</body>

<body package="JavascriptEngine-Runtime-Core">checkTypeIsObject	self isObject 		ifFalse: [ JSETypeError raiseSignal: ( 'Expected argument of type "object", got "&lt;1s&gt;"' expandMacrosWith: self typeOfSymbol )].</body>

<body package="JavascriptEngine-Runtime-Core">convertToNativeObjectWith: aConversionRegistry	"Returns a native Smalltalk object.	The conversion registry  avoids infinity loops when converting cycles.	See #toNativeObjectWith: "	self raiseCannotConvertToNativeObject.</body>

<body package="JavascriptEngine-Runtime-Core">getNamespace: aNamespacePath	| namespaceObject |	namespaceObject := self.	aNamespacePath do: [ : propertyName |		namespaceObject := namespaceObject get: propertyName .		namespaceObject isUndefined ifTrue: [ JSEError raiseSignal: ('Namespace "&lt;1s&gt;" not found' expandMacrosWith: propertyName) ].	].	^ namespaceObject</body>

<body package="JavascriptEngine-Runtime-Core">getOwnPropertyOrNil: propertyName 	^ nil</body>

<body package="JavascriptEngine-Runtime-Core">getPropertyOrNil: propertyName 	| ownProperty |	ownProperty := self getOwnPropertyOrNil: propertyName.	^ ownProperty notNil 		ifTrue: [ ownProperty ]		ifFalse: [ self getPrototypePropertyOrNil: propertyName ]</body>

<body package="JavascriptEngine-Runtime-Core">getPrototypePropertyOrNil: propertyName 	| myProto |	myProto := self internalPrototype .	^ (myProto isUndefined or: [ myProto isJSENull ])		ifTrue: [ nil ]		ifFalse: [ myProto getPropertyOrNil: propertyName ]</body>

<body package="JavascriptEngine-Runtime-Core">hasConstructedFlag	" is this object currently constructed "	^ false</body>

<body package="JavascriptEngine-Runtime-Core">initializeAsConstructedObject	" initialize this object created with the 'new' expression "</body>

<body package="JavascriptEngine-Runtime-Core">internalClassSymbol	" A symbol for objects represented by this class.	Usually equivalent to [[class]] "	^ self class internalClassSymbol</body>

<body package="JavascriptEngine-Runtime-Core">null	^ JSENull singleton</body>

<body package="JavascriptEngine-Runtime-Core">overwriteDataProperty: ownProperty value: value throw: throw 	" Optimized: do not create a temporary property "	^ ( self checkOverwriteDataProperty: ownProperty value: value throw: throw ) 		ifTrue: 		[	ownProperty value: value.			true		]		ifFalse: [ false ]</body>

<body package="JavascriptEngine-Runtime-Core">primitiveValueDo: primitiveBlock orElse: elseBlock	^ elseBlock value</body>

<body package="JavascriptEngine-Runtime-Core">raiseCannotConvertToNativeObject	JSETypeError raiseSignal: ( 'Cannot convert &lt;1s&gt; to a native host object' expandMacrosWith: self typeDisplayString ).</body>

<body package="JavascriptEngine-Runtime-Core">raiseFunctionOnlyAvailableFor: typeString 	| function message |	function := JSECurrentExecutionEnvironment value currentExecutionContext function.	message := function notNil 			ifTrue: [ 'Function "&lt;1s&gt;()" is not generic and only supports &lt;2s&gt; objects' expandMacrosWith: function identifier with: typeString ]			ifFalse: [ 'Function is not generic and only supports &lt;1s&gt; objects' expandMacrosWith: typeString ].	JSETypeError raiseSignal: message.</body>

<body package="JavascriptEngine-Runtime-Core">raiseFunctionOnlyAvailableForThisType	self raiseFunctionOnlyAvailableFor: self objectName</body>

<body package="JavascriptEngine-Runtime-Core">raiseUncaughtError	JSEThrowError raiseSignal: self toErrorMessageString with: self.</body>

<body package="JavascriptEngine-Runtime-Core">resetConstructedFlag	" see setConstructedFlag "</body>

<body package="JavascriptEngine-Runtime-Core">setConstructedFlag	 " flag the object as being constructed "</body>

<body package="JavascriptEngine-Runtime-Core">sliceElements: elements length: length from: start to: end 	| relativeStartIndex relativeEndIndex startIndex endIndex |	relativeStartIndex := start toIntegerValue.	relativeEndIndex := end isUndefined 			ifTrue: [ length ]			ifFalse: [ end toIntegerValue ].	startIndex := relativeStartIndex &lt; 0 			ifTrue: [ length + relativeStartIndex max: 0 ]			ifFalse: [ relativeStartIndex min: length ].	startIndex := startIndex + 1.	endIndex := relativeEndIndex &lt; 0 			ifTrue: [ length + relativeEndIndex max: 0 ]			ifFalse: [ relativeEndIndex min: length ].	^ startIndex &lt;= endIndex 		ifTrue: [ elements copyFrom: startIndex to: endIndex ]		ifFalse: [ elements species new ]</body>

<body package="JavascriptEngine-Runtime-Core">thisOfSameTypeFrom: executionContext do: thisBlock	" Evaluate thisBlock with the object bound to this, but only if it is of the same type as self.	Raises an exception (TypeError) otherwise	Utility method for implementing prototype functions "	^ self thisOfSameTypeFrom: executionContext do: thisBlock orElse: [ self raiseFunctionOnlyAvailableForThisType ]</body>

<body package="JavascriptEngine-Runtime-Core">thisOfSameTypeFrom: executionContext do: thisBlock orElse: elseBlock 	" Evaluate thisBlock with the object bound to this, but only if it is of the same type as self.	Otherwise evaluate elseBlock with this as optional argument.	Utility method for implementing prototype functions "	| thisObject |	thisObject := executionContext thisValue.	" unwrap primitive value "	^ thisObject 		primitiveValueDo: 		[: primitiveObject |			primitiveObject internalClassSymbol  = self internalClassSymbol 				ifTrue: [ thisBlock value: primitiveObject ]				ifFalse: [ elseBlock cull: thisObject ]		]		orElse: [ 			(thisObject internalClassSymbol = self internalClassSymbol or: [ thisObject isInstanceOfPrototype: self ])				ifTrue: [ thisBlock value: thisObject ]				ifFalse: [ elseBlock cull: thisObject ]		]</body>

<body package="JavascriptEngine-Runtime-Core">toErrorMessageString	^ self printString</body>

<body package="JavascriptEngine-Runtime-Core">toNativeObjectWith: aConversionRegistry	" Hook for cycle checking "	^ self convertToNativeObjectWith: aConversionRegistry</body>

<body package="JavascriptEngine-Runtime-Core">toSignedIntegerValueModulo: modulo 	^ self toNumberValue jseToSignedIntegerValueModulo: modulo</body>

<body package="JavascriptEngine-Runtime-Core">toUnsignedIntegerValueModulo: modulo 	^ self toNumberValue jseToUnsignedIntegerValueModulo: modulo</body>

<body package="JavascriptEngine-Runtime-Core">uncheckedAddProperty: newProperty</body>

<body package="JavascriptEngine-Runtime-Core">uncheckedDeleteProperty: propertyName 	" delete the property without asking any questions - just do it ;) "</body>

<body package="JavascriptEngine-Runtime-Core">uncheckedPutReadOnly: propertyName value: value 	| property |	property := JSEDataProperty name: propertyName value: value isWritable: false isEnumerable: false isConfigurable: false.	self uncheckedAddProperty: property .	^ property</body>

<body package="JavascriptEngine-Runtime-Core">undefined	^ JSEUndefined singleton</body>
</methods>

<methods>
<class-id>JSE.JSEAbstractObject</class-id> <category>internal</category>

<body package="JavascriptEngine-Runtime-Core">canPut: propertyName 	| ownProperty |	ownProperty := self getOwnPropertyOrNil: propertyName.	^ self canPut: propertyName ownProperty: ownProperty</body>

<body package="JavascriptEngine-Runtime-Core">canPut: propertyName ownProperty: ownProperty	| inheritedProperty |	ownProperty notNil 		ifTrue: [ ^ ownProperty canPutValue ].	self internalPrototype isNil 		ifTrue: [ ^ self isExtensible ].	inheritedProperty := self internalPrototype getPropertyOrNil: propertyName.	^ inheritedProperty isNil 		ifTrue: [ self isExtensible ]		ifFalse: [ inheritedProperty inheritedCanPutValueIsExtensible: self isExtensible ]</body>

<body package="JavascriptEngine-Runtime-Core">classString	^ self internalClassSymbol asString</body>

<body package="JavascriptEngine-Runtime-Core">constructNewObject	" this is the prototype. create a new object "	^ self newObjectClass new initializeAsConstructedObject;		yourself</body>

<body package="JavascriptEngine-Runtime-Core">defaultValueWithPreferredType: preferredTypeHint 	" 8.12.8 [[DefaultValue]] (hint) 	preferredTypeHint is a class "	| conversionFunctions |	conversionFunctions := self primitiveConversionsForPreferredType: preferredTypeHint.	conversionFunctions do: 		[: conversionFunctionName | | conversionFunction convertedValue |			conversionFunction := self get: conversionFunctionName.			conversionFunction isCallable 				ifTrue: 				[	convertedValue := conversionFunction callWithThis: self.					convertedValue isPrimitive 						ifTrue: [ ^ convertedValue ]				]		].	JSETypeError raiseSignal: 'Cannot convert object to primitive value'.	^ self undefined</body>

<body package="JavascriptEngine-Runtime-Core">defineOwnProperty: property throw: throw 	" 8.12.9 [[DefineOwnProperty]] (P, Desc, Throw) "	| currentProperty extensible |	currentProperty := self getOwnPropertyOrNil: property name.	extensible := self isExtensible.	^ currentProperty isNil 		ifTrue: 		[	extensible 				ifTrue: 				[	self uncheckedAddProperty: property asObjectProperty.					true				]				ifFalse: 				[	throw 						ifTrue: [ self raiseNotExtensible ].					false				]		]		ifFalse: 		[( property areAllFieldsAbsent or: [ currentProperty sameFieldsAs: property ]) 				ifTrue: [ true ]				ifFalse: 				[( currentProperty checkOverwriteWith: property throw: throw ) 						ifTrue: 						[	self overwriteProperty: currentProperty with: property throw: throw.							true						]						ifFalse: [ false ]				]		]</body>

<body package="JavascriptEngine-Runtime-Core">delete: propertyName throw: throw 	| ownProperty |	ownProperty := self getOwnPropertyOrNil: propertyName.	^ ownProperty isNil 		ifTrue: [ true ]		ifFalse: 		[	ownProperty isConfigurable 				ifTrue: 				[	self uncheckedDeleteProperty: propertyName.					true				]				ifFalse: 				[	throw 						ifTrue: [ JSETypeError raiseSignal: ( 'Cannot delete property "&lt;1s&gt;"' expandMacrosWith: propertyName )].					false				]		]</body>

<body package="JavascriptEngine-Runtime-Core">enumerablePropertyNames	| names |	names := OrderedCollection new.	self enumerablePropertyNamesDo: [ : name |		names add: name	].	^ names</body>

<body package="JavascriptEngine-Runtime-Core">enumerablePropertyNamesDo: aBlock	" iterate over all names of properties which are enumerable "</body>

<body package="JavascriptEngine-Runtime-Core">get: propertyName 	^ ( self getOrNil: propertyName ) ifNil: [ self undefined ]</body>

<body package="JavascriptEngine-Runtime-Core">getOrNil: propertyName 	| property |	property := self getPropertyOrNil: propertyName.	^ property notNil 		ifTrue: [ property getPropertyValueOf: self ]		ifFalse: [ nil ]</body>

<body package="JavascriptEngine-Runtime-Core">getProperty: propertyName 	| property |	property := self getPropertyOrNil: propertyName.	^ property notNil 		ifTrue: [ property ]		ifFalse: [ self undefined ]</body>

<body package="JavascriptEngine-Runtime-Core">getValueOfDataProperty: aDataProperty	^ aDataProperty value</body>

<body package="JavascriptEngine-Runtime-Core">hasProperty: propertyName	^ (self getPropertyOrNil: propertyName) notNil</body>

<body package="JavascriptEngine-Runtime-Core">internalPrototype	" the internal prototype ([[Prototype]]) of this object "	^ self undefined</body>

<body package="JavascriptEngine-Runtime-Core">isBuiltIn	^ false</body>

<body package="JavascriptEngine-Runtime-Core">isExtensible	^ false</body>

<body package="JavascriptEngine-Runtime-Core">maxLength	^ 16rFFFFFFFF</body>

<body package="JavascriptEngine-Runtime-Core">newObjectClass	" class of new objects of this prototype "	^ self class</body>

<body package="JavascriptEngine-Runtime-Core">overwriteProperty: currentProperty with: property throw: anObject 	| newProperty |	newProperty := property combineForOverwriting: currentProperty.	self uncheckedAddProperty: newProperty.	^ newProperty</body>

<body package="JavascriptEngine-Runtime-Core">primitiveConversionsForPreferredType: preferredTypeHint 	" 8.12.8 [[DefaultValue]] (hint) .	returns selectors of conversion methods which return primitive values "	^ ( preferredTypeHint = JSEString or: [ preferredTypeHint isNil and: [ self classString = 'Date' ]]) 		ifTrue: [ #( #toString #valueOf )]		ifFalse: 		[( preferredTypeHint = JSENumber or: [ preferredTypeHint isNil ]) 				ifTrue: [ #( #valueOf #toString )]				ifFalse: [ #( )]		]</body>

<body package="JavascriptEngine-Runtime-Core">propertyNamesDo: aBlock	" iterate over all names of properties "</body>

<body package="JavascriptEngine-Runtime-Core">prototypeObjectClass	" implementation class of the prototype "	^ self class</body>

<body package="JavascriptEngine-Runtime-Core">put: propertyName value: value throw: throw 	" An optimized implementation of  8.12.5 [[Put]] ( P, V, Throw ) 	Does not call #defineOwnProperty with a new property if a property already exists.	Instead it overwrites the current property. This avoids having to create a temporary property 	"	| ownProperty property |	ownProperty := self getOwnPropertyOrNil: propertyName.	( self canPut: propertyName ownProperty: ownProperty ) 		ifFalse: 		[	throw 				ifTrue: [ JSETypeError raiseSignal: 'Cannot put property' ]				ifFalse: [ ^ self ]		].	( ownProperty notNil and: [ ownProperty isData ]) 		ifTrue: [ self overwriteDataProperty: ownProperty value: value throw: throw ]		ifFalse: 		[	property := ownProperty ifNil: [ self getPrototypePropertyOrNil: propertyName ].			( property notNil and: [ property isAccessor ]) 				ifTrue: [ property setPropertyValue: value of: self ]				ifFalse: 				[	self isExtensible 						ifTrue: [ self uncheckedPut: propertyName value: value ]						ifFalse: 						[	throw 								ifTrue: [ self raiseNotExtensible ]						]				]		].</body>

<body package="JavascriptEngine-Runtime-Core">raiseNotExtensible	JSETypeError raiseSignal: 'Object is not extensible'.</body>

<body package="JavascriptEngine-Runtime-Core">sameValueAs: anotherAbstractObject	" see 9.12 The SameValue Algorithm.	Note: this is an internal operator and thus returns a Boolean, not a JSEBoolean "	^ self = anotherAbstractObject</body>

<body package="JavascriptEngine-Runtime-Core">typeOfSymbol	^ self class typeOfSymbol</body>

<body package="JavascriptEngine-Runtime-Core">uncheckedPut: propertyName value: value 	| newProperty |	newProperty := JSEDataProperty name: propertyName value: value.	newProperty isWritable: true;		isEnumerable: true;		isConfigurable: true.	self uncheckedAddProperty: newProperty.</body>
</methods>

<methods>
<class-id>JSE.JSEAbstractObject</class-id> <category>operators</category>

<body package="JavascriptEngine-Runtime-Core">add: aJSEObject 	" 11.6.1 The Addition operator ( + ) "	| left right |	left := self toPrimitive.	right := aJSEObject toPrimitive.	^ ( left isJSEString or: [ right isJSEString ]) 		ifTrue: [( left toStringValue , right toStringValue ) asJSEObject ]		ifFalse: [ JSENumber value: left toNumberValue + right toNumberValue ]</body>

<body package="JavascriptEngine-Runtime-Core">bitwiseAnd: anotherObject 	" 11.10 Binary Bitwise Operators "	| leftNumber rightNumber |	leftNumber := self toSignedInteger32Value.	rightNumber := anotherObject toSignedInteger32Value.	^ leftNumber bitAnd: rightNumber</body>

<body package="JavascriptEngine-Runtime-Core">bitwiseNot	" 11.4.8 Bitwise NOT Operator ( ~ ) "	^ JSENumber value: (self toSignedInteger32Value negated - 1)</body>

<body package="JavascriptEngine-Runtime-Core">bitwiseOr: anotherObject 	" 11.10 Binary Bitwise Operators "	| leftNumber rightNumber |	leftNumber := self toSignedInteger32Value.	rightNumber := anotherObject toSignedInteger32Value.	^ leftNumber bitOr: rightNumber</body>

<body package="JavascriptEngine-Runtime-Core">bitwiseXor: anotherObject 	" 11.10 Binary Bitwise Operators "	| leftNumber rightNumber |	leftNumber := self toSignedInteger32Value.	rightNumber := anotherObject toSignedInteger32Value.	^ leftNumber bitXor: rightNumber</body>

<body package="JavascriptEngine-Runtime-Core">delete	" 11.4.1 The delete Operator "	^ JSETrue singleton</body>

<body package="JavascriptEngine-Runtime-Core">divide: aJSEObject	^ aJSEObject toNumber divideFromNumber: self toNumber</body>

<body package="JavascriptEngine-Runtime-Core">hasInstance: otherObject	" 11.8.6 The instanceof operator "	JSETypeError raiseSignal: ('Objects of type "&lt;1s&gt;" cannot have instances' expandMacrosWith: self class typeOfSymbol)</body>

<body package="JavascriptEngine-Runtime-Core">in: aJSEObject 	" 11.8.7 The in operator"	aJSEObject checkTypeIsObject.	^ aJSEObject hasProperty: self toStringValue asJSEPropertyName</body>

<body package="JavascriptEngine-Runtime-Core">instanceOf: otherObject	" 11.8.6 The instanceof operator "	^ (otherObject hasInstance: self) asJSEObject</body>

<body package="JavascriptEngine-Runtime-Core">leftShift: anotherObject	" 11.7.1 The Left Shift Operator ( &lt;&lt; ) "	| leftNumber rightNumber shiftCount |	leftNumber := self toSignedInteger32Value.	rightNumber := anotherObject toUnsignedInteger32Value.	shiftCount := rightNumber bitAnd: 16r1f.	^ (leftNumber bitShift: shiftCount) jseToSignedInteger32Value</body>

<body package="JavascriptEngine-Runtime-Core">logicalNot	" 11.4.9 Logical NOT Operator ( ! ) "	^ self toBooleanValue not asJSEObject</body>

<body package="JavascriptEngine-Runtime-Core">modulo: aJSEObject	^ aJSEObject toNumber moduloFromNumber: self toNumber</body>

<body package="JavascriptEngine-Runtime-Core">multiply: aJSEObject	^ aJSEObject toNumber multiplyFromNumber: self toNumber</body>

<body package="JavascriptEngine-Runtime-Core">postfixOperatorAdd: anInteger 	" 11.3 Postfix Expressions "	self raisePrePostfixOperatorError</body>

<body package="JavascriptEngine-Runtime-Core">prefixOperatorAdd: anInteger 	" 11.4.4 Prefix Increment Operator	11.4.5 Prefix Decrement Operator "	self raisePrePostfixOperatorError</body>

<body package="JavascriptEngine-Runtime-Core">signedRightShift: anotherObject	" 11.7.2 The Signed Right Shift Operator ( &gt;&gt; ) "	| leftNumber rightNumber shiftCount |	leftNumber := self toSignedInteger32Value.	rightNumber := anotherObject toUnsignedInteger32Value.	shiftCount := rightNumber bitAnd: 16r1f.	^ (leftNumber bitShift: shiftCount negated) jseToSignedInteger32Value</body>

<body package="JavascriptEngine-Runtime-Core">subtract: aJSEObject	" 11.6.2 The Subtraction Operator ( - ) "	^ JSENumber value: self toNumberValue - aJSEObject toNumberValue</body>

<body package="JavascriptEngine-Runtime-Core">typeOf	^ self typeOfSymbol asString asJSEObject</body>

<body package="JavascriptEngine-Runtime-Core">unsignedRightShift: anotherObject 	" 11.7.3 The Unsigned Right Shift Operator ( &gt;&gt;&gt; )"	| leftNumber rightNumber shiftCount |	leftNumber := self toUnsignedInteger32Value.	rightNumber := anotherObject toUnsignedInteger32Value.	shiftCount := rightNumber bitAnd: 16r1f.	^ leftNumber bitShift: shiftCount negated</body>
</methods>

<methods>
<class-id>JSE.JSEAbstractObject</class-id> <category>references</category>

<body package="JavascriptEngine-Runtime-Core">assign: aValue	self raiseNoReference.</body>

<body package="JavascriptEngine-Runtime-Core">compoundAssign: aValue with: aBlock	self raiseNoReference.</body>

<body package="JavascriptEngine-Runtime-Core">getReferenceValue: referenceName strict: strict 	^ self get: referenceName</body>

<body package="JavascriptEngine-Runtime-Core">getValue	" 8.7.1 GetValue "	^ self</body>

<body package="JavascriptEngine-Runtime-Core">isDirectEvalCall	^ false</body>

<body package="JavascriptEngine-Runtime-Core">isEnvironmentRecord	^ false</body>

<body package="JavascriptEngine-Runtime-Core">putValue: value 	self raiseNoReference.</body>

<body package="JavascriptEngine-Runtime-Core">raiseNoReference	JSEReferenceError raiseSignal: ( 'Not a reference: "&lt;1s&gt;"' expandMacrosWith: self displayString ).</body>

<body package="JavascriptEngine-Runtime-Core">setReference: referenceName value: value strict: strict 	self put: referenceName value: value throw: strict.</body>
</methods>

<methods>
<class-id>JSE.JSEAbstractObject</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">asJSEObject	^ self</body>

<body package="JavascriptEngine-Runtime-Core">checkObjectCoercible</body>

<body package="JavascriptEngine-Runtime-Core">objectToPropertyDescriptor	" 8.10.5 ToPropertyDescriptor ( Obj ) "	JSETypeError raiseSignal: 'Only objects can be converted to property descriptors'</body>

<body package="JavascriptEngine-Runtime-Core">parseFloat	^ self toString parseFloat</body>

<body package="JavascriptEngine-Runtime-Core">parseIntegerWithRadix: radix	^ self toString parseIntegerWithRadix: radix</body>

<body package="JavascriptEngine-Runtime-Core">raiseCannotConvertTo: targetString	JSETypeError raiseSignal: ('Cannot convert "&lt;1s&gt;" to &lt;2s&gt;' expandMacrosWith: self toStringValue with: targetString)</body>

<body package="JavascriptEngine-Runtime-Core">toBoolean	^ self toBooleanValue		ifTrue: [ JSETrue singleton ]		ifFalse: [ JSEFalse singleton ]</body>

<body package="JavascriptEngine-Runtime-Core">toBooleanValue	^ true</body>

<body package="JavascriptEngine-Runtime-Core">toDate	self raiseCannotConvertTo: 'a date'</body>

<body package="JavascriptEngine-Runtime-Core">toIntegerValue	| numberValue |	numberValue := self toNumberValue.	^ numberValue isNaN		ifTrue: [ 0 ]		ifFalse: [			(numberValue isZero or: [ numberValue isInfinity ])				ifTrue: [ numberValue ]				ifFalse: [ numberValue truncated ]		].</body>

<body package="JavascriptEngine-Runtime-Core">toNativeObject	"Returns a native Smalltalk object "	^ self toNativeObjectWith: Dictionary new</body>

<body package="JavascriptEngine-Runtime-Core">toNumber	^ JSENumber value: self toNumberValue</body>

<body package="JavascriptEngine-Runtime-Core">toNumberValue	self raiseCannotConvertTo: 'a number'</body>

<body package="JavascriptEngine-Runtime-Core">toObject	self raiseCannotConvertTo: 'an object'.</body>

<body package="JavascriptEngine-Runtime-Core">toPrimitive	^ self toPrimitiveWithPreferredType: nil</body>

<body package="JavascriptEngine-Runtime-Core">toPrimitiveWithPreferredType: preferredTypeHint	self raiseCannotConvertTo: 'a primitive value'</body>

<body package="JavascriptEngine-Runtime-Core">toRegExp	| executionEnvironment regexp |	executionEnvironment := JSECurrentExecutionEnvironment value.	regexp := ( JSERegExpObject getPrototypeIn: executionEnvironment ) constructNewObject.	regexp initializeWithPattern: self flags: self undefined mustEscapeStrings: true executionContext: executionEnvironment currentExecutionContext.	^ regexp</body>

<body package="JavascriptEngine-Runtime-Core">toSignedInteger32Value	^ self toSignedIntegerValueModulo: 16r100000000</body>

<body package="JavascriptEngine-Runtime-Core">toString	^ self toStringValue asJSEObject</body>

<body package="JavascriptEngine-Runtime-Core">toStringValue	self raiseCannotConvertTo: 'a string'</body>

<body package="JavascriptEngine-Runtime-Core">toStringValueOrNil	" Returns nil for undefined/null, converts toString otherwise "	^ self toStringValue</body>

<body package="JavascriptEngine-Runtime-Core">toUnsignedInteger16Value	^ self toUnsignedIntegerValueModulo: 16r10000</body>

<body package="JavascriptEngine-Runtime-Core">toUnsignedInteger32Value	^ self toUnsignedIntegerValueModulo: 16r100000000</body>
</methods>

<methods>
<class-id>JSE.JSEAbstractObject</class-id> <category>bindings</category>

<body package="JavascriptEngine-Runtime-Core">createMutableBinding: identifier deletable: deletable 	| property |	( self hasProperty: identifier ) 		ifTrue: 		[	JSEEnvironmentRecord alreadyDefined: identifier.			^ self		].	property := JSEDataProperty name: identifier.	property isWritable: true.	property isConfigurable: deletable.	property value: JSEUndefined singleton.	self defineOwnProperty: property throw: true.</body>

<body package="JavascriptEngine-Runtime-Core">functionCallThisValue	^ self isPropertyReferenceValue 		ifTrue: [  self  ]		ifFalse: [  self implicitThisValue  ]</body>

<body package="JavascriptEngine-Runtime-Core">getBindingValue: identifier strict: strict 	| property |	^ ( property := self getPropertyOrNil: identifier ) notNil 		ifTrue: [ property getPropertyValueOf: self ]		ifFalse: 		[	strict 				ifTrue: [ JSEDeclarativeEnvironmentRecord raiseUndefinedReference: identifier ].			self undefined		]</body>

<body package="JavascriptEngine-Runtime-Core">getFunctionCallThisValue	^ self undefined</body>

<body package="JavascriptEngine-Runtime-Core">hasBinding: identifier	^ self hasProperty: identifier</body>

<body package="JavascriptEngine-Runtime-Core">implicitThisValue	^ self undefined</body>

<body package="JavascriptEngine-Runtime-Core">setMutableBinding: identifier value: value strict: strict	self put: identifier value: value throw: strict</body>
</methods>

<methods>
<class-id>JSE.JSEAbstractObject</class-id> <category>comparing - private</category>

<body package="JavascriptEngine-Runtime-Core">compare: anotherObject leftFirst: leftFirst 	" See 11.8.5 The Abstract Relational Comparison Algorithm.	Returns a Boolean or nil "	| px py nx ny |	leftFirst 		ifTrue: 		[	px := self toPrimitiveWithPreferredType: JSENumber.			py := anotherObject toPrimitiveWithPreferredType: JSENumber		]		ifFalse: 		[	py := anotherObject toPrimitiveWithPreferredType: JSENumber.			px := self toPrimitiveWithPreferredType: JSENumber		].	^ ( px class = JSEString and: [ py class = JSEString ]) 		ifTrue: [ self compareStringValue: px value and: py value ]		ifFalse: 		[	nx := px toNumberValue.			ny := py toNumberValue.			self compareNumberValue: nx and: ny		]</body>

<body package="JavascriptEngine-Runtime-Core">compareNumberValue: nx and: ny	" skipped +0 / -0, not supported "	nx isNaN		ifTrue: [  ^ nil ].	ny isNaN		ifTrue: [ ^ nil ].	" not needed, VW's &lt; operator matches the specification "	"	nx = ny 		ifTrue: [ ^ false ].	nx isPositiveInfinity		ifTrue: [ ^ false ].	ny isPositiveInfinity		ifTrue: [ ^ true ].	ny isNegativeInfinity		ifTrue: [ ^ false ].	nx isNegativeInfinity		ifTrue: [ ^ true ]."	^ nx &lt; ny</body>

<body package="JavascriptEngine-Runtime-Core">compareStringValue: sx and: sy	" The ECMA specification states		 There is no attempt to use the more complex, semantically oriented definitions of character or string equality and collating order defined in the Unicode specification.		Therefore String values that are canonically equal according to the Unicode standard could test as unequal. 		In effect this algorithm assumes that both Strings are already in normalised form. 	Thus use the fast comparison method"		^  (sx trueCompare: sy) = -1</body>

<body package="JavascriptEngine-Runtime-Core">equalsObjectOfDifferentType: anotherObject	" see 11.9.3 The Abstract Equality Comparison Algorithm "	anotherObject isJSEBoolean		ifTrue: [ ^ self equals: anotherObject toNumber ].	^ false</body>

<body package="JavascriptEngine-Runtime-Core">equalsObjectOfSameType: anotherObject	" see 11.9.3 The Abstract Equality Comparison Algorithm "	^ self == anotherObject</body>

<body package="JavascriptEngine-Runtime-Core">strictEqualsObjectOfSameType: anotherObject	^ self == anotherObject</body>
</methods>

<methods>
<class-id>JSE.JSEAbstractObject</class-id> <category>prototype functions - array</category>

<body package="JavascriptEngine-Runtime-Core">arrayConcat: items 	^ self toObject arrayConcat: items</body>

<body package="JavascriptEngine-Runtime-Core">arrayEvery: callbackFunction thisArgument: thisArgument executionEnvironment: executionEnvironment 	^ self toObject arrayEvery: callbackFunction thisArgument: thisArgument executionEnvironment: executionEnvironment</body>

<body package="JavascriptEngine-Runtime-Core">arrayFilter: callbackFunction thisArgument: thisArgument executionEnvironment: executionEnvironment	^ self toObject arrayFilter: callbackFunction thisArgument: thisArgument executionEnvironment: executionEnvironment</body>

<body package="JavascriptEngine-Runtime-Core">arrayForEach: callbackFunction thisArgument: thisArgument executionEnvironment: executionEnvironment 	^ self toObject arrayForEach: callbackFunction thisArgument: thisArgument executionEnvironment: executionEnvironment</body>

<body package="JavascriptEngine-Runtime-Core">arrayIndexOf: searchElement fromIndex: fromIndex	^ self toObject arrayIndexOf: searchElement fromIndex: fromIndex</body>

<body package="JavascriptEngine-Runtime-Core">arrayJoin: separator 	^ self toObject arrayJoin: separator</body>

<body package="JavascriptEngine-Runtime-Core">arrayLastIndexOf: searchElement fromIndex: fromIndex	^ self toObject arrayLastIndexOf: searchElement fromIndex: fromIndex</body>

<body package="JavascriptEngine-Runtime-Core">arrayMap: callbackFunction thisArgument: thisArgument executionEnvironment: executionEnvironment 	^ self toObject arrayMap: callbackFunction thisArgument: thisArgument executionEnvironment: executionEnvironment</body>

<body package="JavascriptEngine-Runtime-Core">arrayPop	^ self toObject arrayPop</body>

<body package="JavascriptEngine-Runtime-Core">arrayPush: aListOfItems	^ self toObject arrayPush: aListOfItems</body>

<body package="JavascriptEngine-Runtime-Core">arrayReduce: reduceFunction initialValue: initialValue executionEnvironment: executionEnvironment reverse: reverse	^ self toObject arrayReduce: reduceFunction initialValue: initialValue executionEnvironment: executionEnvironment reverse: reverse</body>

<body package="JavascriptEngine-Runtime-Core">arrayReverse	^ self toObject arrayReverse</body>

<body package="JavascriptEngine-Runtime-Core">arrayShift	^ self toObject arrayShift</body>

<body package="JavascriptEngine-Runtime-Core">arraySliceFrom: start to: end	^ self toObject arraySliceFrom: start to: end</body>

<body package="JavascriptEngine-Runtime-Core">arraySome: callbackFunction thisArgument: thisArgument executionEnvironment: executionEnvironment 	^ self toObject arraySome: callbackFunction thisArgument: thisArgument executionEnvironment: executionEnvironment</body>

<body package="JavascriptEngine-Runtime-Core">arraySort: aSortFunction executionEnvironment: executionEnvironment	^ self toObject arraySort: aSortFunction executionEnvironment: executionEnvironment</body>

<body package="JavascriptEngine-Runtime-Core">arraySplice: start deleteCount: deleteCount items: items	^ self toObject arraySplice: start deleteCount: deleteCount items: items</body>

<body package="JavascriptEngine-Runtime-Core">arrayUnshift: items	^ self toObject arrayUnshift: items</body>
</methods>

<methods>
<class-id>JSE.JSEAbstractObject</class-id> <category>prototype functions - string</category>

<body package="JavascriptEngine-Runtime-Core">stringCharAt: position	self checkObjectCoercible.	^ self toString stringCharAt: position</body>

<body package="JavascriptEngine-Runtime-Core">stringCharCodeAt: position	self checkObjectCoercible.	^ self toString stringCharCodeAt: position</body>

<body package="JavascriptEngine-Runtime-Core">stringConcat: strings	self checkObjectCoercible.	^ self toString stringConcat: strings</body>

<body package="JavascriptEngine-Runtime-Core">stringIndexOf: searchString position: position	self checkObjectCoercible.	^ self toString stringIndexOf: searchString position: position</body>

<body package="JavascriptEngine-Runtime-Core">stringLastIndexOf: searchString position: position 	self checkObjectCoercible.	^ self toString stringLastIndexOf: searchString position: position</body>

<body package="JavascriptEngine-Runtime-Core">stringLocaleCompare: anotherObject	self checkObjectCoercible.	^ self toString stringLocaleCompare: anotherObject</body>

<body package="JavascriptEngine-Runtime-Core">stringMatch: regexp executionContext: executionContext 	self checkObjectCoercible.	^ self toString stringMatch: regexp executionContext: executionContext</body>

<body package="JavascriptEngine-Runtime-Core">stringReplace: searchValue with: replaceValue executionContext: executionContext	self checkObjectCoercible.	^ self toString stringReplace: searchValue with: replaceValue executionContext: executionContext</body>

<body package="JavascriptEngine-Runtime-Core">stringSearch: regexp executionContext: executionContext 	self checkObjectCoercible.	^ self toString stringSearch: regexp executionContext: executionContext</body>

<body package="JavascriptEngine-Runtime-Core">stringSliceFrom: start to: end 	self checkObjectCoercible.	^ self toString stringSliceFrom: start to: end</body>

<body package="JavascriptEngine-Runtime-Core">stringSplit: separator limit: limit	self checkObjectCoercible.	^ self toString stringSplit: separator limit: limit</body>

<body package="JavascriptEngine-Runtime-Core">stringSubstrFrom: start length: length	self checkObjectCoercible.	^ self toString stringSubstrFrom: start length: length</body>

<body package="JavascriptEngine-Runtime-Core">stringSubstringFrom: start to: end	self checkObjectCoercible.	^ self toString stringSubstringFrom: start to: end</body>

<body package="JavascriptEngine-Runtime-Core">stringToLocaleLowerCase	self checkObjectCoercible.	^ self toString stringToLocaleLowerCase</body>

<body package="JavascriptEngine-Runtime-Core">stringToLocaleUpperCase	self checkObjectCoercible.	^ self toString stringToLocaleUpperCase</body>

<body package="JavascriptEngine-Runtime-Core">stringToLowerCase	self checkObjectCoercible.	^ self toString stringToLowerCase</body>

<body package="JavascriptEngine-Runtime-Core">stringToUpperCase	self checkObjectCoercible.	^ self toString stringToUpperCase</body>

<body package="JavascriptEngine-Runtime-Core">stringTrim	self checkObjectCoercible.	^ self toString stringTrim</body>
</methods>

<methods>
<class-id>JSE.JSEAbstractObject</class-id> <category>internal - call</category>

<body package="JavascriptEngine-Runtime-Core">call: aFunctionName arguments: arguments executionEnvironment: executionEnvironment 	" utility for internal calls of functions "	| function thisValue |	function := self get: aFunctionName.	thisValue := self.	function checkIsCallableMember: aFunctionName thisValue: thisValue.	^ function callWithThis: thisValue arguments: arguments executionEnvironment: executionEnvironment callerIsStrict: false isDirectEvalCall: false</body>

<body package="JavascriptEngine-Runtime-Core">callWithThis: thisObject arguments: arguments executionEnvironment: executionEnvironment 	^ self callWithThis: thisObject arguments: arguments executionEnvironment: executionEnvironment callerIsStrict: false isDirectEvalCall: false</body>

<body package="JavascriptEngine-Runtime-Core">callWithThis: thisObject arguments: arguments executionEnvironment: executionEnvironment callerIsStrict: callerIsStrict isDirectEvalCall: isDirectEvalCall	self raiseCannotCall.</body>

<body package="JavascriptEngine-Runtime-Core">raiseCannotCall	JSETypeError raiseSignal: ('Only function objects can be called, object type is "&lt;1s&gt;"' expandMacrosWith: self classString).</body>
</methods>

<methods>
<class-id>JSE.JSEAbstractObject</class-id> <category>internal - JSON</category>

<body package="JavascriptEngine-Runtime-Core">asStringifyPropertyList	" Returns a property list, or nil if this is something else.	See 15.12.3 stringify ( value [ , replacer [ , space ] ] ) "	^ nil</body>

<body package="JavascriptEngine-Runtime-Core">asStringifyPropertyName	" Returns the name of a property of a property list used in JSON.stringify().	Returns nil if this is something else.	See 15.12.3 stringify ( value [ , replacer [ , space ] ] ) "	^ nil</body>

<body package="JavascriptEngine-Runtime-Core">asStringifyReplacerFunction	" Returns a replacer function, or nil if this is something else.	See 15.12.3 stringify ( value [ , replacer [ , space ] ] ) "	^ nil</body>

<body package="JavascriptEngine-Runtime-Core">asStringifySpace	" Returns the optional space string used in JSON.stringify().	Returns nil if this is something else or an empty space.	See 15.12.3 stringify ( value [ , replacer [ , space ] ] ) "	^ nil</body>

<body package="JavascriptEngine-Runtime-Core">revive: reviver executionEnvironment: executionEnvironment	" Transform the properties of a parsed JSON object.	This is not an object, so do nothing "</body>

<body package="JavascriptEngine-Runtime-Core">stringify: propertyName replacerFunction: replacerFunction propertyList: propertyList gap: gap indent: indent stack: stack executionEnvironment: executionEnvironment 	" Convert the object to a JSON string representation.	See 15.12.3 stringify ( value [ , replacer [ , space ] ] ) "	| value |	value := self get: propertyName.	^ self stringify: propertyName value: value replacerFunction: replacerFunction propertyList: propertyList gap: gap indent: indent stack: stack executionEnvironment: executionEnvironment</body>

<body package="JavascriptEngine-Runtime-Core">stringify: propertyName value: value replacerFunction: replacerFunction propertyList: propertyList gap: gap indent: indent stack: stack executionEnvironment: executionEnvironment 	" Convert the object to a JSON string representation.	See 15.12.3 stringify ( value [ , replacer [ , space ] ] ) "	| jsonValue |	jsonValue  := value toJSON: propertyName executionEnvironment: executionEnvironment.	replacerFunction notNil 		ifTrue: 		[	jsonValue  := replacerFunction 					callWithThis: self					arguments: ( Array with: propertyName asString asJSEObject with: value )					executionEnvironment: executionEnvironment		].	^ jsonValue  		stringifyReplacerFunction: replacerFunction		propertyList: propertyList		gap: gap		indent: indent		stack: stack		executionEnvironment: executionEnvironment</body>

<body package="JavascriptEngine-Runtime-Core">stringifyReplacer: replacer space: space executionEnvironment: executionEnvironment 	" stringify this object "		| stack indent spaceString wrapper replacerFunction propertyList string |	replacerFunction := replacer asStringifyReplacerFunction.	propertyList := replacer asStringifyPropertyList.	stack := OrderedCollection new.	indent := ''.	spaceString := space asStringifySpace.	wrapper := JSEObject constructNewObjectIn: executionEnvironment.	wrapper defineOwnProperty: ( JSEDataProperty name: #'' value: self isWritable: true isEnumerable: true isConfigurable: true ) throw: false.	string := wrapper 		stringify: ''		replacerFunction: replacerFunction		propertyList: propertyList		gap: spaceString		indent: indent		stack: stack		executionEnvironment: executionEnvironment.	^ string ifNil: [ self undefined ]</body>

<body package="JavascriptEngine-Runtime-Core">stringifyReplacerFunction: replacerFunction propertyList: propertyList gap: gap indent: indent stack: stack executionEnvironment: executionEnvironment 	" Convert the object to a JSON string representation "	^ nil</body>

<body package="JavascriptEngine-Runtime-Core">toJSON: propertyName executionEnvironment: executionEnvironment	" Call toJSON() if this is an object "	^ self</body>

<body package="JavascriptEngine-Runtime-Core">walk: propertyName reviver: reviver executionEnvironment: executionEnvironment 	" The abstract walk function for transforming parsed JSON objects.	See 15.12.2 parse ( text [ , reviver ] ) "	| value |	value := self getOrNil: propertyName.	value revive: reviver executionEnvironment: executionEnvironment.	^ reviver callWithThis: self arguments: ( Array with: propertyName asJSEPropertyNameObject with: value ) executionEnvironment: executionEnvironment</body>
</methods>

<methods>
<class-id>JSE.JSEAbstractObject</class-id> <category>printing</category>

<body package="JavascriptEngine-Runtime-Core">objectToStringValue	^ '[object ' , self classString , ']'</body>

<body package="JavascriptEngine-Runtime-Core">typeDisplayString	^ (self objectName ifNil: [ self typeOfSymbol  ]) asString</body>
</methods>

<methods>
<class-id>JSE.JSEAbstractObject</class-id> <category>internal - array</category>

<body package="JavascriptEngine-Runtime-Core">arrayElements	" Returns a Smalltalk array containing the elements of this array-like object.	Utilized to implement the build-in array prototype functions "	^ #()</body>

<body package="JavascriptEngine-Runtime-Core">arrayLength	" Returns the length of the array-like object "	^ 0</body>

<body package="JavascriptEngine-Runtime-Core">deleteIndex: index throw: throw	self delete: index asJSEPropertyName throw: throw</body>

<body package="JavascriptEngine-Runtime-Core">getIndex: index	^ (self getIndexOrNil: index) ifNil: [ self undefined ]</body>

<body package="JavascriptEngine-Runtime-Core">getIndexOrNil: index	^ self getOrNil: index asJSEPropertyName</body>

<body package="JavascriptEngine-Runtime-Core">indexOfPropertyName: propertyName 	" return an element index represented by propertyName, or nil "	^ (propertyName isInteger and: [ self isValidIndex: propertyName ])		ifTrue: [ propertyName ]		ifFalse: [ nil ]</body>

<body package="JavascriptEngine-Runtime-Core">isValidIndex: anInteger 	^ ( anInteger isInteger and: [ anInteger &gt;= 0 and: [ anInteger &lt; self maxLength ]])</body>

<body package="JavascriptEngine-Runtime-Core">putIndex: index value: value throw: throw 	self put: index asJSEPropertyName value: value throw: throw</body>
</methods>

<methods>
<class-id>JSE.JSEAbstractObject</class-id> <category>internal - prototype</category>

<body package="JavascriptEngine-Runtime-Core">createPrototypeObjectForGlobalObject: globalObject 	" create a prototype object for the constructor function "	| protoObject |	" must be a first class object "	protoObject := JSEBuiltInObjectPrototype new.	protoObject constructedObjectClass: self prototypeObjectClass.	protoObject initializePrototypeFromGlobalObject: globalObject .	^ protoObject</body>

<body package="JavascriptEngine-Runtime-Core">getPrototype	^ JSECurrentExecutionEnvironment value 		ifNotNil: [: executionEnvionment | self getPrototypeIn: executionEnvionment ]		ifNil: [ JSEUndefined singleton ]</body>

<body package="JavascriptEngine-Runtime-Core">getPrototypeFromGlobalObject: globalObject 	^ self class getPrototypeFromGlobalObject: globalObject</body>

<body package="JavascriptEngine-Runtime-Core">getPrototypeIn: anExecutionEnvironment	^ self class getPrototypeIn: anExecutionEnvironment</body>
</methods>

<methods>
<class-id>JSE.JSEAbstractObject</class-id> <category>functions - private</category>

<body package="JavascriptEngine-Runtime-Core">constructedObjectIn: executionContext 	" utility to handle both use cases of a constructor: either construct a new object, or called as a function "	^ self 		constructedObjectIn: executionContext		orDo: 		[	" constructor as a function  - construct a new object "			self constructNewObject		]</body>

<body package="JavascriptEngine-Runtime-Core">constructedObjectIn: executionContext orDo: aBlock	" utility to handle both use cases of a constructor: either construct a new object, or called as a function "	| constructedObject |	constructedObject := executionContext thisValue.	^ constructedObject hasConstructedFlag 		ifTrue: 		[	" constructor has created an object "			constructedObject		]		ifFalse: 		[	" constructor as a function "			aBlock value		]</body>

<body package="JavascriptEngine-Runtime-Core">constructedObjectOrErrorIn: executionContext 	" utility to handle both use cases of a constructor: either construct a new object, or called as a function "	^ self 		constructedObjectIn: executionContext		orDo: 		[	" constructor as a function "			 JSETypeError raiseSignal: 'Constructor can only be used as function' 		]</body>

<body package="JavascriptEngine-Runtime-Core">createFunctionNamed: functionName parameters: parameterSymbols length: length selector: selector sendToThis: sendToThis strict: strict environment: lexicalEnvironment prototypeObject: aPrototypeObject 	" Create and add a built-in function "	| functionDeclaration |	functionDeclaration := JSEBuiltInFunctionDeclaration 			declareFunctionNamed: functionName			parameters: parameterSymbols			length: length			receiver: self			selector: selector			sendToThis: sendToThis			strict: strict.	^ functionDeclaration 		createFunctionObjectInEnvironment: lexicalEnvironment		strict: strict		prototypeObject: aPrototypeObject		writable: false</body>

<body package="JavascriptEngine-Runtime-Core">initializeAsBuiltInObjectStrict: isStrict environment: lexicalEnvironment globalObject: globalObject 	" Register the constructor and prototype "	| protoObject |	protoObject := self createPrototypeObjectForGlobalObject: globalObject.	" Add functions of the prototype object. "	self initializeFunctionsOf: protoObject strict: isStrict environment: lexicalEnvironment pragmasNamed: #(prototypeFunction:parameters: prototypeFunction:parameters:length:).	" Add static properties "	self initializePropertiesOfPrototype: protoObject.	"  Add constructor functions "	self initializeConstructorsOf: globalObject strict: isStrict environment: lexicalEnvironment protoypeObject: protoObject.</body>

<body package="JavascriptEngine-Runtime-Core">initializeAsGlobalObjectForCode: isStrict environment: lexicalEnvironment globalObject: globalObject 	" There is no prototype or constructor, just functions of the object itself "	" Register the object "	self registerGlobalObjectIn: globalObject.	" Functions of the object "	self 		initializeFunctionsOf: self		strict: isStrict		environment: lexicalEnvironment		pragmasNamed: #( #function:parameters: #function:parameters:length: ).	" Other properties of the object "	self initializePropertiesOfBuiltInObject: self.</body>

<body package="JavascriptEngine-Runtime-Core">initializeConstructorNamed: aName namespaceObject: aNamespaceObject strict: strict environment: lexicalEnvironment prototype: aPrototypeObject selector: selector parameters: parameters length: length 	| constructor constructorProperty |	constructor := self 			createFunctionNamed: aName			parameters: parameters			length: length			selector: selector			sendToThis: false			strict: strict			environment: lexicalEnvironment			prototypeObject: aPrototypeObject.	constructor isConstructor: true.	( aNamespaceObject getOwnPropertyOrNil: aName ) 		ifNotNil: [ JSEError raiseSignal: ( 'Constructor "&lt;1s&gt;" already registered' expandMacrosWith: aName )].	aNamespaceObject uncheckedAddProperty: ( JSEDataProperty name: aName value: constructor isWritable: true isEnumerable: false isConfigurable: true ).	" add standard constructor to prototype "	( aPrototypeObject getOwnPropertyOrNil: #constructor ) isNil 		ifTrue: 		[	constructorProperty := JSEDataProperty name: #constructor value: constructor isWritable: true isEnumerable: false isConfigurable: true.			aPrototypeObject uncheckedAddProperty: constructorProperty		].	" Functions of the built-in object constructor "	self 		initializeFunctionsOf: constructor		strict: strict		environment: lexicalEnvironment		pragmasNamed: #( #function:parameters: #function:parameters:length: ).	" Other properties "	self initializePropertiesOfBuiltInObject: constructor.</body>

<body package="JavascriptEngine-Runtime-Core">initializeConstructorsAt: namespaceObject pragma: constructorPragma strict: strict environment: lexicalEnvironment protoypeObject: aPrototypeObject 	" Register a constructor "	| selector parameters length |	selector := constructorPragma selector.	parameters := constructorPragma argumentAt: 1.	length := constructorPragma numArgs &gt;= 2 			ifTrue: [ constructorPragma argumentAt: 2 ]			ifFalse: [ parameters size ].	self objectNames do: 		[: objectName |			self 				initializeConstructorNamed: objectName				namespaceObject: namespaceObject				strict: strict				environment: lexicalEnvironment				prototype: aPrototypeObject				selector: selector				parameters: parameters				length: length		].</body>

<body package="JavascriptEngine-Runtime-Core">initializeConstructorsOf: aGlobalObject strict: strict environment: lexicalEnvironment protoypeObject: aPrototypeObject 	" Register all constructors and constructor functions "	| namespaceObject hasPragmaConstructor pragmaRootClass |	namespaceObject := aGlobalObject getNamespace: self objectNamespacePath.	hasPragmaConstructor := false.	pragmaRootClass := self class pragmaRootClass.	#( #constructor: #constructor:length: ) do: 		[: pragmaName |			self class 				cachedPragmasNamed: pragmaName				upTo: pragmaRootClass				do: 				[: constructorPragma |					self 						initializeConstructorsAt: namespaceObject						pragma: constructorPragma						strict: strict						environment: lexicalEnvironment						protoypeObject: aPrototypeObject.					hasPragmaConstructor := true				]		].	hasPragmaConstructor 		ifFalse: 		[	self initializeFallbackConstructorsAt: namespaceObject strict: strict environment: lexicalEnvironment protoypeObject: aPrototypeObject		].</body>

<body package="JavascriptEngine-Runtime-Core">initializeFallbackConstructorsAt: namespaceObject strict: strict environment: lexicalEnvironment protoypeObject: aPrototypeObject 	" Only sent when a class does not define a function with a #constructor pragma "</body>

<body package="JavascriptEngine-Runtime-Core">initializeFunctionNamed: functionName parameters: parameterSymbols block: block strict: strict executionContext: globalExecutionContext 	" Create and add a built-in function "	| functionDeclaration functionObject protoObject |	functionDeclaration := JSEBuiltInFunctionDeclaration 			declareFunctionNamed: functionName			parameters: parameterSymbols			length: parameterSymbols size			block: block			strict: strict.	protoObject := JSEObject new.	protoObject prototypeName: functionName.	functionObject := functionDeclaration 			createFunctionObjectInEnvironment: globalExecutionContext lexicalEnvironment			strict: strict			prototypeObject: protoObject			writable: false.	protoObject 		uncheckedAddProperty: ( JSEDataProperty name: #constructor value: functionObject isWritable: true isEnumerable: false isConfigurable: true ).	self put: functionName value: functionObject throw: true.	^ functionObject</body>

<body package="JavascriptEngine-Runtime-Core">initializeFunctionsOf: aJSEObject strict: strict environment: lexicalEnvironment pragma: functionPragma 	" Register a function "	| selector parameters functionName functionObject length sendToThis receiver sendToPrototype |	selector := functionPragma selector.	parameters := functionPragma argumentAt: 2.	functionName := functionPragma argumentAt: 1.	length := functionPragma numArgs &gt;= 3 			ifTrue: [ functionPragma argumentAt: 3 ]			ifFalse: [ parameters size ].	( functionPragma methodClass cachedConditionsOfSelector: selector ) do: 		[: conditionSelector | ( aJSEObject perform: conditionSelector ) 				ifFalse: [ ^ self ]		].	sendToPrototype := self class cachedSendToPrototype: selector.	sendToThis := aJSEObject isPrototype and: [ sendToPrototype not ].	" the receiver is the object that actually performs the method "	receiver := sendToThis 			ifTrue: [ aJSEObject ]			ifFalse: [ self ].	functionObject := receiver 			createFunctionNamed: functionName			parameters: parameters			length: length			selector: selector			sendToThis: sendToThis			strict: strict			environment: lexicalEnvironment			prototypeObject: JSEUndefined singleton.	" add the function to the object "	aJSEObject 		uncheckedAddProperty: ( JSEDataProperty name: functionName value: functionObject isWritable: true isEnumerable: false isConfigurable: true ).</body>

<body package="JavascriptEngine-Runtime-Core">initializeFunctionsOf: aJSEObject strict: strict environment: lexicalEnvironment pragmasNamed: pragmaNames 	" Register all functions "	| pragmaRootClass |	pragmaRootClass := self class pragmaRootClass.	pragmaNames do: 		[: pragmaName |			self class 				cachedPragmasNamed: pragmaName				upTo: pragmaRootClass				do: [: pragma | self initializeFunctionsOf: aJSEObject strict: strict environment: lexicalEnvironment pragma: pragma ]		].</body>

<body package="JavascriptEngine-Runtime-Core">initializePropertiesOfBuiltInObject: anObject 	" Other properties of built-in objects "	| pragmaRootClass |	pragmaRootClass := self class pragmaRootClass.	self class 		cachedPragmasNamed: #property:		upTo: pragmaRootClass		do: [: pragma | anObject uncheckedPutReadOnly: ( pragma argumentAt: 1 ) value: ( self perform: pragma selector ) asJSEObject ].	self class 		cachedPragmasNamed: #property:readOnly:		upTo: pragmaRootClass		do: 		[: pragma | | propertyName propertyValue |			propertyValue := self perform: pragma selector.			propertyName := pragma argumentAt: 1.			( pragma argumentAt: 2 ) 				ifTrue: [ anObject uncheckedPutReadOnly: propertyName value: propertyValue asJSEObject ]				ifFalse: [ anObject uncheckedPut: propertyName value: propertyValue asJSEObject ]		].</body>

<body package="JavascriptEngine-Runtime-Core">initializePropertiesOfPrototype: aPrototypeObject 	"  Initialize properties of prototypes  "	self class 		cachedPragmasNamed: #prototypeProperty:		do: 		[: pragma |			aPrototypeObject uncheckedAddProperty: ( JSEDataProperty 						name: ( pragma argumentAt: 1 )						value: ( self perform: pragma selector ) asJSEObject						isWritable: true						isEnumerable: false						isConfigurable: false )		].</body>

<body package="JavascriptEngine-Runtime-Core">objectName	^ self class objectName</body>

<body package="JavascriptEngine-Runtime-Core">objectNames	^ self class objectNames</body>

<body package="JavascriptEngine-Runtime-Core">objectNamespacePath	^ self class objectNamespacePath</body>

<body package="JavascriptEngine-Runtime-Core">registerGlobalObjectIn: globalObject 	" Register the object "	| namespaceObject |	namespaceObject := globalObject getNamespace: self objectNamespacePath.	self class objectNames do: 		[: objectName |			namespaceObject 				uncheckedAddProperty: ( JSEDataProperty name: objectName asJSEPropertyName value: self isWritable: true isEnumerable: false isConfigurable: true )		].</body>
</methods>

<methods>
<class-id>JSE.JSEAbstractObject</class-id> <category>prototype functions - date</category>

<body package="JavascriptEngine-Runtime-Core">dateToJSON: key 	" 15.9.5.44 Date.prototype.toJSON ( key ) "	| object primitiveValue toISOStringFunction |	object := self toObject.	primitiveValue := self toPrimitiveWithPreferredType: JSENumber.	( primitiveValue isJSENumber and: [ primitiveValue isFinite not ]) 		ifTrue: [ ^ nil ].	toISOStringFunction := object get: #toISOString.	toISOStringFunction isCallable 		ifFalse: [ JSETypeError raiseSignal: 'No callable function named toISOString() defined' ].	^ toISOStringFunction callWithThis: object arguments: #( ) executionEnvironment: JSECurrentExecutionEnvironment value</body>
</methods>

<methods>
<class-id>JSE.JSEAbstractObject</class-id> <category>testing</category>

<body package="JavascriptEngine-Runtime-Core">canBeConstructed	^ true</body>
</methods>

<methods>
<class-id>JSE.JSEAbstractObject class</class-id> <category>testing</category>

<body package="JavascriptEngine-Runtime-Core">isAbstract	^ self == JSEAbstractObject</body>

<body package="JavascriptEngine-Runtime-Core">isPartOfBootstrap	^ false</body>

<body package="JavascriptEngine-Runtime-Core">shouldInitializeBuiltInObject	^ self objectName notNil and: [ self isPartOfBootstrap not ]</body>
</methods>

<methods>
<class-id>JSE.JSEAbstractObject class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">internalClassSymbol	" A unique symbol for objects represented by this class.	Usually equivalent to [[class]].	Each non-abstract object must return a non-nil class symbol "	^ self objectName ifNil: [ self name ]</body>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	" Note: Class comments are only available when the source is available "		^ self comment</body>

<body package="JavascriptEngine-Runtime-Core">objectName	" Returns the name of the object / constructor corresponding to instances of this class.	The name is relative to the namespace "	^ nil</body>

<body package="JavascriptEngine-Runtime-Core">objectNames	" Returns the names of the built-in object "	^ Set with: self objectName</body>

<body package="JavascriptEngine-Runtime-Core">objectNamespacePath	" Returns the path to the namespace object, starting at the global object "	^ #()</body>

<body package="JavascriptEngine-Runtime-Core">objectPath	" returns the full path to the object / constructor, starting at the global object "	^ self objectName ifNotNil: [ : constructorName | self objectNamespacePath copyWith: constructorName  ]</body>

<body package="JavascriptEngine-Runtime-Core">qualifiedObjectName	" Returns the qualified name starting at the global object "	| stream |	stream := String new writeStream.	self objectNamespacePath do: [: pathPart | stream nextPutAll: pathPart; nextPut: $. ].	stream nextPutAll: self objectName.	^ stream contents</body>

<body package="JavascriptEngine-Runtime-Core">typeOfSymbol	" 11.4.3 The typeof Operator "	self subclassResponsibility</body>
</methods>

<methods>
<class-id>JSE.JSEAbstractObject class</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">builtInObjectClasses	" classes of built-in objects, in initialization order "	BuiltInObjectClasses isNil 		ifTrue: [ self initializeBuiltInObjectClasses ].	^ BuiltInObjectClasses</body>

<body package="JavascriptEngine-Runtime-Core">flushCaches	"JSE.JSEAbstractObject flushCaches."		self withAllSubclasses do: [ : cl | cl flushOwnCaches ].	BuiltInObjectClasses := nil.</body>

<body package="JavascriptEngine-Runtime-Core">flushOwnCaches	cachedPragmas := nil.	cachedConditions := nil.	cachedSendToPrototype := nil.</body>

<body package="JavascriptEngine-Runtime-Core">getPrototype	" get the prototype of the corresponding built-in object (if there is one) "	^ JSECurrentExecutionEnvironment value 		ifNotNil: [: executionEnvionment | self getPrototypeIn: executionEnvionment ]		ifNil: [ JSEUndefined singleton ]</body>

<body package="JavascriptEngine-Runtime-Core">getPrototypeFromGlobalObject: globalObject 	" get the prototype of the corresponding built-in object (if there is one) "	^ self objectName 		ifNotNil: [: builtInName | globalObject getPrototypeNamed: builtInName namespace: self objectNamespacePath ]		ifNil: [ JSEUndefined singleton ]</body>

<body package="JavascriptEngine-Runtime-Core">getPrototypeIn: anExecutionEnvironment 	" get the prototype of the corresponding built-in object (if there is one) "	^ self getPrototypeFromGlobalObject: anExecutionEnvironment globalObject</body>

<body package="JavascriptEngine-Runtime-Core">getPrototypeNamed: aName namespace: aNamespacePath 	" get the prototype "	^ JSECurrentExecutionEnvironment value 		ifNotNil: [: executionEnvionment | executionEnvionment globalObject getPrototypeNamed: aName namespace: aNamespacePath]		ifNil: [ JSEUndefined singleton ]</body>

<body package="JavascriptEngine-Runtime-Core">initializationOrder	" objects with lower order are initialized before objects with higher order "	^ self objectNamespacePath size @ 0</body>

<body package="JavascriptEngine-Runtime-Core">initializeBuiltInObjectClasses	" classes of built-in objects, in initialization order "	| initializationOrder builtInObjectClasses |	builtInObjectClasses := JSEAbstractObject allSubclasses select: [: each | each shouldInitializeBuiltInObject ].	initializationOrder := Dictionary new: builtInObjectClasses size.	builtInObjectClasses do: [: each | initializationOrder at: each put: each initializationOrder ].	builtInObjectClasses := builtInObjectClasses 			asSortedCollection: [: class1 : class2 | ( initializationOrder at: class1 ) &lt;= ( initializationOrder at: class2 )].	^  BuiltInObjectClasses := builtInObjectClasses.</body>

<body package="JavascriptEngine-Runtime-Core">pragmaRootClass	" Returns the root class for collecting pragmas.	By default, only pragmas defined by the class itself will be considered "	^ self</body>
</methods>

<methods>
<class-id>JSE.JSEAbstractObject class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">constructNewObjectIn: executionEnvironment 	" construct a new object of the prototype "	^ ( self getPrototypeIn: executionEnvironment ) constructNewObject</body>
</methods>

<methods>
<class-id>JSE.JSEAbstractObject class</class-id> <category>compiling</category>

<body package="JavascriptEngine-Runtime-Core">classMethodsChanged	super classMethodsChanged.	self flushCaches.</body>

<body package="JavascriptEngine-Runtime-Core">instanceMethodsChanged	super instanceMethodsChanged.	self flushCaches.</body>
</methods>

<methods>
<class-id>JSE.JSEAbstractObject class</class-id> <category>pragmas - private</category>

<body package="JavascriptEngine-Runtime-Core">cachedConditionsOfSelector: aSymbol 	" condition selectors  "	cachedConditions isNil 		ifTrue: 		[	cachedConditions := Dictionary new.			self 				cachedPragmasNamed: #condition:				do: [: conditionPragma | ( cachedConditions at: conditionPragma selector ifAbsentPut: [ OrderedCollection new ]) add: ( conditionPragma argumentAt: 1 )]		].	^ cachedConditions at: aSymbol ifAbsent: [ #( )]</body>

<body package="JavascriptEngine-Runtime-Core">cachedPragmasNamed: aSymbol do: aBlock	self cachedPragmasNamed: aSymbol upTo: self pragmaRootClass do: aBlock</body>

<body package="JavascriptEngine-Runtime-Core">cachedPragmasNamed: aSymbol upTo: pragmaRootClass do: aBlock	(self ownCachedPragmasNamed: aSymbol) do: aBlock.	(self = pragmaRootClass or: [ self = JSEAbstractObject ])		ifFalse: [ self superclass cachedPragmasNamed: aSymbol upTo: pragmaRootClass do: aBlock ]</body>

<body package="JavascriptEngine-Runtime-Core">cachedSendToPrototype: aSymbol 	cachedSendToPrototype isNil 		ifTrue: 		[	cachedSendToPrototype := Set new.			self cachedPragmasNamed: #sendToPrototype do: [: sendToPrototypePragma | cachedSendToPrototype add: sendToPrototypePragma selector ]		].	^ cachedSendToPrototype includes: aSymbol</body>

<body package="JavascriptEngine-Runtime-Core">ownCachedPragmasNamed: aSymbol	cachedPragmas isNil ifTrue: [ cachedPragmas := Dictionary new ].	^ cachedPragmas at: aSymbol ifAbsentPut: [  Pragma allNamed: aSymbol in: self ]</body>
</methods>

<methods>
<class-id>JSE.JSEParseFloatParser</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">start	"Parser used for the global function parseFloat (string)"	^  strDecimalLiteral</body>
</methods>

<methods>
<class-id>JSE.JSERunEnvironment</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">addScript: aScript	self register: aScript in: self scripts</body>

<body package="JavascriptEngine-Runtime-Core">addThread: aThread	self register: aThread in: self threads</body>

<body package="JavascriptEngine-Runtime-Core">frameIDsOfThreadID: threadID	^ (self threadWithID: threadID) ifNotNil: [ : thread | thread frameIDs ]</body>

<body package="JavascriptEngine-Runtime-Core">removeAllScripts	self scripts copy do: [ : script | self removeScript: script ].</body>

<body package="JavascriptEngine-Runtime-Core">removeAllThreads	self threads copy do: [ : thread | self removeThread: thread ].</body>

<body package="JavascriptEngine-Runtime-Core">removeScript: aScript 	self deregister: aScript from: self scripts</body>

<body package="JavascriptEngine-Runtime-Core">removeThread: aThread 	self deregister: aThread from: self threads</body>

<body package="JavascriptEngine-Runtime-Core">scriptIDs	^ self scripts keys asSortedCollection asArray</body>

<body package="JavascriptEngine-Runtime-Core">scriptWithID: anID 	^ self scripts at: anID ifAbsent: [ nil ]</body>

<body package="JavascriptEngine-Runtime-Core">scripts	^ scripts</body>

<body package="JavascriptEngine-Runtime-Core">threadIDs	^ self threads keys asSortedCollection asArray</body>

<body package="JavascriptEngine-Runtime-Core">threadWithID: anID 	^ self threads at: anID ifAbsent: [ nil ]</body>

<body package="JavascriptEngine-Runtime-Core">threads	^ threads</body>
</methods>

<methods>
<class-id>JSE.JSERunEnvironment</class-id> <category>initialize-release</category>

<body package="JavascriptEngine-Runtime-Core">initialize	scripts := Dictionary new.	threads := Dictionary new.	nextId := 0.</body>
</methods>

<methods>
<class-id>JSE.JSERunEnvironment</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">addThreadToControl: aThread action: aControlSymbol 	" Hook for debugging "</body>

<body package="JavascriptEngine-Runtime-Core">deregister: aRegisteredObject from: aRegistry 	aRegisteredObject id ifNotNil: [: id | aRegistry removeKey: id ifAbsent: [ ]].</body>

<body package="JavascriptEngine-Runtime-Core">isDebugEnabled	^  false</body>

<body package="JavascriptEngine-Runtime-Core">nextId	^ nextId := nextId + 1</body>

<body package="JavascriptEngine-Runtime-Core">register: anObject in: aRegistry	anObject id: self nextId.	aRegistry at: anObject id put: anObject</body>

<body package="JavascriptEngine-Runtime-Core">registerScriptForCode: aCompiledCode 	" A script provides debugger-related bookkeeping. Ensure that the script is registered "	| script |	script := aCompiledCode script.	script id isNil 		ifTrue: [ self addScript: script ].	^ script</body>

<body package="JavascriptEngine-Runtime-Core">threadForExecutionEnvironment: anExecutionEnvironment 	self threads do: 		[: thread |			thread executionEnvironment == anExecutionEnvironment 				ifTrue: [ ^ thread ]		].	^ nil</body>
</methods>

<methods>
<class-id>JSE.JSERunEnvironment</class-id> <category>controlling</category>

<body package="JavascriptEngine-Runtime-Core">continue: threadID step: stepKind 	" Hook for debugging: Continue running the thread "</body>

<body package="JavascriptEngine-Runtime-Core">runCode: aCompiledCode	" Run the code in a new environment "	^ self runCode: aCompiledCode in: aCompiledCode createExecutionEnvironment.</body>

<body package="JavascriptEngine-Runtime-Core">runCode: aCompiledCode in: executionEnvironment 	" Run the code in this environment "	^ aCompiledCode runIn: executionEnvironment.</body>

<body package="JavascriptEngine-Runtime-Core">stopThreadWithID: threadID 	" Hook for debugging: Stop the thread "</body>

<body package="JavascriptEngine-Runtime-Core">suspendThreadWithID: threadID 	" Hook for debugging: Suspend the thread "</body>
</methods>

<methods>
<class-id>JSE.JSERunEnvironment</class-id> <category>events</category>

<body package="JavascriptEngine-Runtime-Core">triggerBreakpoint: aBreakpoint in: anExecutionContext	" Hook for halting at breakpoints "</body>

<body package="JavascriptEngine-Runtime-Core">triggerDebuggerIn: anExecutionContext at: aLineNumber	" Hook for halting at debugger statements "</body>

<body package="JavascriptEngine-Runtime-Core">triggerEventsForCodeSection: aCodeSection in: anExecutionContext 	" Hook for stepping through code "</body>
</methods>

<methods>
<class-id>JSE.JSEEnvironmentRecord</class-id> <category>bindings</category>

<body package="JavascriptEngine-Runtime-Core">createMutableBinding: identifier 	" see 10.2 Lexical Environments "	self createMutableBinding: identifier deletable: false</body>

<body package="JavascriptEngine-Runtime-Core">createMutableBinding: identifier deletable: deletable	" see 10.2 Lexical Environments "	self subclassResponsibility</body>

<body package="JavascriptEngine-Runtime-Core">deleteBinding: identifier	" see 10.2 Lexical Environments "	self subclassResponsibility</body>

<body package="JavascriptEngine-Runtime-Core">ensureMutableBinding: argumentName value: argumentValue strict: strict 	( self hasBinding: argumentName ) 		ifFalse: [ self createMutableBinding: argumentName ].	self setMutableBinding: argumentName value: argumentValue strict: strict.</body>

<body package="JavascriptEngine-Runtime-Core">functionCallThisValue	^ self implicitThisValue</body>

<body package="JavascriptEngine-Runtime-Core">getBindingValue: identifier strict: strict	" see 10.2 Lexical Environments "	self subclassResponsibility</body>

<body package="JavascriptEngine-Runtime-Core">hasBinding: identifier 	" see 10.2 Lexical Environments "	self subclassResponsibility.</body>

<body package="JavascriptEngine-Runtime-Core">implicitThisValue	" see 10.2 Lexical Environments "	self subclassResponsibility</body>

<body package="JavascriptEngine-Runtime-Core">setMutableBinding: identifier value: value strict: strict	" see 10.2 Lexical Environments "	self subclassResponsibility</body>
</methods>

<methods>
<class-id>JSE.JSEEnvironmentRecord</class-id> <category>operators - private</category>

<body package="JavascriptEngine-Runtime-Core">delete: identifier strict: isStrict 	" delete the binding. returns a boolean "	isStrict 		ifTrue: [ JSESyntaxError raiseSignal: ( 'Cannot delete "&lt;1s&gt; in environment' expandMacrosWith: identifier )].	^ self deleteBinding: identifier</body>
</methods>

<methods>
<class-id>JSE.JSEEnvironmentRecord</class-id> <category>references</category>

<body package="JavascriptEngine-Runtime-Core">getIdentifierReference: identifier strict: strict 	^ ( self hasBinding: identifier ) 		ifTrue: [ JSEReference base: self name: identifier strict: strict ]		ifFalse: [ nil ]</body>

<body package="JavascriptEngine-Runtime-Core">getReferenceValue: referenceName strict: strict 	^ self getBindingValue: referenceName strict: strict</body>

<body package="JavascriptEngine-Runtime-Core">isEnvironmentRecord	^ true</body>

<body package="JavascriptEngine-Runtime-Core">isPrimitiveBase	^ false</body>

<body package="JavascriptEngine-Runtime-Core">isPropertyReferenceValue	^ false</body>

<body package="JavascriptEngine-Runtime-Core">isUndefined	^ false</body>

<body package="JavascriptEngine-Runtime-Core">setReference: referenceName value: value strict: strict 	self setMutableBinding: referenceName value: value strict: strict.</body>
</methods>

<methods>
<class-id>JSE.JSEEnvironmentRecord class</class-id> <category>error signals</category>

<body package="JavascriptEngine-Runtime-Core">alreadyDefined: identifier	JSEAssertionNotification raiseSignal: ('Binding "&lt;1s&gt;" has already been defined in this context' expandMacrosWith: identifier displayString)</body>

<body package="JavascriptEngine-Runtime-Core">raiseUndefinedReference: identifier	JSEReferenceError raiseSignal: ('Binding "&lt;1s&gt;" is undefined' expandMacrosWith: identifier displayString printString)</body>

<body package="JavascriptEngine-Runtime-Core">undefined: identifier	JSEAssertionNotification raiseSignal: ('Binding "&lt;1s&gt;" is not defined in this context' expandMacrosWith: identifier displayString printString )</body>
</methods>

<methods>
<class-id>JSE.JSEEvalError class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'Represents an EvalError of the ECMA specification'</body>

<body package="JavascriptEngine-Runtime-Core">objectName	^ #EvalError</body>
</methods>

<methods>
<class-id>JSE.JSECompiledCode</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">addFunctionDeclaration: aFunctionDeclaration	self functionDeclarations add: aFunctionDeclaration</body>

<body package="JavascriptEngine-Runtime-Core">addVariableDeclaration: aVariableDeclaration	self variableDeclarations add: aVariableDeclaration</body>

<body package="JavascriptEngine-Runtime-Core">codeSection	^ codeSection</body>

<body package="JavascriptEngine-Runtime-Core">codeSection: aCodeBlock 	codeSection := aCodeBlock.</body>

<body package="JavascriptEngine-Runtime-Core">functionDeclarations	functionDeclarations isNil 		ifTrue: [ functionDeclarations := OrderedCollection new ].	^ functionDeclarations</body>

<body package="JavascriptEngine-Runtime-Core">globalCode	self subclassResponsibility</body>

<body package="JavascriptEngine-Runtime-Core">isStrict	^ isStrict ifNil: [ false ]</body>

<body package="JavascriptEngine-Runtime-Core">isStrict: aBoolean	isStrict := aBoolean</body>

<body package="JavascriptEngine-Runtime-Core">script	self subclassResponsibility</body>

<body package="JavascriptEngine-Runtime-Core">sourceNode: aNode nodeCodeSections: nodeCodeSections	" hook for attaching source information to the compiled code "</body>

<body package="JavascriptEngine-Runtime-Core">variableDeclarations	variableDeclarations isNil 		ifTrue: [ variableDeclarations := OrderedCollection new ].	^ variableDeclarations</body>
</methods>

<methods>
<class-id>JSE.JSECompiledCode</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">createEvalExecutionContextBaseOn: outerExecutionContext isDirect: isDirect 	" see 10.4.2 Entering Eval Code "	| evalExecutionContext variableEnvironment thisBinding lexicalEnvironment globalObject globalEnvironmentRecord globalEnvironment strictEnvironment executionEnvironment |	executionEnvironment := outerExecutionContext executionEnvironment.	isDirect 		ifTrue: 		[				thisBinding := outerExecutionContext thisBinding.			lexicalEnvironment := outerExecutionContext lexicalEnvironment.			variableEnvironment := outerExecutionContext variableEnvironment		]		ifFalse: 		[	globalObject := executionEnvironment globalObject.			thisBinding := globalObject.			globalEnvironmentRecord := JSEObjectEnvironmentRecord new.			globalEnvironmentRecord bindingObject: globalObject.			globalEnvironment := JSELexicalEnvironment on: globalEnvironmentRecord outerEnvironment: nil.			lexicalEnvironment := globalEnvironment.			variableEnvironment := lexicalEnvironment		].	" Strict Mode Restrictions "	self isStrict 		ifTrue: 		[	strictEnvironment := lexicalEnvironment newDeclarativeEnvironment.			variableEnvironment := strictEnvironment.			lexicalEnvironment := strictEnvironment		].	evalExecutionContext := JSEExecutionContext thisBinding: thisBinding lexicalEnvironment: lexicalEnvironment variableEnvironment: variableEnvironment.	evalExecutionContext code: self.	evalExecutionContext executionEnvironment: executionEnvironment.	variableEnvironment := evalExecutionContext variableEnvironment.	self createFunctionBindingsIn: variableEnvironment executionContext: evalExecutionContext.	self createVariableBindingsIn: variableEnvironment executionContext: evalExecutionContext.	^ evalExecutionContext</body>

<body package="JavascriptEngine-Runtime-Core">hasConfigurableBindings	^ false</body>

<body package="JavascriptEngine-Runtime-Core">runWithExecutionContext: executionContext executionEnvironment: executionEnvironment 	" runs the compiled code and returns the result "	^ [			[ | result |			result := self codeSection executeIn: executionContext.			result notNil 				ifTrue: [ result ]				ifFalse: [ JSEUndefined singleton ]		] 			on: JSEError			do: 			[: ex |				" note that currentExecutionContext might be different from executionContext, if the exception occurrs within a function or eval "				executionEnvironment currentExecutionContext addSourceInformationToException: ex.				JSECompletion signalType: #throw value: ( ex asJSEObjectIn: executionEnvironment ) target: nil			]	] 		on: JSECompletion		do: 		[: completion |						[ completion handleForProgram ] 				on: JSEError				do: 				[: ex |					executionEnvironment currentExecutionContext addSourceInformationToException: ex.					ex pass				]		]</body>
</methods>

<methods>
<class-id>JSE.JSECompiledCode</class-id> <category>bindings</category>

<body package="JavascriptEngine-Runtime-Core">createFunctionBindingsIn: aLexicalEnvironment executionContext: executionContext 	" see 10.5 Declaration Binding Instantiation "	| c s |	c := self hasConfigurableBindings.	s := self isStrict.	self functionDeclarations do: 		[: functionDeclaration |			functionDeclaration 				createBindingInEnvironment: aLexicalEnvironment				executionContext: executionContext				configurable: c				strict: s		].</body>

<body package="JavascriptEngine-Runtime-Core">createVariableBindingsIn: aLexicalEnvironment executionContext: executionContext 	" see 10.5 Declaration Binding Instantiation "	| c s |	c := self hasConfigurableBindings.	s := self isStrict.	self variableDeclarations do: 		[: variableDeclaration |			variableDeclaration 				createBindingInEnvironment: aLexicalEnvironment				executionContext: executionContext				configurable: c				strict: s		].</body>
</methods>

<methods>
<class-id>JSE.JSECompiledCode</class-id> <category>eval</category>

<body package="JavascriptEngine-Runtime-Core">evalDirect: isDirect executionContext: executionContext	^ self evalDirect: isDirect executionContext: executionContext evalContextConfigurationBlock: nil</body>

<body package="JavascriptEngine-Runtime-Core">evalDirect: isDirect executionContext: executionContext evalContextConfigurationBlock: evalContextConfigurationBlock	" see 10.4.2 Entering Eval Code 	and 15.1.2.1 eval (x) "	| evalExecutionContext executionEnvironment |	evalExecutionContext := self createEvalExecutionContextBaseOn: executionContext isDirect: isDirect.	executionEnvironment := executionContext executionEnvironment.	^ [	executionEnvironment pushExecutionContext: evalExecutionContext.		evalContextConfigurationBlock notNil ifTrue: [ evalContextConfigurationBlock value: evalExecutionContext ].		self runWithExecutionContext: evalExecutionContext executionEnvironment: executionEnvironment	] ensure: [ executionEnvironment popExecutionContext ]</body>
</methods>

<methods>
<class-id>JSE.JSEPrimitiveValue</class-id> <category>printing</category>

<body package="JavascriptEngine-Runtime-Core">displayString	^ self toStringValue</body>

<body package="JavascriptEngine-Runtime-Core">printOn: aStream 	self value notNil 		ifTrue: [ self value printOn: aStream ]		ifFalse: [ aStream nextPutAll: 'an unitialized '; nextPutAll: self class name ].</body>
</methods>

<methods>
<class-id>JSE.JSEPrimitiveValue</class-id> <category>internal - testing</category>

<body package="JavascriptEngine-Runtime-Core">isPrimitive	^ true</body>
</methods>

<methods>
<class-id>JSE.JSEPrimitiveValue</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">toNumberValue	^ self class toNumberValue: self value</body>

<body package="JavascriptEngine-Runtime-Core">toPrimitiveWithPreferredType: preferredTypeHint	^ self</body>
</methods>

<methods>
<class-id>JSE.JSEPrimitiveValue</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">value	" returns the Smalltalk value "	JSETypeError raiseSignal: 'Cannot return primitive value'</body>
</methods>

<methods>
<class-id>JSE.JSEPrimitiveValue</class-id> <category>internal</category>

<body package="JavascriptEngine-Runtime-Core">elementPropertyOrNilAtIndex: aZeroBasedIndex 	" Returns the property at the 0-based indexed "	^ nil</body>

<body package="JavascriptEngine-Runtime-Core">internalPrototype	^ self getPrototype</body>

<body package="JavascriptEngine-Runtime-Core">newObjectClass	" custom constructors with primitive prototypes create first class objects "	^ JSEObject</body>
</methods>

<methods>
<class-id>JSE.JSEPrimitiveValue</class-id> <category>references</category>

<body package="JavascriptEngine-Runtime-Core">getReferenceValue: referenceName strict: strict 	" see 8.7.1 GetValue (V) "	| object property |	object := self toObject.	property := object getPropertyOrNil: referenceName.	^ property notNil 		ifTrue: [ property getPropertyValueOf: self ]		ifFalse: [ self undefined ]</body>

<body package="JavascriptEngine-Runtime-Core">primitiveValue	" that's me "	^ self</body>

<body package="JavascriptEngine-Runtime-Core">setReference: referenceName value: value strict: strict 	| object property |	object := self toObject.	( object canPut: referenceName ) 		ifTrue: 		[	property := object getOwnPropertyOrNil: referenceName.			( property notNil and: [ property isData ]) 				ifTrue: 				[	strict 						ifTrue: 						[	JSETypeError raiseSignal: ( 'Cannot set binding value of data property "&lt;1s&gt;"' expandMacrosWith: referenceName printString )						]				]				ifFalse: 				[	property := object getPropertyOrNil: referenceName.					( property notNil and: [ property isAccessor ]) 						ifTrue: [ property setPropertyValue: value of: self ]						ifFalse: 						[	JSETypeError raiseSignal: ( 'Cannot create property "&lt;1s&gt;"of transient object' expandMacrosWith: referenceName printString )						]				]		]		ifFalse: 		[	strict 				ifTrue: [ JSETypeError raiseSignal: ( 'Cannot set binding value of property "&lt;1s&gt;"' expandMacrosWith: referenceName printString )]		].</body>
</methods>

<methods>
<class-id>JSE.JSEPrimitiveValue</class-id> <category>comparing - private</category>

<body package="JavascriptEngine-Runtime-Core">equalsObjectOfSameType: anotherObject	^ self equalsPrimitiveOfSameType: anotherObject</body>

<body package="JavascriptEngine-Runtime-Core">equalsPrimitiveOfSameType: aPrimitiveValue	^ self value = aPrimitiveValue value</body>

<body package="JavascriptEngine-Runtime-Core">strictEqualsObjectOfSameType: anotherObject 	^ self equalsPrimitiveOfSameType: anotherObject</body>
</methods>

<methods>
<class-id>JSE.JSEPrimitiveValue</class-id> <category>comparing</category>

<body package="JavascriptEngine-Runtime-Core">= anotherAbstractObject 	" Internal comparision, neither SameValue nor AbstractEquality "	^ self class = anotherAbstractObject class and: [ self sameValueAsObjectOfSameType: anotherAbstractObject ]</body>

<body package="JavascriptEngine-Runtime-Core">hash	^ self value hash</body>

<body package="JavascriptEngine-Runtime-Core">sameValueAsObjectOfSameType: anotherAbstractObject 	^ self value = anotherAbstractObject value</body>
</methods>

<methods>
<class-id>JSE.JSEPrimitiveValue</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">convertToNativeObjectWith: aConversionRegistry	^ self value</body>

<body package="JavascriptEngine-Runtime-Core">primitiveValueDo: primitiveBlock orElse: elseBlock	^ primitiveBlock value: self</body>

<body package="JavascriptEngine-Runtime-Core">toErrorMessageString	^ self toStringValue</body>
</methods>

<methods>
<class-id>JSE.JSEPrimitiveValue</class-id> <category>functions - private</category>

<body package="JavascriptEngine-Runtime-Core">constructWithPrimitiveValue: primitiveValue executionContext: executionContext 	" utility to handle both use cases of a constructor: either construct a new object, or called as a function "	| constructedObject |	constructedObject := executionContext thisValue.	^ constructedObject hasConstructedFlag 		ifTrue: 		[	" constructor has created an object "			constructedObject primitiveValue: primitiveValue.			constructedObject		]		ifFalse: 		[	" constructor as a function "			primitiveValue		]</body>
</methods>

<methods>
<class-id>JSE.JSEPrimitiveValue class</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">toNumberValue: aPrimitiveValue	" convert the value of this type to a number "	JSETypeError raiseSignal: 'Cannot convert value to a number'</body>
</methods>

<methods>
<class-id>JSE.JSEPrimitiveValue class</class-id> <category>testing</category>

<body package="JavascriptEngine-Runtime-Core">isAbstract	^ self == JSEPrimitiveValue</body>
</methods>

<methods>
<class-id>JSE.JSEPrimitiveValue class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'A primitive value (string, boolean etc.)'</body>
</methods>

<methods>
<class-id>JSE.JSEFunction</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">code	^ code</body>

<body package="JavascriptEngine-Runtime-Core">code: aCode 	code := aCode.</body>

<body package="JavascriptEngine-Runtime-Core">formalParameters	^ formalParameters</body>

<body package="JavascriptEngine-Runtime-Core">formalParameters: aListOfFormalParameters 	formalParameters := aListOfFormalParameters .</body>

<body package="JavascriptEngine-Runtime-Core">identifier	^ identifier</body>

<body package="JavascriptEngine-Runtime-Core">identifier: anIdentifierSymbol	identifier := anIdentifierSymbol.</body>
</methods>

<methods>
<class-id>JSE.JSEFunction</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">functionObjectClass	^ JSEFunctionObject</body>

<body package="JavascriptEngine-Runtime-Core">length	^ self formalParameters size</body>
</methods>

<methods>
<class-id>JSE.JSEFunction</class-id> <category>printing</category>

<body package="JavascriptEngine-Runtime-Core">displayString	| stream |	stream := String new writeStream.	self printFunctionSignatureOn: stream.	^ stream contents</body>

<body package="JavascriptEngine-Runtime-Core">printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' '.	self printFunctionSignatureOn: aStream.</body>
</methods>

<methods>
<class-id>JSE.JSEFunction</class-id> <category>references</category>

<body package="JavascriptEngine-Runtime-Core">getValue	" 8.7.1 GetValue "	^ self</body>
</methods>

<methods>
<class-id>JSE.JSEFunction</class-id> <category>bindings</category>

<body package="JavascriptEngine-Runtime-Core">createFunctionObjectInEnvironment: aLexicalEnvironment executionContext: executionContext strict: strict 	" see 13 Function Definition "	| prototypeObject functionObject |	prototypeObject := JSEObject new.	prototypeObject prototypeName: self identifier.	functionObject := self createFunctionObjectInEnvironment: aLexicalEnvironment strict: strict prototypeObject: prototypeObject writable: true.	prototypeObject 		uncheckedAddProperty: ( JSEDataProperty name: #constructor value: functionObject isWritable: true isEnumerable: false isConfigurable: true ).	strict 		ifTrue: 		[	functionObject addTypeErrorAccessorForPropertiesNamed: #( #caller #arguments ) executionEnvironment: executionContext executionEnvironment		].	^ functionObject</body>

<body package="JavascriptEngine-Runtime-Core">createFunctionObjectInEnvironment: aLexicalEnvironment strict: strict prototypeObject: prototypeObject writable: writable 	" see 13 Function Definition "	| functionObject |	functionObject := self functionObjectClass code: self code scope: aLexicalEnvironment strict: ( strict or: [ self code isStrict ]).	functionObject 		uncheckedAddProperty: ( JSEDataProperty name: #prototype value: prototypeObject isWritable: writable isEnumerable: false isConfigurable: false ).	functionObject 		uncheckedAddProperty: ( JSEDataProperty name: #length value: ( JSENumber value: self length ) isWritable: false isEnumerable: false isConfigurable: false ).	^ functionObject</body>

<body package="JavascriptEngine-Runtime-Core">printFunctionParametersOn: aStream 	aStream nextPutAll: '('.	self formalParameters notNil 		ifTrue: [ self formalParameters do: [: formalParameter | aStream nextPutAll: formalParameter ] separatedBy: [ aStream nextPutAll: ', ' ]].	aStream nextPutAll: ')'.</body>

<body package="JavascriptEngine-Runtime-Core">printFunctionSignatureOn: aStream 	self identifier notNil 		ifTrue: 		[	aStream nextPutAll: self identifier.			aStream nextPutAll: ' '		].	self printFunctionParametersOn: aStream.</body>
</methods>

<methods>
<class-id>JSE.JSEFunction class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">identifier: anIdentifierSymbol formalParameters: formalParameters	^ self new identifier: anIdentifierSymbol; formalParameters: formalParameters; yourself</body>
</methods>

<methods>
<class-id>JSE.JSEFunction class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">ellipsisParameterName	" some built-in functions have ellipsis parameters  "	^ #varargs</body>
</methods>

<methods>
<class-id>JSE.JSEFunctionExpression</class-id> <category>bindings</category>

<body package="JavascriptEngine-Runtime-Core">createFunctionObjectInEnvironment: aLexicalEnvironment executionContext: executionContext strict: strict 	" see 13 Function Definition "	| functionObject environmentRecord |	functionObject := super createFunctionObjectInEnvironment: aLexicalEnvironment executionContext: executionContext strict: strict.	self identifier notNil 		ifTrue: 		[	" ECMA 262 states that the identifier is only visible inside the function block,			but even the ECMA 262 tests access the identifer outside the function expression, e.g. test12_14_13 "			environmentRecord := aLexicalEnvironment environmentRecord.			( environmentRecord hasBinding: self identifier ) 				ifFalse: [ environmentRecord createMutableBinding: self identifier deletable: false ].			environmentRecord setMutableBinding: self identifier value: functionObject strict: strict		].	^ functionObject</body>
</methods>

<methods>
<class-id>JSE.JSEFunctionExpression class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">formalParameters: formalParameters 	^ self new formalParameters: formalParameters;		yourself</body>
</methods>

<methods>
<class-id>JSE.JSEProperty</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">checkOverwriteWith: otherProperty throw: throw 	self isConfigurableOrNil == false 		ifTrue: 		[	otherProperty isConfigurableOrNil == true 				ifTrue: 				[	throw 						ifTrue: [ JSETypeError raiseSignal: ( 'Property "&lt;1s&gt;" is not configurable' expandMacrosWith: self nameString )].					^ false				].			( self isEnumerableOrNil notNil and: [ otherProperty isEnumerableOrNil notNil and: [ self isEnumerableOrNil ~~ otherProperty isEnumerableOrNil ]]) 				ifTrue: 				[	throw 						ifTrue: 						[	JSETypeError raiseSignal: ( 'Enumerable field of property "&lt;1s&gt;" differs from assigned property' expandMacrosWith: self nameString )						].					^ false				]		].	( self isAccessor ~~ otherProperty isAccessor and: [ self isConfigurableOrNil == false ]) 		ifTrue: 		[	throw 				ifTrue: 				[	JSETypeError raiseSignal: ( 'Cannot overwrite non-configurable property "&lt;1s&gt;" with property of different type' expandMacrosWith: self nameString )				].			^ false		].	^ true</body>

<body package="JavascriptEngine-Runtime-Core">combineForOverwriting: currentProperty	" This is a new property that will overwrite the current property "	currentProperty setUndefinedFieldsOf: self.	^ self</body>

<body package="JavascriptEngine-Runtime-Core">inheritedCanPutValueIsExtensible: objectIsExtensible	" this property is inherited from the prototype "	^ self canPutValue</body>

<body package="JavascriptEngine-Runtime-Core">isConfigurableOrNil	^ isConfigurable</body>

<body package="JavascriptEngine-Runtime-Core">isEnumerableOrNil	^ isEnumerable</body>

<body package="JavascriptEngine-Runtime-Core">setUndefinedFieldsOf: otherProperty 	otherProperty isConfigurableOrNil isNil 		ifTrue: [ self isConfigurableOrNil ifNotNil: [: b | otherProperty isConfigurable: b ]].	otherProperty isEnumerableOrNil isNil 		ifTrue: [ self isEnumerableOrNil ifNotNil: [: b | otherProperty isEnumerable: b ]].</body>

<body package="JavascriptEngine-Runtime-Core">setUndefinedFieldsToDefaults	self isEnumerableOrNil isNil 		ifTrue: [ self isEnumerable: false ].	self isConfigurableOrNil isNil 		ifTrue: [ self isConfigurable: false ].</body>

<body package="JavascriptEngine-Runtime-Core">undefined	^ JSEUndefined singleton</body>

<body package="JavascriptEngine-Runtime-Core">unnamedDisplayString	^ '&lt;unnamed property&gt;'</body>
</methods>

<methods>
<class-id>JSE.JSEProperty</class-id> <category>testing</category>

<body package="JavascriptEngine-Runtime-Core">areAllFieldsAbsent	^ self isConfigurableOrNil isNil and: [ self isEnumerableOrNil isNil ]</body>

<body package="JavascriptEngine-Runtime-Core">canBeOverwrittenInObjectInitialiserBy: anotherProperty strict: strict 	(strict and: [ self isData and: [ anotherProperty isData ]])		ifTrue: [ ^ false ].	(self isData and: [ anotherProperty isAccessor ])		ifTrue: [ ^ false ].	^ true</body>

<body package="JavascriptEngine-Runtime-Core">canPutValue	^ false</body>

<body package="JavascriptEngine-Runtime-Core">canStoreValueInArray	" true if the value of this property can be stored in an internal array, instead of storing the property "	^ false</body>

<body package="JavascriptEngine-Runtime-Core">isAccessor	^ false</body>

<body package="JavascriptEngine-Runtime-Core">isData	^ false</body>

<body package="JavascriptEngine-Runtime-Core">isFrozen	^ self isConfigurable not</body>

<body package="JavascriptEngine-Runtime-Core">isGeneric	^ false</body>

<body package="JavascriptEngine-Runtime-Core">isProperty	^ true</body>

<body package="JavascriptEngine-Runtime-Core">isSealed	^ self isConfigurable not</body>
</methods>

<methods>
<class-id>JSE.JSEProperty</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">freeze	self isConfigurable: false.</body>

<body package="JavascriptEngine-Runtime-Core">getPropertyValueOf: anObject 	" returns the current value of this property of the object "	JSETypeError raiseSignal.</body>

<body package="JavascriptEngine-Runtime-Core">isConfigurable	" 8.6.1 Property Attributes	If false, attempts to delete the property, change the property to be an accessor property, or change its attributes (other than [[Value]]) will fail "	^ isConfigurable ifNil: [ false ]</body>

<body package="JavascriptEngine-Runtime-Core">isConfigurable: aConfigurable 	isConfigurable := aConfigurable.</body>

<body package="JavascriptEngine-Runtime-Core">isEnumerable	" 8.6.1 Property Attributes	If true, the property will be enumerated by a for-in enumeration (see 12.6.4). Otherwise, the property is said to be non-enumerable. "	^ isEnumerable ifNil: [ false ]</body>

<body package="JavascriptEngine-Runtime-Core">isEnumerable: aEnumerable 	isEnumerable := aEnumerable.</body>

<body package="JavascriptEngine-Runtime-Core">isWritable	" 8.6.1 Property Attributes	If false, attempts by ECMAScript code to change the property's [[Value]] attribute using [[Put]] will not succeed "	^ false</body>

<body package="JavascriptEngine-Runtime-Core">name	^ name</body>

<body package="JavascriptEngine-Runtime-Core">name: aName 	name := aName asJSEPropertyName</body>

<body package="JavascriptEngine-Runtime-Core">seal	self isConfigurable: false</body>

<body package="JavascriptEngine-Runtime-Core">setPropertyValue: aValue of: anObject 	" sets the current value of this property of the object "	JSETypeError raiseSignal.</body>
</methods>

<methods>
<class-id>JSE.JSEProperty</class-id> <category>printing</category>

<body package="JavascriptEngine-Runtime-Core">nameString	^ self name 		ifNotNil: [: n | n displayString ]		ifNil: [ self unnamedDisplayString ]</body>

<body package="JavascriptEngine-Runtime-Core">printOn: aStream	super printOn: aStream.	aStream nextPutAll: '('.	self printPropertyOn: aStream.	aStream nextPutAll: ')'.</body>

<body package="JavascriptEngine-Runtime-Core">printPropertyOn: aStream 	self name notNil 		ifTrue: 		[	aStream nextPutAll: '#'.			aStream nextPutAll: self nameString		]		ifFalse: [ aStream nextPutAll: self unnamedDisplayString ].</body>
</methods>

<methods>
<class-id>JSE.JSEProperty</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">asObjectProperty	" Return a property that can be added to objects "	self setUndefinedFieldsToDefaults.	^ self</body>

<body package="JavascriptEngine-Runtime-Core">initializeFromDescriptorObject: aJSEObject 	" 8.10.5 ToPropertyDescriptor ( Obj ) "	( aJSEObject getOrNil: #enumerable ) ifNotNil: [: e | self isEnumerable: e toBooleanValue ].	( aJSEObject getOrNil: #configurable ) ifNotNil: [: c | self isConfigurable: c toBooleanValue ].</body>

<body package="JavascriptEngine-Runtime-Core">objectFromPropertyDescriptor	" 8.10.4 FromPropertyDescriptor ( Desc ) "	| object |	object := JSEObject getPrototype constructNewObject.	object put: #enumerable value: self isEnumerable asJSEObject throw: false.	object put: #configurable value: self isConfigurable asJSEObject throw: false.	^ object</body>
</methods>

<methods>
<class-id>JSE.JSEProperty</class-id> <category>comparing</category>

<body package="JavascriptEngine-Runtime-Core">sameFieldsAs: anotherProperty	" Used in [[DefineOwnProperty]].	Basically true if both properties are equal "	^ (self class = anotherProperty class)		and: [ self isEnumerableOrNil = anotherProperty isEnumerableOrNil		and: [ self isConfigurableOrNil = anotherProperty isConfigurableOrNil ]]</body>
</methods>

<methods>
<class-id>JSE.JSEProperty class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">fromObject: aJSEObject	^ self new initializeFromDescriptorObject: aJSEObject; yourself</body>

<body package="JavascriptEngine-Runtime-Core">name: aName 	^ self new name: aName;		yourself</body>
</methods>

<methods>
<class-id>JSE.JSEGenericProperty</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">asObjectProperty	" Convert to a new non-generic property.	See step 4 of 8.12.9 [[DefineOwnProperty]] (P, Desc, Throw) "	| newProperty |	newProperty := JSEDataProperty name: self name.	self setUndefinedFieldsOf: newProperty.	newProperty setUndefinedFieldsToDefaults.	^ newProperty</body>
</methods>

<methods>
<class-id>JSE.JSEGenericProperty</class-id> <category>testing</category>

<body package="JavascriptEngine-Runtime-Core">isGeneric	^ true</body>
</methods>

<methods>
<class-id>JSE.JSEGenericProperty</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">combineForOverwriting: currentProperty 	| newProperty |	^ currentProperty isGeneric 		ifTrue: [ super combineForOverwriting: currentProperty ]		ifFalse: 		[	" Convert to a new non-generic property "			newProperty := currentProperty class name: self name.			self setUndefinedFieldsOf: newProperty.			currentProperty setUndefinedFieldsOf: newProperty.			newProperty		]</body>
</methods>

<methods>
<class-id>JSE.JSEFirstClassObject</class-id> <category>internal</category>

<body package="JavascriptEngine-Runtime-Core">classString	" A String value indicating a specification defined classification of objects "	^ self internalProperties at: #class ifAbsent: [ self internalClassSymbol asString ]</body>

<body package="JavascriptEngine-Runtime-Core">classString: aString	" A String value indicating a specification defined classification of objects "	^ self internalProperties at: #class put: aString</body>

<body package="JavascriptEngine-Runtime-Core">construct	^  self internalProperties at: #construct ifAbsent: [ nil ]</body>

<body package="JavascriptEngine-Runtime-Core">construct: aConstructor	 self internalProperties at: #construct put: aConstructor</body>

<body package="JavascriptEngine-Runtime-Core">constructNewObject	" this is the prototype. create a new object "	| newObject |	newObject := super constructNewObject.	newObject internalPrototype: self.	^ newObject</body>

<body package="JavascriptEngine-Runtime-Core">definePropertiesFromObject: objectProperties	" 15.2.3.7 Object.defineProperties ( O, Properties ) "	| props |	props := objectProperties toObject.	props enumerablePropertyNamesDo: [ : propertyName |		| propertyObject property |		propertyObject := props get: propertyName.		property := propertyObject objectToPropertyDescriptor.		property name: propertyName.		self defineOwnProperty: property throw: true	].</body>

<body package="JavascriptEngine-Runtime-Core">defineProperty: propertyName fromObject: attributes 	" 15.2.3.6 Object.defineProperty ( O, P, Attributes ) "	| property |	property := attributes objectToPropertyDescriptor.	property name: propertyName.	self defineOwnProperty: property throw: true.</body>

<body package="JavascriptEngine-Runtime-Core">enumerablePropertyNamesDo: aBlock		super enumerablePropertyNamesDo: aBlock.	self properties do: [ : property |		property isEnumerable ifTrue: [ aBlock value: property name ]	].</body>

<body package="JavascriptEngine-Runtime-Core">freeze	self preparePropertiesForModification.	self properties do: [: property | property freeze ].	self isExtensible: false.</body>

<body package="JavascriptEngine-Runtime-Core">getOwnPropertyOrNil: propertyName 	^ self properties at: propertyName asJSEPropertyName ifAbsent: [ nil ].</body>

<body package="JavascriptEngine-Runtime-Core">internalPrototype	" the internal prototype ([[Prototype]]) of this object "	^ internalPrototype ifNil: [ internalPrototype := self defaultPrototype ]</body>

<body package="JavascriptEngine-Runtime-Core">internalPrototype: prototypeObject	" the internal prototype of this object "	internalPrototype  := prototypeObject</body>

<body package="JavascriptEngine-Runtime-Core">isExtensible	" If true, own properties may be added to the object. "	^ self internalProperties at: #isExtensible ifAbsent: [ true ]</body>

<body package="JavascriptEngine-Runtime-Core">isExtensible: aBoolean	 self internalProperties at: #isExtensible put: aBoolean</body>

<body package="JavascriptEngine-Runtime-Core">propertyNamesDo: aBlock		super propertyNamesDo: aBlock.	self properties do: [ : property |		aBlock value: property name	].</body>

<body package="JavascriptEngine-Runtime-Core">prototype: prototypeObject	" the internal prototype of this object "	internalPrototype  := prototypeObject</body>

<body package="JavascriptEngine-Runtime-Core">prototypeName	" The name of the constructor function "	^ self internalProperties at: #prototypeName ifAbsent: [ nil ]</body>

<body package="JavascriptEngine-Runtime-Core">prototypeName: aName	" The name of the constructor function "	self internalProperties at: #prototypeName put: (aName ifNotNil: [ aName asString ])</body>

<body package="JavascriptEngine-Runtime-Core">provideThis	^ self internalProperties at: #provideThis ifAbsent: [ false ]</body>

<body package="JavascriptEngine-Runtime-Core">provideThis: aBoolean	self internalProperties at: #provideThis put: aBoolean</body>

<body package="JavascriptEngine-Runtime-Core">seal	self preparePropertiesForModification.	self properties do: [: property | property seal ].	self isExtensible: false.</body>
</methods>

<methods>
<class-id>JSE.JSEFirstClassObject</class-id> <category>internal - testing</category>

<body package="JavascriptEngine-Runtime-Core">isFrozen	self properties do: 		[: property |			property isFrozen 				ifFalse: [ ^ false ]		].	^ self isExtensible not</body>

<body package="JavascriptEngine-Runtime-Core">isInstanceOfPrototype: aPrototype	" True if the prototype chain includes aPrototype "	| proto |	proto := self.	[	proto := proto internalPrototype.		proto == aPrototype 			ifTrue: [ ^ true ].		proto isNil or: [ proto isUndefined ]	] whileFalse.	^ false</body>

<body package="JavascriptEngine-Runtime-Core">isObject	^ true</body>

<body package="JavascriptEngine-Runtime-Core">isPropertyReferenceValue	^ true</body>

<body package="JavascriptEngine-Runtime-Core">isSealed	self properties do: 		[: property |			property isSealed 				ifFalse: [ ^ false ]		].	^ self isExtensible not</body>
</methods>

<methods>
<class-id>JSE.JSEFirstClassObject</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">objectToPropertyDescriptor	" 8.10.5 ToPropertyDescriptor ( Obj ) "	| propertyClass isAccessor isData |	isAccessor := ( self hasProperty: #get ) or: [ self hasProperty: #set ].	isData := ( self hasProperty: #value ) or: [ self hasProperty: #writable ].	propertyClass := isAccessor 			ifTrue: [ JSEAccessorProperty ]			ifFalse: 			[	isData 					ifTrue: [ JSEDataProperty ]					ifFalse: [ JSEGenericProperty ]			].	^ propertyClass fromObject: self</body>

<body package="JavascriptEngine-Runtime-Core">toNumberValue	^ (self toPrimitiveWithPreferredType: JSENumber) toNumberValue</body>

<body package="JavascriptEngine-Runtime-Core">toObject	^ self</body>

<body package="JavascriptEngine-Runtime-Core">toPrimitiveWithPreferredType: preferredTypeHint	^ self defaultValueWithPreferredType: preferredTypeHint</body>

<body package="JavascriptEngine-Runtime-Core">toStringValue	^ (self toPrimitiveWithPreferredType: JSEString) toStringValue</body>
</methods>

<methods>
<class-id>JSE.JSEFirstClassObject</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">internalProperties	internalProperties isNil 		ifTrue: [ internalProperties := Dictionary new ].	^ internalProperties</body>

<body package="JavascriptEngine-Runtime-Core">properties	properties isNil 		ifTrue: [ properties := self newProperties ].	^ properties</body>
</methods>

<methods>
<class-id>JSE.JSEFirstClassObject</class-id> <category>bindings</category>

<body package="JavascriptEngine-Runtime-Core">implicitThisValue	^ self provideThis 		ifTrue: [ self ]		ifFalse: [ self undefined ]</body>
</methods>

<methods>
<class-id>JSE.JSEFirstClassObject</class-id> <category>internal - array</category>

<body package="JavascriptEngine-Runtime-Core">arrayCheckIsCallable: callbackFunction 	callbackFunction isCallable 		ifFalse: [ JSETypeError raiseSignal: ( 'Expected a callback function, got &lt;1s&gt;' expandMacrosWith: callbackFunction printString )].</body>

<body package="JavascriptEngine-Runtime-Core">arrayElements	" Returns a Smalltalk array containing the elements of this array-like object. "	| arrayLength arrayElements |	arrayLength := self arrayLength.	arrayElements := Array new: arrayLength.	0 to: arrayLength - 1 do: [ : i | 		| element |		element := self getIndexOrNil: i .		element notNil ifTrue: [ arrayElements at: i + 1 put: element ].	].	^ arrayElements</body>

<body package="JavascriptEngine-Runtime-Core">arrayElements: elementsOfArray 	" Set the elements of the array-like object.	Used to implement the build-in array prototype functions "	| propertyName length |	length := elementsOfArray size.	1 to: length		do: 		[: i | | element |			element := elementsOfArray at: i.			propertyName := ( i - 1 ) printString.			element notNil 				ifTrue: [ self put: propertyName value: element throw: true ]				ifFalse: [ self delete: propertyName throw: true ]		].	" delete remaining array elements "	self properties keys copy do: [ : name |		(self indexOfPropertyName: name) ifNotNil: [ : index |			index &gt;= length ifTrue: [ self delete: name throw: true ]		].	].	self put: #length value: elementsOfArray size throw: true.</body>

<body package="JavascriptEngine-Runtime-Core">arrayElementsCallback: callbackFunction thisArgument: thisArgument executionContext: executionEnvironment do: aBlock 	self arrayElementsCallback: callbackFunction thisArgument: thisArgument executionEnvironment: executionEnvironment do: aBlock.</body>

<body package="JavascriptEngine-Runtime-Core">arrayElementsCallback: callbackFunction thisArgument: thisArgument executionEnvironment: executionEnvironment do: aBlock 	" process array elements "	| length |	length := self arrayLength.	self arrayCheckIsCallable: callbackFunction.	0 to: length - 1		do: 		[: i | | result value |			value := self getIndexOrNil: i.			value notNil 				ifTrue: 				[	result := callbackFunction 							callWithThis: thisArgument							arguments: ( Array with: value with: i asJSEObject with: self )							executionEnvironment: executionEnvironment.					aBlock value: result value: value value: i				]		].</body>

<body package="JavascriptEngine-Runtime-Core">arrayLength	" Returns the length of the array-like object "	| lengthValue |	lengthValue := self get: #length.	^ lengthValue toUnsignedInteger32Value</body>

<body package="JavascriptEngine-Runtime-Core">valueOfArrayElement: element	" Returns the value (JSEObject) of the array element. 	Possible elements are		- objects		- properties		- nil "	| value |	value := (element notNil and: [ element isProperty ])		ifTrue: [ element getPropertyValueOf: self ]		ifFalse: [ element ].	^ value ifNil: [ JSEUndefined singleton ]</body>
</methods>

<methods>
<class-id>JSE.JSEFirstClassObject</class-id> <category>prototype functions - array</category>

<body package="JavascriptEngine-Runtime-Core">arrayConcat: items 	" see 15.4.4.4 "	| unfoldedItems |	unfoldedItems := OrderedCollection new: items size.	unfoldedItems add: self.	self unfoldConcatItems: items to: unfoldedItems.	^ JSEArray withElements: unfoldedItems</body>

<body package="JavascriptEngine-Runtime-Core">arrayEvery: callbackFunction thisArgument: thisArgument executionEnvironment: executionEnvironment 	self 		arrayElementsCallback: callbackFunction		thisArgument: thisArgument		executionContext: executionEnvironment		do: 		[: callbackValue : value : arrayIndex |			callbackValue toBooleanValue 				ifFalse: [ ^ false ]		].	^ true</body>

<body package="JavascriptEngine-Runtime-Core">arrayFilter: callbackFunction thisArgument: thisArgument executionEnvironment: executionEnvironment 	| filteredElements filteredLength |	filteredElements := JSEPlatform arrayElementsWithSize: self arrayLength.	filteredLength := 0.	self 		arrayElementsCallback: callbackFunction		thisArgument: thisArgument		executionEnvironment: executionEnvironment		do: 		[: callbackValue : value : arrayIndex |			callbackValue toBooleanValue 				ifTrue: 				[	filteredLength := filteredLength + 1.					filteredElements at: filteredLength put: value				]		].	filteredLength &lt; filteredElements size 		ifTrue: [ filteredElements := filteredElements copyFrom: 1 to: filteredLength ].	^ JSEArray withElements: filteredElements</body>

<body package="JavascriptEngine-Runtime-Core">arrayForEach: callbackFunction thisArgument: thisArgument executionEnvironment: executionEnvironment 	self arrayElementsCallback: callbackFunction thisArgument: thisArgument executionContext: executionEnvironment do: [ : callbackValue : value : arrayIndex | ].	^ self undefined</body>

<body package="JavascriptEngine-Runtime-Core">arrayIndexOf: searchElement fromIndex: fromIndex 	| start length |	length := self arrayLength.	start := fromIndex isUndefined 			ifTrue: [ 0 ]			ifFalse: [ fromIndex toIntegerValue ].	start &lt; 0 		ifTrue: [ start := length + start ].	( start max: 0 ) to: length - 1		do: 		[: i | ( self getIndexOrNil: i ) ifNotNil: 				[: element | ( element strictEqualsValue: searchElement ) 						ifTrue: [ ^ i ]				]		].	^ -1</body>

<body package="JavascriptEngine-Runtime-Core">arrayJoin: separator 	| separatorString stream elementsToPrint |	separatorString := separator isUndefined 			ifTrue: [ ',' ]			ifFalse: [ separator toStringValue ].	elementsToPrint := self arrayElements.	^ elementsToPrint notEmpty 		ifTrue: 		[	stream := ( String new: elementsToPrint size * ( separatorString size + 1 )) writeStream.			elementsToPrint 				do: 				[: element | | value |					value := self valueOfArrayElement: element.					( value isUndefined or: [ value isJSENull ]) 						ifFalse: [ stream nextPutAll: value toStringValue ]				]				separatedBy: [ stream nextPutAll: separatorString ].			stream contents		]		ifFalse: [ '' ]</body>

<body package="JavascriptEngine-Runtime-Core">arrayLastIndexOf: searchElement fromIndex: fromIndex 	| start length |	length := self arrayLength.	fromIndex isUndefined 		ifTrue: [ start := length - 1 ]		ifFalse: 		[	start := fromIndex toIntegerValue.			start &lt; 0 				ifTrue: [ start := length + start ]				ifFalse: [ start := start min: length - 1 ]		].	start to: 0		by: -1		do: 		[: i | ( self getIndexOrNil: i ) ifNotNil: 				[: element | ( element strictEqualsValue: searchElement ) 						ifTrue: [ ^ i ]				]		].	^ -1</body>

<body package="JavascriptEngine-Runtime-Core">arrayMap: callbackFunction thisArgument: thisArgument executionEnvironment: executionEnvironment 	| mappedElements |	mappedElements := JSEPlatform arrayElementsWithSize: self arrayLength.	self 		arrayElementsCallback: callbackFunction		thisArgument: thisArgument		executionEnvironment: executionEnvironment		do: [: callbackValue : value : arrayIndex | mappedElements at: arrayIndex + 1 put: callbackValue ].	^ JSEArray withElements: mappedElements</body>

<body package="JavascriptEngine-Runtime-Core">arrayPop	| element |	^ self arrayLength &gt; 0 		ifTrue: 		[	element := self arrayElements last.			self arrayElements: ( self arrayElements copyFrom: 1 to: self arrayElements size - 1 ).			self valueOfArrayElement: element		]		ifFalse: [ self undefined ]</body>

<body package="JavascriptEngine-Runtime-Core">arrayPush: aListOfItems	self arrayElements: (self arrayElements jseConcat: aListOfItems).	^ self arrayLength</body>

<body package="JavascriptEngine-Runtime-Core">arrayReduce: reduceFunction initialValue: initialValue executionEnvironment: executionEnvironment reverse: reverse 	| start accumulator stop step arrayLength |	arrayLength := self arrayLength.	reverse 		ifTrue: 		[	start := arrayLength - 1.			stop := 0.			step := -1		]		ifFalse: 		[	start := 0.			stop := arrayLength - 1.			step := 1		].	accumulator := initialValue.	start to: stop		by: step		do: 		[: i | | value |			value := self getIndex: i .			value isUndefined 				ifFalse: 				[	accumulator := accumulator notNil 							ifTrue: 							[	reduceFunction 									callWithThis: self undefined									arguments: ( Array with: accumulator with: value with: i  asJSEObject with: self )									executionEnvironment: executionEnvironment							]							ifFalse: [ value ]				]		].	accumulator isNil 		ifTrue: [ JSETypeError raiseSignal: 'Cannot reduce empty array without initial value' ].	^ accumulator</body>

<body package="JavascriptEngine-Runtime-Core">arrayReverse	self arrayElements: self arrayElements reverse.	^ self</body>

<body package="JavascriptEngine-Runtime-Core">arrayShift	| element |	^ self arrayLength &gt; 0 		ifTrue: 		[	element := self arrayElements first.			self arrayElements: ( self arrayElements copyFrom: 2 to: self arrayElements size ).			self valueOfArrayElement: element		]		ifFalse: [ self undefined ]</body>

<body package="JavascriptEngine-Runtime-Core">arraySliceFrom: start to: end 	| slicedElements |	slicedElements := self sliceElements: self arrayElements length: self arrayLength from: start to: end.	^ JSEArray withElements: slicedElements</body>

<body package="JavascriptEngine-Runtime-Core">arraySome: callbackFunction thisArgument: thisArgument executionEnvironment: executionEnvironment 	self 		arrayElementsCallback: callbackFunction		thisArgument: thisArgument		executionEnvironment: executionEnvironment		do: 		[: callbackValue : value : arrayIndex |			callbackValue toBooleanValue 				ifTrue: [ ^ true ]		].	^ false</body>

<body package="JavascriptEngine-Runtime-Core">arraySort: aSortFunction executionEnvironment: executionEnvironment 	| useSortFunction |	useSortFunction := aSortFunction isUndefined not.	useSortFunction 		ifTrue: [ self arrayCheckIsCallable: aSortFunction ].	self arrayElements sort: 			[: element1 : element2 | | compareResult value1 value2 |				value1 := self valueOfArrayElement: element1.				value1 isUndefined 					ifTrue: [ false ]					ifFalse: 					[	value2 := self valueOfArrayElement: element2.						value2 isUndefined 							ifTrue: [ true ]							ifFalse: 							[	useSortFunction 									ifTrue: 									[	compareResult := aSortFunction 												callWithThis: self undefined												arguments: ( Array with: value1 with: value2 )												executionEnvironment: executionEnvironment.										compareResult toNumberValue &lt;= 0									]									ifFalse: [ value1 toStringValue &lt;= value2 toStringValue ]							]					]			].</body>

<body package="JavascriptEngine-Runtime-Core">arraySplice: start deleteCount: deleteCount items: items 	| relativeStart actualStart actualDeleteCount length |	relativeStart := start toIntegerValue.	length := self arrayLength.	actualStart := relativeStart &lt; 0 			ifTrue: [ length + relativeStart max: 0 ]			ifFalse: [ relativeStart min: length ].	actualDeleteCount := ( deleteCount toIntegerValue max: 0 ) min: length - actualStart.	^ self arraySpliceFrom: actualStart actualDeleteCount: actualDeleteCount items: items</body>

<body package="JavascriptEngine-Runtime-Core">arraySpliceFrom: actualStart actualDeleteCount: actualDeleteCount items: items 	| deletedElements length |	deletedElements := OrderedCollection new: actualDeleteCount.	0 to: actualDeleteCount - 1		do: 		[: k | | element |			element := self getIndexOrNil: actualStart + k.			deletedElements add: element		].	length := self arrayLength.	items size &lt; actualDeleteCount 		ifTrue: 		[	actualStart to: length - actualDeleteCount - 1				do: 				[: k | | element to |					element := self getIndexOrNil: k + actualDeleteCount.					to := k + items size.					element notNil 						ifTrue: [ self putIndex: to value: element throw: true ]						ifFalse: [ self deleteIndex: to throw: true ]				].			length - 1 to: length - actualDeleteCount + items size by: -1 do: [: k | self deleteIndex: k throw: true ]		]		ifFalse: 		[	items size &gt; actualDeleteCount 				ifTrue: 				[	length - actualDeleteCount - 1 to: actualStart						by: -1						do: 						[: k | | element to |							element := self getIndexOrNil: k + actualDeleteCount.							to := k + items size.							element notNil 								ifTrue: [ self putIndex: to value: element throw: true ]								ifFalse: [ self deleteIndex: to throw: true ]						]				]		].	0 to: items size - 1 do: [: k | self putIndex: k + actualStart value: ( items at: k + 1 ) throw: true ].	self put: #length value: length - actualDeleteCount + items size throw: true.	^ JSEArray withElements: deletedElements</body>

<body package="JavascriptEngine-Runtime-Core">arrayUnshift: items 	| arrayElements |	arrayElements := self arrayElements.	self arrayElements: (items jseConcat: arrayElements).	^ items size + arrayElements size</body>

<body package="JavascriptEngine-Runtime-Core">unfoldConcatItems: items to: unfoldedItems 	items do: 		[: item |			item isArray 				ifTrue: [ unfoldedItems addAll: item arrayElements ]				ifFalse: [ unfoldedItems add: item ]		].</body>
</methods>

<methods>
<class-id>JSE.JSEFirstClassObject</class-id> <category>prototype functions - boolean</category>

<body package="JavascriptEngine-Runtime-Core">booleanToString	self checkIsBooleanClass.	^ self toBoolean toString</body>

<body package="JavascriptEngine-Runtime-Core">booleanValueOf	self checkIsBooleanClass.	^ self toBoolean</body>

<body package="JavascriptEngine-Runtime-Core">checkIsBooleanClass	self classString = 'Boolean'		ifFalse: [ JSETypeError raiseSignal: 'Object class must be Boolean'.]</body>
</methods>

<methods>
<class-id>JSE.JSEFirstClassObject</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">addTypeErrorAccessorForPropertiesNamed: propertyNames executionEnvironment: executionEnvironment 	| throwFunction |	throwFunction := executionEnvironment throwTypeErrorFunctionObject.	propertyNames do: 		[: propertyName | | accessor |			accessor := JSEAccessorProperty name: propertyName asJSEPropertyName getFunction: throwFunction setFunction: throwFunction.			accessor isConfigurable: false;				isEnumerable: false.			self uncheckedAddProperty: accessor		].</body>

<body package="JavascriptEngine-Runtime-Core">flagAsPrototype	self internalProperties at: #isPrototype put: true.</body>

<body package="JavascriptEngine-Runtime-Core">hasConstructedFlag	^ self internalProperties at: #constructed ifAbsent: [ false ]</body>

<body package="JavascriptEngine-Runtime-Core">isPrototype	^ internalProperties notNil and: [ internalProperties at: #isPrototype ifAbsent: [ false ]]</body>

<body package="JavascriptEngine-Runtime-Core">newProperties	^ self propertiesClass new: 5</body>

<body package="JavascriptEngine-Runtime-Core">newProtoProperties	^ self propertiesClass new: 100</body>

<body package="JavascriptEngine-Runtime-Core">preparePropertiesForModification	properties notNil ifTrue: [ properties prepareForModificationOf: self ].</body>

<body package="JavascriptEngine-Runtime-Core">propertiesClass	^ JSEPlatform orderedDictionaryClass</body>

<body package="JavascriptEngine-Runtime-Core">resetConstructedFlag	self internalProperties removeKey: #constructed ifAbsent: [ nil ]</body>

<body package="JavascriptEngine-Runtime-Core">setConstructedFlag	self internalProperties at: #constructed put: true.</body>

<body package="JavascriptEngine-Runtime-Core">setLengthValue: length 	" set the value of the length property "	| lengthProperty |	self preparePropertiesForModification.	lengthProperty := self properties at: #length ifAbsent: [ nil ].	lengthProperty notNil 		ifTrue: [ lengthProperty setPropertyValue: length of: self ]		ifFalse: 		[	lengthProperty := JSEDataProperty name: #length value: length isWritable: true isEnumerable: false isConfigurable: false.			self uncheckedAddProperty: lengthProperty		].</body>

<body package="JavascriptEngine-Runtime-Core">setProperties: aPropertiesDictionary	properties := aPropertiesDictionary</body>

<body package="JavascriptEngine-Runtime-Core">toNativeObjectWith: aConversionRegistry	^ aConversionRegistry at: self ifAbsentPut: [ self convertToNativeObjectWith: aConversionRegistry ]</body>

<body package="JavascriptEngine-Runtime-Core">uncheckedAddProperty: newProperty	self preparePropertiesForModification.	self properties at: newProperty name put: newProperty</body>

<body package="JavascriptEngine-Runtime-Core">uncheckedDeleteProperty: propertyName 	self preparePropertiesForModification.	self properties removeKey: propertyName asJSEPropertyName ifAbsent: [ ].</body>
</methods>

<methods>
<class-id>JSE.JSEFirstClassObject</class-id> <category>printing</category>

<body package="JavascriptEngine-Runtime-Core">printOn: aStream 	self isPrototype 		ifTrue: [ aStream nextPutAll: 'Prototype of ' ].	^ super printOn: aStream</body>
</methods>

<methods>
<class-id>JSE.JSEFirstClassObject</class-id> <category>internal - JSON</category>

<body package="JavascriptEngine-Runtime-Core">revive: reviver executionEnvironment: executionEnvironment 	| transformed deleted |	transformed := Dictionary new.	deleted := Set new.	" do not modify the underlying properties collection(s) while enumerating the properties, so collect the transformations first "	self enumerablePropertyNamesDo: 		[: propertyName | | newElement |			newElement := self walk: propertyName reviver: reviver executionEnvironment: executionEnvironment.			newElement isUndefined 				ifTrue: [ deleted add: propertyName ]				ifFalse: [ transformed at: propertyName put: newElement ]		].	deleted do: [: propertyName | self delete: propertyName throw: false ].	transformed keysAndValuesDo: 		[: propertyName : newElement |			self 				defineOwnProperty: ( JSEDataProperty name: propertyName value: newElement isWritable: true isEnumerable: true isConfigurable: true )				throw: false		].</body>

<body package="JavascriptEngine-Runtime-Core">stringifyReplacerFunction: replacerFunction propertyList: propertyList gap: gap indent: indent stack: stack executionEnvironment: executionEnvironment 	| partial propertyNames stream nextIndent separator |	( stack includes: self ) 		ifTrue: [ JSETypeError raiseSignal: 'Cannot stringify cyclical structure' ].	stack addLast: self.	partial := OrderedCollection new.	propertyNames := propertyList ifNil: [ self enumerablePropertyNames ].	nextIndent := gap notNil 			ifTrue: [ indent , gap ]			ifFalse: [ indent ].	propertyNames do: 		[: propertyName | | propertyString |			propertyString := self 					stringify: propertyName					replacerFunction: replacerFunction					propertyList: propertyList					gap: gap					indent: nextIndent					stack: stack					executionEnvironment: executionEnvironment.			propertyString notNil 				ifTrue: [ partial add: propertyName asJSEPropertyNameString jseJsonLiteral -&gt; propertyString ]		].	stream := String new writeStream.	stream nextPut: ${.	gap notNil 		ifTrue: 		[	separator := ( String with: $, with: Character lf ) , nextIndent.			stream nextPut: Character lf; nextPutAll: nextIndent.			partial 				do: [: nameAndValue | stream nextPutAll: nameAndValue key; nextPutAll: ': '; nextPutAll: nameAndValue value ]				separatedBy: [ stream nextPutAll: separator ].			stream nextPut: Character lf; nextPutAll: indent		]		ifFalse: 		[	partial 				do: [: nameAndValue | stream nextPutAll: nameAndValue key; nextPut: $:; nextPutAll: nameAndValue value ]				separatedBy: [ stream nextPut: $, ]		].	stream nextPut: $}.	stack removeLast.	^ stream contents</body>

<body package="JavascriptEngine-Runtime-Core">toJSON: propertyName executionEnvironment: executionEnvironment	| toJsonFunction |	toJsonFunction := self getOrNil: 'toJSON'.	^ (toJsonFunction notNil and: [toJsonFunction isCallable ])		ifTrue: [ toJsonFunction callWithThis: self arguments: (Array with: propertyName asString asJSEObject) executionEnvironment: executionEnvironment ]		ifFalse: [ self ]</body>
</methods>

<methods>
<class-id>JSE.JSEFirstClassObject</class-id> <category>internal - prototype</category>

<body package="JavascriptEngine-Runtime-Core">createPrototypeObjectForGlobalObject: globalObject 	| protoObject |	protoObject := self prototypeObjectClass new.	protoObject initializePrototypeFromGlobalObject: globalObject.	^ protoObject</body>

<body package="JavascriptEngine-Runtime-Core">defaultPrototype	" the default internal prototype of this object "	^ self undefined</body>

<body package="JavascriptEngine-Runtime-Core">prototypeOfPrototypeFromGlobalObject: globalObject 	" returns the prototype of the prototype object "	^ self class extendedClass 		ifNotNil: 		[: extendedClass |			" Prototype of the extended class "			extendedClass getPrototypeFromGlobalObject: globalObject 		]		ifNil: 		[	" end of prototype chain "			JSEObject getPrototypeFromGlobalObject: globalObject 		]</body>
</methods>

<methods>
<class-id>JSE.JSEFirstClassObject</class-id> <category>comparing - private</category>

<body package="JavascriptEngine-Runtime-Core">equalsObjectOfDifferentType: anotherObject	" see 11.9.3 The Abstract Equality Comparison Algorithm "	anotherObject isJSEBoolean		ifTrue: [ ^ self equals: anotherObject toNumber ].	(anotherObject isJSEString or: [ anotherObject isJSENumber ]) 		ifTrue: [ ^ self toPrimitive equals: anotherObject  ].	^ false</body>
</methods>

<methods>
<class-id>JSE.JSEFirstClassObject</class-id> <category>initialize-release</category>

<body package="JavascriptEngine-Runtime-Core">initializePrototypeFromGlobalObject: globalObject 	properties isNil 		ifTrue: [ properties := self newProtoProperties ].	self internalPrototype: ( self prototypeOfPrototypeFromGlobalObject: globalObject ).	self flagAsPrototype.</body>
</methods>

<methods>
<class-id>JSE.JSEFirstClassObject class</class-id> <category>testing</category>

<body package="JavascriptEngine-Runtime-Core">isAbstract	^ self == JSEFirstClassObject</body>
</methods>

<methods>
<class-id>JSE.JSEFirstClassObject class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">extendedClass	" Returns the extend class (the class of the prototype of the prototype object)  "	^ nil</body>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'A first class object with properties'</body>

<body package="JavascriptEngine-Runtime-Core">typeOfSymbol	^ #object</body>
</methods>

<methods>
<class-id>JSE.JSEFirstClassObject class</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">initializationOrder	^ self extendedClass ifNotNil: [: extendedClass | extendedClass initializationOrder + ( 0 @ 1 )] ifNil: [ super initializationOrder ]</body>
</methods>

<methods>
<class-id>JSE.JSELiteralSection</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">literal	^ literal</body>

<body package="JavascriptEngine-Runtime-Core">literal: aLiteral 	literal := aLiteral.</body>
</methods>

<methods>
<class-id>JSE.JSELiteralSection</class-id> <category>evaluating</category>

<body package="JavascriptEngine-Runtime-Core">executeIn: anExecutionContext 	^ self literal</body>

<body package="JavascriptEngine-Runtime-Core">getValueIn: anExecutionContext 	^ self literal</body>
</methods>

<methods>
<class-id>JSE.JSELiteralSection class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">literal: aLiteral 	^ self new literal: aLiteral ; yourself</body>
</methods>

<methods>
<class-id>JSE.JSECompletion</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">target	^ target</body>

<body package="JavascriptEngine-Runtime-Core">target: aTarget 	target := aTarget.</body>

<body package="JavascriptEngine-Runtime-Core">type	^ type</body>

<body package="JavascriptEngine-Runtime-Core">type: aType 	type := aType.</body>

<body package="JavascriptEngine-Runtime-Core">value	^ value</body>

<body package="JavascriptEngine-Runtime-Core">value: aValue 	value := aValue.</body>
</methods>

<methods>
<class-id>JSE.JSECompletion</class-id> <category>running</category>

<body package="JavascriptEngine-Runtime-Core">handleForFunctionCall	| v |	^ self type = #throw 		ifTrue: 		[	self pass.			JSEUndefined singleton		]		ifFalse: 		[	v := self type = #return 				ifTrue: [ self value ]				ifFalse: [ JSEUndefined singleton ].			self return: v		]</body>

<body package="JavascriptEngine-Runtime-Core">handleForProgram	self type = #throw 		ifTrue: [ self value raiseUncaughtError ].	^ self value ifNil: [ JSEUndefined singleton ]</body>

<body package="JavascriptEngine-Runtime-Core">handleForStatementLabelled: aLabel 	" 12.12 Labelled Statements "	( self type = #break and: [ aLabel = self target ]) 		ifTrue: 		[	" reached the label "			self return: ( self value ifNil: [ JSEUndefined singleton ])		]		ifFalse: [ self pass ].</body>

<body package="JavascriptEngine-Runtime-Core">handleForSwitch	" 12.11 The switch Statement "	( self type = #break and: [ self target isNil ]) 		ifTrue: [ self return: nil ]		ifFalse: [ self pass ]</body>

<body package="JavascriptEngine-Runtime-Core">handleForWith	" 12.10 The with Statement "	^ self type = #throw 		ifTrue: 		[	self target: nil.			self pass		]		ifFalse: [ self pass ]</body>

<body package="JavascriptEngine-Runtime-Core">handleIterationBreak	( self type = #break and: [ self target isNil ]) 		ifTrue: [ self return: nil ]		ifFalse: [ self pass ]</body>

<body package="JavascriptEngine-Runtime-Core">handleIterationContinueInLabel: aLabel 	( self type = #continue and: [ self target isNil or: [ self target = aLabel ]]) 		ifTrue: [ self return: nil ]		ifFalse: [ self pass ]</body>
</methods>

<methods>
<class-id>JSE.JSECompletion class</class-id> <category>signalling</category>

<body package="JavascriptEngine-Runtime-Core">signalType: aType value: aValue target: aTarget 	^ self new		type: aType;		value: aValue;		target: aTarget;		raiseSignal</body>
</methods>

<methods>
<class-id>JSE.JSEScript</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">code	^ code</body>

<body package="JavascriptEngine-Runtime-Core">code: aCode 	code := aCode.</body>

<body package="JavascriptEngine-Runtime-Core">nodeCodeSections	^ nodeCodeSections</body>

<body package="JavascriptEngine-Runtime-Core">nodeCodeSections: aNodeCodeSections 	nodeCodeSections := aNodeCodeSections.</body>

<body package="JavascriptEngine-Runtime-Core">rootNode	^ rootNode</body>

<body package="JavascriptEngine-Runtime-Core">rootNode: aRootNode 	rootNode := aRootNode.</body>

<body package="JavascriptEngine-Runtime-Core">sourceInformation	^ sourceInformation</body>

<body package="JavascriptEngine-Runtime-Core">sourceInformation: aSourceInformation 	sourceInformation := aSourceInformation.</body>
</methods>

<methods>
<class-id>JSE.JSEScript class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">code: aCode sourceInformation: aSourceInformation rootNode: aNode nodeCodeSections: aNodeCodeSections	^ self new 		code: aCode;		sourceInformation: aSourceInformation;		rootNode: aNode;		nodeCodeSections: aNodeCodeSections;		yourself</body>
</methods>

<methods>
<class-id>JSE.JSEFunctionExecutionContext</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">callerIsStrict	^ callerIsStrict ifNil: [ false ]</body>

<body package="JavascriptEngine-Runtime-Core">callerIsStrict: aCallerIsStrict 	callerIsStrict := aCallerIsStrict.</body>

<body package="JavascriptEngine-Runtime-Core">function	^ self code function</body>

<body package="JavascriptEngine-Runtime-Core">isDirectEvalCall	^ isDirectEvalCall ifNil: [ false ]</body>

<body package="JavascriptEngine-Runtime-Core">isDirectEvalCall: aIsDirectEvalCall 	isDirectEvalCall := aIsDirectEvalCall.</body>
</methods>

<methods>
<class-id>JSE.JSEFunctionExecutionContext</class-id> <category>debugger</category>

<body package="JavascriptEngine-Runtime-Core">canDebug	^ self code globalCode notNil</body>
</methods>

<methods>
<class-id>JSE.JSEFunctionExecutionContext</class-id> <category>printing</category>

<body package="JavascriptEngine-Runtime-Core">displayString	^ 'function ' asText , (self function displayString) asText allBold, ' (in ', super displayString, ')'</body>
</methods>

<methods>
<class-id>JSE.JSECodeSequence</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">codeSections	^ codeSections</body>

<body package="JavascriptEngine-Runtime-Core">codeSections: someCodeSections 	codeSections := someCodeSections asOrderedCollection</body>

<body package="JavascriptEngine-Runtime-Core">lineNumberInterval	| lineNumberInterval |	lineNumberInterval := nil.	self codeSections do: 		[: section |			section lineNumberInterval ifNotNil: 				[: sectionInterval |					lineNumberInterval := lineNumberInterval isNil 							ifTrue: [ sectionInterval ]							ifFalse: 							[( sectionInterval first min: lineNumberInterval first ) to: ( sectionInterval last max: lineNumberInterval last )							]				]		].	^ lineNumberInterval</body>
</methods>

<methods>
<class-id>JSE.JSECodeSequence</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">optimizeCodeSections: unoptimizedCodeSections 	unoptimizedCodeSections notEmpty 		ifTrue: 		[	codeSections := OrderedCollection new: unoptimizedCodeSections size.			1 to: unoptimizedCodeSections size - 1				do: 				[: i | | section |					section := unoptimizedCodeSections at: i.					section isUndefinedSection 						ifFalse: [ codeSections add: section ]				].			codeSections add: unoptimizedCodeSections last		]		ifFalse: [ codeSections := unoptimizedCodeSections ].</body>
</methods>

<methods>
<class-id>JSE.JSECodeSequence</class-id> <category>evaluating</category>

<body package="JavascriptEngine-Runtime-Core">executeIn: anExecutionContext 	| result |	result := JSEUndefined singleton.	1 to: codeSections size do: [: i | result := ( codeSections at: i ) executeIn: anExecutionContext ].	^ result</body>

<body package="JavascriptEngine-Runtime-Core">getValueIn: anExecutionContext 	^ codeSections notEmpty 		ifTrue: 		[	1 to: codeSections size - 1 do: [: i | ( codeSections at: i ) executeIn: anExecutionContext ].			codeSections last getValueIn: anExecutionContext		]		ifFalse: [ JSEUndefined singleton ]</body>
</methods>

<methods>
<class-id>JSE.JSECodeSequence class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">codeSections: someCodeSections 	^ self new 		optimizeCodeSections: someCodeSections;		yourself</body>
</methods>

<methods>
<class-id>JSE.JSEDataProperty</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">checkOverwriteValue: otherValue throw: throw 	( self isConfigurableOrNil == false ) 		ifTrue: 		[	self isWritableOrNil == false 				ifTrue: 				[						( self valueOrNil notNil and: [ (self valueOrNil sameValueAs: otherValue) not ]) 						ifTrue: 						[	throw 								ifTrue: [ JSETypeError raiseSignal: ('Cannot overwrite non-writable data property "&lt;1s&gt;" with a different value' expandMacrosWith: self nameString) ].							^ false						]				]		].	^ true</body>

<body package="JavascriptEngine-Runtime-Core">checkOverwriteWith: otherProperty throw: throw 	( super checkOverwriteWith: otherProperty throw: throw ) 		ifFalse: [ ^ false ].	( otherProperty isData and: [ self isConfigurableOrNil == false ]) 		ifTrue: 		[	self isWritableOrNil == false 				ifTrue: 				[	otherProperty isWritableOrNil == true 						ifTrue: 						[	throw 								ifTrue: [ JSETypeError raiseSignal: ('Cannot overwrite non-writable data property "&lt;1s&gt;" with writable property' expandMacrosWith: self nameString ) ].							^ false						].					( self valueOrNil notNil and: [ (self value sameValueAs: otherProperty value) not ]) 						ifTrue: 						[	throw 								ifTrue: [ JSETypeError raiseSignal: ('Cannot overwrite non-writable data property "&lt;1s&gt;" with different value' expandMacrosWith: self nameString) ].							^ false						]				]		].	^ true</body>

<body package="JavascriptEngine-Runtime-Core">inheritedCanPutValueIsExtensible: objectIsExtensible	^ objectIsExtensible and: [ self isWritable ]</body>

<body package="JavascriptEngine-Runtime-Core">isWritableOrNil	^ isWritable</body>

<body package="JavascriptEngine-Runtime-Core">setUndefinedFieldsOf: otherProperty 	super setUndefinedFieldsOf: otherProperty.	otherProperty isData 		ifTrue: 		[	otherProperty valueOrNil isNil 				ifTrue: [ self valueOrNil ifNotNil: [: v | otherProperty value: v ]].			otherProperty isWritableOrNil isNil 				ifTrue: [ self isWritableOrNil ifNotNil: [: b | otherProperty isWritable: b ]]		].</body>

<body package="JavascriptEngine-Runtime-Core">setUndefinedFieldsToDefaults	super setUndefinedFieldsToDefaults.	self isWritableOrNil isNil 		ifTrue: [ self isWritable: false ].	self value isNil 		ifTrue: [ self value: self undefined ].</body>
</methods>

<methods>
<class-id>JSE.JSEDataProperty</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">freeze	super freeze.	self isWritable: false.</body>

<body package="JavascriptEngine-Runtime-Core">getPropertyValueOf: anObject 	^ anObject getValueOfDataProperty: self</body>

<body package="JavascriptEngine-Runtime-Core">isWritable	^ isWritable ifNil: [ false ]</body>

<body package="JavascriptEngine-Runtime-Core">isWritable: aWritable 	isWritable := aWritable.</body>

<body package="JavascriptEngine-Runtime-Core">setPropertyValue: aValue of: anObject 	self value: aValue.</body>

<body package="JavascriptEngine-Runtime-Core">value	^ value ifNil: [self undefined ]</body>

<body package="JavascriptEngine-Runtime-Core">value: aValue 	value := aValue asJSEObject.</body>

<body package="JavascriptEngine-Runtime-Core">valueOrNil	^ value</body>
</methods>

<methods>
<class-id>JSE.JSEDataProperty</class-id> <category>printing</category>

<body package="JavascriptEngine-Runtime-Core">printPropertyOn: aStream	super printPropertyOn: aStream.	aStream nextPutAll: ' = '.	self value printOn: aStream.</body>
</methods>

<methods>
<class-id>JSE.JSEDataProperty</class-id> <category>testing</category>

<body package="JavascriptEngine-Runtime-Core">areAllFieldsAbsent	^ super areAllFieldsAbsent and: [ self isWritableOrNil isNil and: [ self valueOrNil isNil ]]</body>

<body package="JavascriptEngine-Runtime-Core">canPutValue	^ self isWritable</body>

<body package="JavascriptEngine-Runtime-Core">canStoreValueInArray		^ self isWritable and: [self isConfigurable and: [ self isEnumerable ]]</body>

<body package="JavascriptEngine-Runtime-Core">isData	^ true</body>

<body package="JavascriptEngine-Runtime-Core">isFrozen	^ super isFrozen and: [ self isWritable not ]</body>
</methods>

<methods>
<class-id>JSE.JSEDataProperty</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">initializeFromDescriptorObject: aJSEObject	" 8.10.5 ToPropertyDescriptor ( Obj ) "	super initializeFromDescriptorObject: aJSEObject.	(aJSEObject getOrNil: #value) ifNotNil: [ : v | self value: v ].	(aJSEObject getOrNil: #writable) ifNotNil: [ : w | self isWritable: w toBooleanValue ].</body>

<body package="JavascriptEngine-Runtime-Core">objectFromPropertyDescriptor	| object |	object := super objectFromPropertyDescriptor.	object put: #value value: (self value ifNil: [ JSEUndefined singleton ]) throw: false.	object put: #writable value: self isWritable asJSEObject throw: false.	^ object</body>
</methods>

<methods>
<class-id>JSE.JSEDataProperty</class-id> <category>comparing</category>

<body package="JavascriptEngine-Runtime-Core">sameFieldsAs: anotherProperty 	^ ( super sameFieldsAs: anotherProperty ) and: 		[	self isWritableOrNil = anotherProperty isWritableOrNil 				and: [ self valueOrNil notNil = anotherProperty valueOrNil notNil 				and: [ self value sameValueAs: anotherProperty value ]]		]</body>
</methods>

<methods>
<class-id>JSE.JSEDataProperty class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">name: aName value: aValue 	^ self new name: aName; value: aValue ; yourself</body>

<body package="JavascriptEngine-Runtime-Core">name: aName value: aValue isWritable: isWritable isEnumerable: isEnumerable isConfigurable: isConfigurable 	^ self new		name: aName;		value: aValue;		isWritable: isWritable;		isEnumerable: isEnumerable;		isConfigurable: isConfigurable;		yourself</body>
</methods>

<methods>
<class-id>JSE.JSEObjectEnvironmentRecord</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">bindingObject	^ bindingObject</body>

<body package="JavascriptEngine-Runtime-Core">bindingObject: aBindingObject 	bindingObject := aBindingObject.</body>

<body package="JavascriptEngine-Runtime-Core">provideThis	^ provideThis ifNil: [ false ]</body>

<body package="JavascriptEngine-Runtime-Core">provideThis: aProvideThis 	provideThis := aProvideThis.</body>
</methods>

<methods>
<class-id>JSE.JSEObjectEnvironmentRecord</class-id> <category>bindings</category>

<body package="JavascriptEngine-Runtime-Core">createMutableBinding: identifier deletable: deletable	self bindingObject createMutableBinding: identifier deletable: deletable</body>

<body package="JavascriptEngine-Runtime-Core">deleteBinding: identifier	^ self bindingObject delete: identifier throw: false</body>

<body package="JavascriptEngine-Runtime-Core">getBindingValue: identifier strict: strict	^ self bindingObject getBindingValue: identifier strict: strict</body>

<body package="JavascriptEngine-Runtime-Core">hasBinding: identifier 	^ self bindingObject hasBinding: identifier</body>

<body package="JavascriptEngine-Runtime-Core">implicitThisValue	^ self provideThis		ifTrue: [ self bindingObject ]		ifFalse: [ JSEUndefined singleton ]</body>

<body package="JavascriptEngine-Runtime-Core">setMutableBinding: identifier value: value strict: strict	self bindingObject setMutableBinding: identifier value: value strict: strict</body>
</methods>

<methods>
<class-id>JSE.JSEObjectEnvironmentRecord class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">provideThis: aProvideThis bindingObject: aBindingObject 	^ self new provideThis: aProvideThis;		bindingObject: aBindingObject;		yourself</body>
</methods>

<methods>
<class-id>JSE.JSEPartCode</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">globalCode	^ self parentCode ifNotNil: [ : code | code globalCode ]</body>

<body package="JavascriptEngine-Runtime-Core">parentCode	^ parentCode</body>

<body package="JavascriptEngine-Runtime-Core">parentCode: aParentCode 	parentCode := aParentCode.</body>

<body package="JavascriptEngine-Runtime-Core">script	^ self parentCode ifNotNil: [ : code | code script ]</body>
</methods>

<methods>
<class-id>JSE.JSEStackVariable</class-id> <category>private - actions</category>

<body package="JavascriptEngine-Runtime-Core">defaultAction	^ nil</body>
</methods>

<methods>
<class-id>JSE.JSEStackVariable class</class-id> <category>evaluating</category>

<body package="JavascriptEngine-Runtime-Core">use: aValue during: aBlock		^ aBlock on: self do: [ :notification | notification resume: aValue ]</body>

<body package="JavascriptEngine-Runtime-Core">value	^ self raiseSignal</body>
</methods>

<methods>
<class-id>JSE.JSESmalltalkBlockSection</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">block	^ block</body>

<body package="JavascriptEngine-Runtime-Core">block: aBlock 	block := aBlock.</body>
</methods>

<methods>
<class-id>JSE.JSESmalltalkBlockSection</class-id> <category>evaluating</category>

<body package="JavascriptEngine-Runtime-Core">executeIn: anExecutionContext 	^ self block cull: anExecutionContext cull: anExecutionContext implementation</body>
</methods>

<methods>
<class-id>JSE.JSESmalltalkBlockSection class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">block: aBlock 	^ self new block: aBlock;		yourself</body>
</methods>

<methods>
<class-id>JSE.JSEGlobalCode</class-id> <category>running</category>

<body package="JavascriptEngine-Runtime-Core">run	| executionEnvironment |	executionEnvironment := self createExecutionEnvironment.	^ self runIn: executionEnvironment</body>

<body package="JavascriptEngine-Runtime-Core">runIn: executionEnvironment 	^ JSECurrentExecutionEnvironment 		use: executionEnvironment		during: [ self runWithExecutionContext: executionEnvironment globalExecutionContext executionEnvironment: executionEnvironment ]</body>
</methods>

<methods>
<class-id>JSE.JSEGlobalCode</class-id> <category>environment</category>

<body package="JavascriptEngine-Runtime-Core">createExecutionEnvironment	" see 10.4.1.1 Initial Global Execution Context "	| executionEnvironment |	executionEnvironment := JSEExecutionEnvironment createGlobalEnvironmentForCode: self.	self initializeExecutionEnvironment: executionEnvironment.	^ executionEnvironment</body>

<body package="JavascriptEngine-Runtime-Core">initializeExecutionContext: executionContext 	| variableEnvironment |	variableEnvironment := executionContext variableEnvironment.	self createFunctionBindingsIn: variableEnvironment executionContext: executionContext.	self createVariableBindingsIn: variableEnvironment executionContext: executionContext.</body>

<body package="JavascriptEngine-Runtime-Core">initializeExecutionEnvironment: executionEnvironment 	" see 10.4.1.1 Initial Global Execution Context "	| executionContext |	executionContext := executionEnvironment globalExecutionContext.	self initializeExecutionContext: executionContext.</body>
</methods>

<methods>
<class-id>JSE.JSEGlobalCode</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">globalCode	^ self</body>

<body package="JavascriptEngine-Runtime-Core">script	^ script</body>

<body package="JavascriptEngine-Runtime-Core">script: aScript 	script := aScript.</body>

<body package="JavascriptEngine-Runtime-Core">sourceNode: aNode nodeCodeSections: aNodeCodeSections 	self script: ( JSEScript code: self sourceInformation: aNode sourceInformation rootNode: aNode nodeCodeSections: aNodeCodeSections).</body>
</methods>

<methods>
<class-id>JSE.JSESelectorCodeSection</class-id> <category>printing</category>

<body package="JavascriptEngine-Runtime-Core">printOn: aStream	super printOn: aStream.	aStream nextPutAll: '('.	self selector printOn: aStream.	aStream nextPutAll: ')'.</body>
</methods>

<methods>
<class-id>JSE.JSESelectorCodeSection</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">arguments	^ arguments</body>

<body package="JavascriptEngine-Runtime-Core">arguments: aListOfArguments 	arguments := aListOfArguments asArray</body>

<body package="JavascriptEngine-Runtime-Core">paddedArguments: aListOfArguments 	arguments := aListOfArguments</body>

<body package="JavascriptEngine-Runtime-Core">selector	^ selector</body>

<body package="JavascriptEngine-Runtime-Core">selector: aSelector 	aSelector isSymbol ifFalse: [ JSEError raiseSignal: 'Internal error: Implementation selector expected' ].	selector := aSelector.</body>

<body package="JavascriptEngine-Runtime-Core">sourceInterval	^ nil</body>

<body package="JavascriptEngine-Runtime-Core">sourceString	^ nil</body>
</methods>

<methods>
<class-id>JSE.JSESelectorCodeSection</class-id> <category>evaluating</category>

<body package="JavascriptEngine-Runtime-Core">executeIn: anExecutionContext 	^ anExecutionContext implementation perform: self selector withArguments: self arguments</body>

<body package="JavascriptEngine-Runtime-Core">getValueIn: anExecutionContext 	^ ( anExecutionContext implementation perform: self selector withArguments: self arguments ) 		getValue</body>
</methods>

<methods>
<class-id>JSE.JSESelectorCodeSection class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">selector: aSelector arguments: aListOfArguments 	^ self new selector: aSelector; arguments: aListOfArguments ; yourself</body>

<body package="JavascriptEngine-Runtime-Core">selector: aSelector with: arg1 with: arg2 with: arg3	| arguments |	arguments := Array with: arg1 with: arg2 with: arg3.	^ self  selector: aSelector		arguments: arguments</body>

<body package="JavascriptEngine-Runtime-Core">selector: aSelector with: arg1 with: arg2 with: arg3 with: arg4 	| arguments |	arguments := Array with: arg1 with: arg2 with: arg3 with: arg4.	^ self selector: aSelector		arguments: arguments</body>
</methods>

<methods>
<class-id>JSE.JSEFunctionDeclaration</class-id> <category>bindings</category>

<body package="JavascriptEngine-Runtime-Core">createBindingInEnvironment: aLexicalEnvironment executionContext: executionContext configurable: configurable strict: strict 	" see 10.5 Declaration Binding Instantiation "	| functionObject environmentRecord |	functionObject := self 			createFunctionObjectInEnvironment: aLexicalEnvironment			executionContext: executionContext			strict: ( strict or: [ self code isStrict ]).	environmentRecord := aLexicalEnvironment environmentRecord.	( environmentRecord hasBinding: self identifier ) 		ifFalse: [ environmentRecord createMutableBinding: self identifier deletable: configurable ].	environmentRecord setMutableBinding: self identifier value: functionObject strict: strict.</body>
</methods>

<methods>
<class-id>JSE.JSEThread</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">executionEnvironment	^ executionEnvironment</body>

<body package="JavascriptEngine-Runtime-Core">executionEnvironment: aExecutionEnvironment 	executionEnvironment := aExecutionEnvironment.</body>

<body package="JavascriptEngine-Runtime-Core">frameIDs	" Frame = Execution context "	| executionContexts frameIDs numberOfFrames |	executionContexts := self executionEnvironment contextStack.	numberOfFrames := executionContexts size.	frameIDs := OrderedCollection new: numberOfFrames.	executionContexts keysAndValuesDo: 		[: i : executionContext |			executionContext canDebug 				ifTrue: [ frameIDs add: numberOfFrames - i  ]		].	^ frameIDs asSortedCollection</body>

<body package="JavascriptEngine-Runtime-Core">objectRegistry	^ objectRegistry</body>

<body package="JavascriptEngine-Runtime-Core">process	^ process</body>

<body package="JavascriptEngine-Runtime-Core">process: aProcess 	process := aProcess.</body>

<body package="JavascriptEngine-Runtime-Core">state	state isNil ifTrue: [ state := #running ].	^ state</body>

<body package="JavascriptEngine-Runtime-Core">state: aState 	state := aState.</body>

<body package="JavascriptEngine-Runtime-Core">unhandledException	^ unhandledException</body>

<body package="JavascriptEngine-Runtime-Core">unhandledException: aUnhandledException 	unhandledException := aUnhandledException.</body>
</methods>

<methods>
<class-id>JSE.JSEThread</class-id> <category>initialize-release</category>

<body package="JavascriptEngine-Runtime-Core">initialize	super initialize.	objectRegistry := JSEObjectRegistry new.	suspendSemaphore := Semaphore new.</body>
</methods>

<methods>
<class-id>JSE.JSEThread</class-id> <category>testing</category>

<body package="JavascriptEngine-Runtime-Core">isStopped	^ self state = #stopped</body>

<body package="JavascriptEngine-Runtime-Core">isSuspended	^ self state = #suspended</body>
</methods>

<methods>
<class-id>JSE.JSEThread</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">doStop	" Stop running the script "	self state: #stopped.	JSEStopThreadNotification raiseSignal.</body>

<body package="JavascriptEngine-Runtime-Core">doSuspend	" Stop running the script "	self state: #suspended.	suspendSemaphore wait</body>

<body package="JavascriptEngine-Runtime-Core">threadProcessDo: aBlock 	" Perform the block in the thread process environment  "	| lookup sem |	lookup := nil.	sem := Semaphore new.	self process interruptWith: 		[	JSECurrentExecutionEnvironment use: self executionEnvironment during: [ lookup := aBlock value ].			sem signal		].	sem wait.	^ lookup</body>

<body package="JavascriptEngine-Runtime-Core">wakeUp	[ suspendSemaphore notEmpty ] whileTrue: [ suspendSemaphore signal ].</body>
</methods>

<methods>
<class-id>JSE.JSEThread</class-id> <category>controlling</category>

<body package="JavascriptEngine-Runtime-Core">continue	self continue: nil.</body>

<body package="JavascriptEngine-Runtime-Core">continue: stepKind 	stepKind notNil 		ifTrue: [ self executionEnvironment step: stepKind ]		ifFalse: [ self executionEnvironment resetStep ].	self state: #running.	self wakeUp.</body>

<body package="JavascriptEngine-Runtime-Core">stop	" Stop the thread. Can be sent from any process "	self executionEnvironment debugEnvironment ifNotNil: [: debugEnvironment |  debugEnvironment addThreadToControl: self action: #doStop ].</body>

<body package="JavascriptEngine-Runtime-Core">suspend	" Suspend the thread. Can be sent from any process "	self executionEnvironment debugEnvironment ifNotNil: [: debugEnvironment | debugEnvironment addThreadToControl: self action: #doSuspend ]</body>
</methods>

<methods>
<class-id>JSE.JSEThread class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">executionEnvironment: aExecutionEnvironment 	^ self new 		executionEnvironment: aExecutionEnvironment;		yourself</body>

<body package="JavascriptEngine-Runtime-Core">script: aScript executionEnvironment: aExecutionEnvironment 	^ self new script: aScript;		executionEnvironment: aExecutionEnvironment;		yourself</body>
</methods>

<methods>
<class-id>JSE.JSEUndefinedSection</class-id> <category>testing</category>

<body package="JavascriptEngine-Runtime-Core">isUndefinedSection	^ true</body>
</methods>

<methods>
<class-id>JSE.JSEUndefinedSection</class-id> <category>evaluating</category>

<body package="JavascriptEngine-Runtime-Core">executeIn: anExecutionContext 	^ JSEUndefined singleton</body>

<body package="JavascriptEngine-Runtime-Core">getValueIn: anExecutionContext 	^ JSEUndefined singleton</body>
</methods>

<methods>
<class-id>JSE.JSEBreakpoint</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">condition	^ condition</body>

<body package="JavascriptEngine-Runtime-Core">condition: aCondition 	condition := aCondition.</body>

<body package="JavascriptEngine-Runtime-Core">installedLineNumber	^ installedLineNumber</body>

<body package="JavascriptEngine-Runtime-Core">installedLineNumber: aInstalledLineNumber 	installedLineNumber := aInstalledLineNumber.</body>

<body package="JavascriptEngine-Runtime-Core">lineNumber	^ lineNumber</body>

<body package="JavascriptEngine-Runtime-Core">lineNumber: aLine 	lineNumber := aLine.</body>

<body package="JavascriptEngine-Runtime-Core">script	^ script</body>

<body package="JavascriptEngine-Runtime-Core">script: aScript 	script := aScript.</body>
</methods>

<methods>
<class-id>JSE.JSEBreakpoint class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">script: aScript lineNumber: aLine condition: aCondition 	^ self new script: aScript; lineNumber: aLine; condition: aCondition ; yourself</body>
</methods>

<methods>
<class-id>JSE.JSEObjectReference</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">object	^ object</body>

<body package="JavascriptEngine-Runtime-Core">object: aObject 	object := aObject.</body>
</methods>

<methods>
<class-id>JSE.JSEObjectReference class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">object: aObject 	^ self new object: aObject ; yourself</body>
</methods>

<methods>
<class-id>JSE.JSEAccessorProperty</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">checkOverwriteWith: otherProperty throw: throw	(super checkOverwriteWith: otherProperty throw: throw)		ifFalse: [ ^ false ].	(otherProperty isAccessor and: [ self isConfigurableOrNil == false ])		ifTrue: [			(otherProperty setFunctionOrNil notNil and: [ self setFunctionOrNil ~~ otherProperty setFunctionOrNil ])				ifTrue: [ 					throw ifTrue: [ JSETypeError raiseSignal: ('Cannot overwrite set accessor of non-configurable property "&lt;1s&gt;"' expandMacrosWith: self nameString) ].					^ false				].			(otherProperty getFunctionOrNil notNil and: [ self getFunctionOrNil ~~ otherProperty getFunctionOrNil ])				ifTrue: [ 					throw ifTrue: [ JSETypeError raiseSignal: ('Cannot overwrite get accessor of non-configurable property &lt;1s&gt;' expandMacrosWith: self nameString) ].					^ false				].		].	^ true</body>

<body package="JavascriptEngine-Runtime-Core">getFunctionOrNil	^ getFunction</body>

<body package="JavascriptEngine-Runtime-Core">setFunctionOrNil	^ setFunction</body>

<body package="JavascriptEngine-Runtime-Core">setUndefinedFieldsOf: otherProperty 	super setUndefinedFieldsOf: otherProperty.	otherProperty isAccessor 		ifTrue: 		[	otherProperty setFunctionOrNil isNil 				ifTrue: [ self setFunctionOrNil ifNotNil: [: f | otherProperty setFunction: f ]].			otherProperty getFunctionOrNil isNil 				ifTrue: [ self getFunctionOrNil ifNotNil: [: f | otherProperty getFunction: f ]]		].</body>

<body package="JavascriptEngine-Runtime-Core">setUndefinedFieldsToDefaults	super setUndefinedFieldsToDefaults.	self getFunctionOrNil isNil 		ifTrue: [ self getFunction: self undefined ].	self setFunctionOrNil isNil 		ifTrue: [ self setFunction: self undefined ].</body>
</methods>

<methods>
<class-id>JSE.JSEAccessorProperty</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">getFunction	^ getFunction ifNil: [ self undefined ]</body>

<body package="JavascriptEngine-Runtime-Core">getFunction: aGetFunction 	(aGetFunction isNil or: [ aGetFunction isCallable or: [ aGetFunction  isUndefined ]])		ifTrue: [ getFunction := aGetFunction ]		ifFalse: [ JSETypeError raiseSignal: ('Get accessor of property "&lt;1s&gt;" is not a function' expandMacrosWith: self nameString) ].</body>

<body package="JavascriptEngine-Runtime-Core">getPropertyValueOf: anObject 	^ self getFunctionOrNil 		ifNotNil: 		[: f |			f isUndefined 				ifTrue: [ f ]				ifFalse: [ f callWithThis: anObject ]		]		ifNil: [ self undefined ]</body>

<body package="JavascriptEngine-Runtime-Core">setFunction	^ setFunction ifNil: [self undefined ]</body>

<body package="JavascriptEngine-Runtime-Core">setFunction: aSetFunction 	(aSetFunction isNil or: [ aSetFunction isCallable or: [ aSetFunction isUndefined ]])		ifTrue: [ setFunction := aSetFunction ]		ifFalse: [ JSETypeError raiseSignal: ('Set accessor of property "&lt;1s&gt;" is not a function' expandMacrosWith: self nameString) ].</body>

<body package="JavascriptEngine-Runtime-Core">setPropertyValue: aValue of: anObject 	self setFunction == self undefined 		ifTrue: [ JSEError raiseSignal: ('Set accessor "&lt;1s&gt;" is undefined' expandMacrosWith: self nameString) ].	self setFunction callWithThis: anObject argument: aValue.</body>
</methods>

<methods>
<class-id>JSE.JSEAccessorProperty</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">initializeFromDescriptorObject: aJSEObject 	" 8.10.5 ToPropertyDescriptor ( Obj ) "	| check |	super initializeFromDescriptorObject: aJSEObject.	check := false.	( aJSEObject getOrNil: #get ) ifNotNil: 		[: g |			check := true.			self getFunction: g.		].	( aJSEObject getOrNil: #set ) ifNotNil: 		[: s |			check := true.			self setFunction: s.		].	check 		ifTrue: 		[	#( #value #writable ) do: 				[: fieldName | ( aJSEObject getOrNil: fieldName ) 						ifNotNil: [: v | JSETypeError raiseSignal: ( 'Property descriptor may not have a "&lt;1s&gt;" field' expandMacrosWith: fieldName )]				]		].</body>

<body package="JavascriptEngine-Runtime-Core">objectFromPropertyDescriptor	| object |	object := super objectFromPropertyDescriptor.	object put: #get value: (self getFunction ifNil: [ JSEUndefined singleton ]) throw: false.	object put: #set value: (self setFunction ifNil: [ JSEUndefined singleton ]) throw: false.	^ object</body>
</methods>

<methods>
<class-id>JSE.JSEAccessorProperty</class-id> <category>testing</category>

<body package="JavascriptEngine-Runtime-Core">areAllFieldsAbsent	^ super areAllFieldsAbsent and: [ self getFunctionOrNil isNil and: [ self setFunctionOrNil isNil ]]</body>

<body package="JavascriptEngine-Runtime-Core">canBeOverwrittenInObjectInitialiserBy: anotherProperty strict: strict 	anotherProperty isData 		ifTrue: [ ^ false ].	( anotherProperty isAccessor and: 		[( self getFunction isUndefined not and: [ anotherProperty getFunction isUndefined not ]) 				or: [ self setFunction isUndefined not and: [ anotherProperty setFunction isUndefined not ]]		]) 		ifTrue: [ ^ false ].	^ super canBeOverwrittenInObjectInitialiserBy: anotherProperty strict: strict</body>

<body package="JavascriptEngine-Runtime-Core">canPutValue	^ self setFunction ~~ self undefined</body>

<body package="JavascriptEngine-Runtime-Core">isAccessor	^ true</body>
</methods>

<methods>
<class-id>JSE.JSEAccessorProperty</class-id> <category>comparing</category>

<body package="JavascriptEngine-Runtime-Core">sameFieldsAs: anotherProperty	^ (super sameFieldsAs: anotherProperty)		and: [ self getFunctionOrNil == anotherProperty getFunctionOrNil		and: [ self setFunctionOrNil == anotherProperty setFunctionOrNil ]]</body>
</methods>

<methods>
<class-id>JSE.JSEAccessorProperty class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">name: aName getFunction: aGetFunction 	^ self new		name: aName;		getFunction: aGetFunction;		isEnumerable: true;		isConfigurable: true;		yourself</body>

<body package="JavascriptEngine-Runtime-Core">name: aName getFunction: aGetFunction setFunction: aSetFunction 	^ self new		name: aName;		getFunction: aGetFunction;		setFunction: aSetFunction ;		isEnumerable: true;		isConfigurable: true;		yourself</body>

<body package="JavascriptEngine-Runtime-Core">name: aName setFunction: aSetFunction 	^ self new		name: aName;		setFunction: aSetFunction;		isEnumerable: true;		isConfigurable: true;		yourself</body>
</methods>

<methods>
<class-id>JSE.JSEDeclarativeEnvironmentRecord</class-id> <category>bindings</category>

<body package="JavascriptEngine-Runtime-Core">createMutableBinding: identifier deletable: deletable 	self createBinding: identifier immutable: false deletable: deletable</body>

<body package="JavascriptEngine-Runtime-Core">deleteBinding: identifier 	| binding |	binding := self bindings at: identifier ifAbsent: [ nil ].	^ ( binding notNil and: [ binding deletable ]) 		ifTrue: 		[	self bindings removeKey: identifier.			true		]		ifFalse: [ false ]</body>

<body package="JavascriptEngine-Runtime-Core">getBindingValue: identifier strict: strict 	| binding |	binding := self bindings at: identifier ifAbsent: [ nil ].	binding isNil 		ifTrue: 		[	JSEAssertionNotification 				raiseSignal: ( 'Binding "&lt;1s&gt;" is not defined in this context' expandMacrosWith: identifier displayString printString ).			^ JSEUndefined singleton		].	( binding immutable and: [ binding value isUndefined ]) 		ifTrue: 		[	strict 				ifTrue: [ self class raiseUndefinedReference: identifier ].			^ JSEUndefined singleton		].	^ binding value</body>

<body package="JavascriptEngine-Runtime-Core">hasBinding: identifier	^ bindings notNil and: [ bindings includesKey: identifier ]</body>

<body package="JavascriptEngine-Runtime-Core">implicitThisValue	^ JSEUndefined singleton</body>

<body package="JavascriptEngine-Runtime-Core">setMutableBinding: identifier value: value strict: strict 	| binding |	binding := self bindings at: identifier ifAbsent: [ nil ].	binding isNil 		ifTrue: 		[	self class undefined: identifier.			^ self		].	binding immutable 		ifTrue: 		[	strict 				ifTrue: 				[	JSEAssertionNotification raiseSignal: ( 'Binding "&lt;1s&gt;" is immutable' expandMacrosWith: identifier displayString printString )				]		]		ifFalse: [ binding value: value ].</body>
</methods>

<methods>
<class-id>JSE.JSEDeclarativeEnvironmentRecord</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">bindings	bindings isNil ifTrue: [ bindings := Dictionary new ].	^ bindings</body>

<body package="JavascriptEngine-Runtime-Core">createBinding: identifier 	| binding |	( self hasBinding: identifier ) 		ifTrue: 		[	self class alreadyDefined: identifier.			^ nil		].	binding := JSEBinding identifier: identifier.	self bindings at: identifier put: binding.	^ binding</body>

<body package="JavascriptEngine-Runtime-Core">createBinding: identifier immutable: immutable deletable: deletable	| binding |	binding := self createBinding: identifier.	binding isNil ifTrue: [ ^ nil ].	binding value: JSEUndefined singleton.	binding immutable: immutable.	binding deletable: deletable.	^ binding</body>
</methods>

<methods>
<class-id>JSE.JSESingletonValue</class-id> <category>comparing</category>

<body package="JavascriptEngine-Runtime-Core">sameValueAsObjectOfSameType: anotherSingleton	^ true</body>
</methods>

<methods>
<class-id>JSE.JSESingletonValue class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'A primitive singleton.Using singletons is just an optimization. The runtime does not require that primitives of this class are singletons.'</body>

<body package="JavascriptEngine-Runtime-Core">value	^ self singleton value</body>
</methods>

<methods>
<class-id>JSE.JSESingletonValue class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">singleton	singleton isNil 		ifTrue: [ singleton := self new ].	^ singleton</body>
</methods>

<methods>
<class-id>JSE.JSESingletonValue class</class-id> <category>testing</category>

<body package="JavascriptEngine-Runtime-Core">isAbstract	^ self == JSESingletonValue</body>
</methods>

<methods>
<class-id>JSE.JSEString</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">parseFloat	" 15.1.2.3 parseFloat (string) "	^ [	| numberValue stream |		stream := self streamForNumberParsing.		numberValue := JSEParseFloatParser default parse: stream upToEnd.		JSENumber value: numberValue	] on: JSESyntaxError do: [ : ex |		JSENumber nan 	]</body>

<body package="JavascriptEngine-Runtime-Core">parseIntegerWithRadix: radix 	" 15.1.2.2 parseInt (string , radix) "	^ self parseIntegerWithRadixInteger: radix toSignedInteger32Value</body>

<body package="JavascriptEngine-Runtime-Core">toBooleanValue	^ self value notEmpty</body>

<body package="JavascriptEngine-Runtime-Core">toObject	^ JSEPrimitiveObject primitiveValue: self</body>

<body package="JavascriptEngine-Runtime-Core">toString	^ self</body>

<body package="JavascriptEngine-Runtime-Core">toStringValue	^ self value</body>
</methods>

<methods>
<class-id>JSE.JSEString</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">value	^ value</body>

<body package="JavascriptEngine-Runtime-Core">value: aStringValue 	value := aStringValue jseAsStringValue</body>
</methods>

<methods>
<class-id>JSE.JSEString</class-id> <category>prototype functions - string</category>

<body package="JavascriptEngine-Runtime-Core">stringCharAt: position	| i |	i := position toIntegerValue + 1.	^ (1&lt;= i and: [ i &lt;= self value size ])		ifTrue: [ String with: (self value at: i) ]		ifFalse: [ String new ]</body>

<body package="JavascriptEngine-Runtime-Core">stringCharCodeAt: position 	| i |	i := position toIntegerValue + 1.	^ ( 1 &lt;= i and: [ i &lt;= self value size ]) 		ifTrue: [( self value at: i ) codePoint ]		ifFalse: [ JSENumber nan ]</body>

<body package="JavascriptEngine-Runtime-Core">stringConcat: strings	| stream |	stream := String new writeStream.	stream  nextPutAll: self value.	strings do: [ : each | stream nextPutAll: each toStringValue ].	^ stream contents</body>

<body package="JavascriptEngine-Runtime-Core">stringIndexOf: searchString position: position 	| index start substring |	substring := searchString toStringValue.	start := position toIntegerValue + 1 max: 1.	^ start &lt;= self value size 		ifTrue: 		[	substring notEmpty 				ifTrue: 				[	index := self value indexOfSubCollection: substring startingAt: start.					index - 1				]				ifFalse: [ 0 ]		]		ifFalse: [ -1 ]</body>

<body package="JavascriptEngine-Runtime-Core">stringLastIndexOf: searchString position: position 	| index start substring |	substring := searchString toStringValue.	start := ( position isUndefined or: [ position toNumberValue isNaN ]) 			ifTrue: [ self value size ]			ifFalse: [ position toIntegerValue + 1 min: self value size ].	^ start &gt;= 1 		ifTrue: 		[	substring notEmpty 				ifTrue: 				[	index := self value jseLastIndexOfSubCollection: substring endingAt: start.					index &gt; 0 						ifTrue: [ index - 1 ]						ifFalse: [ -1 ]				]				ifFalse: [ self value size ]		]		ifFalse: [ -1 ]</body>

<body package="JavascriptEngine-Runtime-Core">stringLocaleCompare: anotherObject 	^ JSEPlatform localeCompareString: self value with: anotherObject toStringValue</body>

<body package="JavascriptEngine-Runtime-Core">stringMatch: regexp executionContext: executionContext 	^ regexp toRegExp match: self</body>

<body package="JavascriptEngine-Runtime-Core">stringReplace: searchValue with: replaceValue executionContext: executionContext 	| searchCriteria stream start replacementBlock |	searchCriteria := searchValue isRegExp 			ifTrue: [ searchValue ]			ifFalse: [ searchValue toString ].	stream := String new writeStream.	start := 1.	replacementBlock := self replacementBlockFor: replaceValue executionContext: executionContext.	searchCriteria 		matchesIn: self value		do: 		[: matchedString : captures : offset | | s |			s := replacementBlock value: matchedString value: captures value: offset.			offset &gt;= start 				ifTrue: 				[	stream nextPutAll: ( self value copyFrom: start to: offset - 1 ).					start := offset + matchedString size				].			stream nextPutAll: s		].	start &lt;= self length 		ifTrue: [ stream nextPutAll: ( self value copyFrom: start to: self length )].	^ stream contents</body>

<body package="JavascriptEngine-Runtime-Core">stringSearch: regexp executionContext: executionContext 	^ regexp toRegExp search: self</body>

<body package="JavascriptEngine-Runtime-Core">stringSliceFrom: start to: end 	| slicedString |	slicedString := self sliceElements: self value length: self value size from: start to: end.	^ self class value: slicedString</body>

<body package="JavascriptEngine-Runtime-Core">stringSplit: separator limit: limit 	| limitValue |	limitValue := limit isUndefined 			ifTrue: [ nil ]			ifFalse: [ limit toUnsignedInteger32Value ].	^ separator isRegExp 		ifTrue: [ self splitRegExp: separator limit: limitValue ]		ifFalse: [ self splitString: separator toStringValue limit: limitValue ]</body>

<body package="JavascriptEngine-Runtime-Core">stringSubstrFrom: start length: length	| startInteger lengthValue stringLength finalStart finalLength finalEnd |	startInteger := start toIntegerValue.	lengthValue := length isUndefined ifTrue: [ SmallInteger maxVal ] ifFalse: [ length toIntegerValue max: 0].	stringLength := self length.	finalStart := startInteger &gt;=  0 ifTrue: [ startInteger ] ifFalse: [ stringLength  + startInteger  max: 0 ].	finalLength := lengthValue min: stringLength - finalStart.	finalEnd := finalStart + finalLength - 1.	^ self value copyFrom: finalStart + 1 to: finalEnd + 1</body>

<body package="JavascriptEngine-Runtime-Core">stringSubstringFrom: start to: end 	| length finalStart finalEnd from to |	length := self length.	finalStart := ( start toIntegerValue max: 0 ) min: length.	finalEnd := end isUndefined 			ifTrue: [ length ]			ifFalse: [( end toIntegerValue max: 0 ) min: length ].	from := finalStart min: finalEnd.	to := finalEnd max: finalStart.	^ self value copyFrom: from + 1 to: to</body>

<body package="JavascriptEngine-Runtime-Core">stringToLocaleLowerCase	^ self value asLowercase</body>

<body package="JavascriptEngine-Runtime-Core">stringToLocaleUpperCase	^ self value asUppercase</body>

<body package="JavascriptEngine-Runtime-Core">stringToLowerCase	^ self value asLowercase</body>

<body package="JavascriptEngine-Runtime-Core">stringToUpperCase	^ self value asUppercase</body>

<body package="JavascriptEngine-Runtime-Core">stringTrim	^ self value jseTrim</body>
</methods>

<methods>
<class-id>JSE.JSEString</class-id> <category>internal - prototype</category>

<body package="JavascriptEngine-Runtime-Core">createPrototypeObjectForGlobalObject: globalObject 	| prototype |	prototype := super createPrototypeObjectForGlobalObject: globalObject .	prototype primitiveValue: (self class value: '').	prototype uncheckedAddProperty: (JSEDataProperty name: #length).	^ prototype</body>
</methods>

<methods>
<class-id>JSE.JSEString</class-id> <category>internal</category>

<body package="JavascriptEngine-Runtime-Core">elementPropertyOrNilAtIndex: aZeroBasedIndex 	" Returns the property at the 0-based indexed "	| element |	element := self elementOrNilAtIndex: aZeroBasedIndex.	^ element notNil 		ifTrue: 		[	" create a volatile property "			JSEDataProperty name: aZeroBasedIndex asJSEPropertyName value: element isWritable: true isEnumerable: true isConfigurable: true		]		ifFalse: [ nil ]</body>

<body package="JavascriptEngine-Runtime-Core">getValueOfDataProperty: aDataProperty 	" The #length property represents the current length of the string.	It is not writable, unlike the length of an array "	^ aDataProperty name = #length 		ifTrue: [ self length asJSEObject  ]		ifFalse: [ super getValueOfDataProperty: aDataProperty  ]</body>
</methods>

<methods>
<class-id>JSE.JSEString</class-id> <category>converting-private</category>

<body package="JavascriptEngine-Runtime-Core">parseIntegerWithRadixInteger: radixInteger 	" 15.1.2.2 parseInt (string , radix) "	| stream sign stripPrefix radix position mathInt v |	stream := self streamForNumberParsing.	" sign "	sign := stream peek = $- 			ifTrue: 			[	stream next.				-1			]			ifFalse: 			[	stream peek = $+ 					ifTrue: 					[	stream next.						1					]					ifFalse: [ 1 ]			].	" radix "	stripPrefix := true.	radixInteger ~= 0 		ifTrue: 		[	( radixInteger &lt; 2 or: [ radixInteger &gt; 36 ]) 				ifTrue: [ ^ JSENumber nan ].			stripPrefix := radixInteger = 16.			radix := radixInteger		]		ifFalse: [ radix := 10 ].	" skip 0x / 0X "	stripPrefix 		ifTrue: 		[	position := stream position.			( stream next = $0 and: [ stream peek = $x or: [ stream peek = $X ]]) 				ifTrue: 				[	radix := 16.					stream next				]				ifFalse: [ stream position: position ]		].	" read integer "	mathInt := nil.	[ stream atEnd not and: [( v := stream next jseAlphaNumValueWithRadix: radix ) notNil ]] whileTrue: 		[	mathInt := mathInt notNil 					ifTrue: [ mathInt * radix + v ]					ifFalse: [ v ]		].	^ mathInt notNil 		ifTrue: [ JSENumber value: mathInt * sign ]		ifFalse: 		[	" did not parse anything "			JSENumber nan		]</body>

<body package="JavascriptEngine-Runtime-Core">streamForNumberParsing	| stream skipped |	stream := self value readStream.	" remove line terminators and whitespaces (StrWhiteSpaceChar)"	skipped := JSEAbstractLexicalParser whiteSpaceCodeValues , JSEAbstractLexicalParser lineTerminatorCodeUnitValues.	[ stream atEnd not and: [ skipped includes: stream peek codePoint ]] whileTrue: [ stream next ].	^stream</body>
</methods>

<methods>
<class-id>JSE.JSEString</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">length	^ self value size</body>

<body package="JavascriptEngine-Runtime-Core">matchesIn: aString do: aBlock 	" Utility method for implementing replace() "	| matchString matchIndex |	matchString := self value.	matchIndex := aString indexOfSubCollection: matchString startingAt: 1.	matchIndex &gt; 0 		ifTrue: [ aBlock value: matchString value: #( ) value: matchIndex ].</body>
</methods>

<methods>
<class-id>JSE.JSEString</class-id> <category>internal - JSON</category>

<body package="JavascriptEngine-Runtime-Core">asStringifyPropertyName	^ self value</body>

<body package="JavascriptEngine-Runtime-Core">asStringifySpace	| string |	string := self value.	^ string notEmpty 		ifTrue: 		[	string size &gt; 10 				ifTrue: [ string := string copyFrom: 1 to: 10 ].			string		]		ifFalse: [ nil ]</body>

<body package="JavascriptEngine-Runtime-Core">stringifyReplacerFunction: replacerFunction propertyList: propertyList gap: gap indent: indent stack: stack executionEnvironment: executionEnvironment 	" escape special characters "	^ self value jseJsonLiteral</body>
</methods>

<methods>
<class-id>JSE.JSEString</class-id> <category>internal - array</category>

<body package="JavascriptEngine-Runtime-Core">arrayElements	" return each character as string "	| elements |	elements := Array new: self value size.	1 to: self value size do: [ : i |		elements at: i put: (String with: (self value at: i)) asJSEObject.	].	^ elements</body>
</methods>

<methods>
<class-id>JSE.JSEString</class-id> <category>references</category>

<body package="JavascriptEngine-Runtime-Core">elementAtIndex: index 	^ ( self elementOrNilAtIndex: index ) ifNil: [ self undefined ]</body>

<body package="JavascriptEngine-Runtime-Core">elementOrNilAtIndex: index 	^ ( 0 &lt;= index and: [ index &lt; self length ]) 		ifTrue: [( String with: ( self value at: index + 1 )) asJSEObject ]		ifFalse: [ nil ]</body>

<body package="JavascriptEngine-Runtime-Core">getReferenceValue: referenceName strict: strict 	^ (( self indexOfPropertyName: referenceName ) ifNotNil: [: index | self elementOrNilAtIndex: index ]) 		ifNil: [ super getReferenceValue: referenceName strict: strict ]</body>
</methods>

<methods>
<class-id>JSE.JSEString</class-id> <category>functions - private</category>

<body package="JavascriptEngine-Runtime-Core">replacementBlockFor: replaceValue executionContext: executionContext 	" A block that computes the replacement for the replace() function "	| replacementString |	^ replaceValue isCallable 		ifTrue: 		[	" the function returns the replacement "			[: matchedString : captures : offset | | arguments |				arguments := ( Array with: matchedString asJSEObject ) , (captures collect: [ : c | c asJSEObject ]) , ( Array with: ( offset - 1 ) asJSEObject with: self ).				( replaceValue callWithThis: self undefined arguments: arguments executionEnvironment: executionContext executionEnvironment ) 					toStringValue			]		]		ifFalse: 		[	replacementString := replaceValue toStringValue.			" check for symbolic substitutions "			(replacementString includes: $$)				ifTrue: [					self substitutionBlockFor: replacementString				]				ifFalse:[					" just a plain string "					[: matchedString : captures : offset | replacementString ]				].		]</body>

<body package="JavascriptEngine-Runtime-Core">splitRegExp: aRegExp limit: limitValue 	" Implementation of split() for regular expression separators "	^JSEArray withElements: ((aRegExp regularExpression split: self value limit: limitValue) collect: [ : element | element asJSEObject ])</body>

<body package="JavascriptEngine-Runtime-Core">splitString: separatorString limit: limitValue 	" Implementation of split() for string separators "	| length elements string lastIdx idx lastToken token |	separatorString isEmpty 		ifTrue: 		[	length := limitValue notNil 				ifTrue: [ self value size min: limitValue ]				ifFalse: [ self value size ].			elements := Array new: length.			1 to: length do: [: i | elements at: i put: (( String with: ( self value at: i )) asJSEObject )]		]		ifFalse: 		[	elements := OrderedCollection new.			string := self value.			string notEmpty 				ifTrue: 				[	lastIdx := 0.					[( limitValue isNil or: [ limitValue &gt; elements size ]) 							ifTrue: 							[	idx := string findString: separatorString startingAt: lastIdx + 1.								idx &gt; 0							]							ifFalse: [ false ]					] whileTrue: 						[	token := idx == ( lastIdx + 1 ) 									ifTrue: [ '' ]									ifFalse: [ string copyFrom: lastIdx + 1 to: idx - 1 ].							elements add: token asJSEObject.							lastIdx := idx + separatorString size - 1.						].					( limitValue isNil or: [ limitValue &gt; elements size ]) 						ifTrue: 						[	lastToken := lastIdx = string size 									ifTrue: [ '' ]									ifFalse: [ string copyFrom: lastIdx + 1 to: string size ].							elements add: lastToken asJSEObject						]				]		].	^ JSEArray withElements: elements</body>

<body package="JavascriptEngine-Runtime-Core">substitutionBlockFor: replacementString 	" Returns a block that replaces symbolic substitutions  "	| replacementBlocks stream |	replacementBlocks := OrderedCollection new.	stream := replacementString readStream.	" transform substrings and symbols into blocks "	[ stream atEnd ] whileFalse: 		[ | s substitutionBlock |			s := stream upTo: $$.			s notEmpty 				ifTrue: [ replacementBlocks add: [: matchedString : captures : offset | s ]].			substitutionBlock := self symbolSubstitutionBlockFrom: stream.			substitutionBlock notNil 				ifTrue: [ replacementBlocks add: substitutionBlock ]		].	^ [: matchedString : captures : offset | | replacementStream |		replacementStream := String new writeStream.		replacementBlocks do: [: block | replacementStream nextPutAll: ( block value: matchedString value: captures value: offset )].		replacementStream contents	]</body>

<body package="JavascriptEngine-Runtime-Core">symbolSubstitutionBlockFrom: stream 	" returns a string substition block for the next symbol, or nil if there is no symbol on the stream "	| char char2 oneDigitIndex twoDigitIndex |	char := stream peek.	char isNil 		ifTrue: 		[	stream next.			^ nil		].	char = $$ 		ifTrue: 		[	stream next.			^ [: matchedString : captures : offset | '$' ]		].	char = $&amp; 		ifTrue: 		[	stream next.			^ [: matchedString : captures : offset | matchedString ]		].	char = $` 		ifTrue: 		[	stream next.			^ [: matchedString : captures : offset | self value copyFrom: 1 to: offset - 1 ]		].	char = $' 		ifTrue: 		[	stream next.			^ [: matchedString : captures : offset | self value copyFrom: offset + matchedString size to: self value size ]		].	char isDigit 		ifTrue: 		[	stream next.			oneDigitIndex := char digitValue.			char2 := stream peek.			twoDigitIndex := ( char2 notNil and: [ char2 isDigit ]) 					ifTrue: 					[	stream next.						char2 digitValue + ( oneDigitIndex * 10 )					]					ifFalse: [ nil ].			( oneDigitIndex &gt; 0 or: [ twoDigitIndex notNil ]) 				ifTrue: 				[	^ [: matchedString : captures : offset | | s |						( twoDigitIndex notNil and: [ twoDigitIndex &lt;= captures size ]) 							ifTrue: [ captures at: twoDigitIndex ]							ifFalse: 							[	s := oneDigitIndex &lt;= captures size 										ifTrue: [ captures at: oneDigitIndex ]										ifFalse: [ '' ].								twoDigitIndex notNil 									ifTrue: [ s := s copyWith: char2 ].								s							]					]				]		].	" not a symbol "	^ [: matchedString : captures : offset | '$' ]</body>
</methods>

<methods>
<class-id>JSE.JSEString</class-id> <category>comparing - private</category>

<body package="JavascriptEngine-Runtime-Core">equalsObjectOfDifferentType: anotherObject	" see 11.9.3 The Abstract Equality Comparison Algorithm "	anotherObject isJSENumber		ifTrue: [ ^ self toNumber equals: anotherObject ].	anotherObject isJSEBoolean		ifTrue: [ ^ self equals: anotherObject toNumber ].	anotherObject isObject		ifTrue: [ ^ self equals: anotherObject toPrimitive ].	^ false</body>
</methods>

<methods>
<class-id>JSE.JSEString</class-id> <category>internal - testing</category>

<body package="JavascriptEngine-Runtime-Core">isJSEString	^ true</body>
</methods>

<methods>
<class-id>JSE.JSEString class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">value: aString	^ self new value: aString ; yourself</body>
</methods>

<methods>
<class-id>JSE.JSEString class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'A string primitive'</body>

<body package="JavascriptEngine-Runtime-Core">objectName	^ #String</body>

<body package="JavascriptEngine-Runtime-Core">typeOfSymbol	^ #string</body>
</methods>

<methods>
<class-id>JSE.JSEString class</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">toNumberValue: aString	^ [ JSENumericStringParser default parse: aString ] on: JSESyntaxError do: [: ex | JSEPlatform nanValue ]</body>
</methods>

<methods>
<class-id>JSE.JSENumber</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">value	^ value</body>

<body package="JavascriptEngine-Runtime-Core">value: aNumberValue 	value := aNumberValue jseAsNumberValue.</body>
</methods>

<methods>
<class-id>JSE.JSENumber</class-id> <category>testing</category>

<body package="JavascriptEngine-Runtime-Core">isFinite	^ self value jseIsFinite</body>

<body package="JavascriptEngine-Runtime-Core">isInfinity	^ value isInfinity</body>

<body package="JavascriptEngine-Runtime-Core">isNaN	^ value isNaN</body>

<body package="JavascriptEngine-Runtime-Core">isNegativeZero	^ self value jseIsNegativeZero</body>

<body package="JavascriptEngine-Runtime-Core">isPositiveZero	^ self value jseIsPositiveZero</body>
</methods>

<methods>
<class-id>JSE.JSENumber</class-id> <category>operators - private</category>

<body package="JavascriptEngine-Runtime-Core">divideFromNumber: aNumber 	" see 11.5.2 Applying the / Operator	note: negative zero is not supported "	| v1 v2 |	v1 := aNumber value.	v2 := self value.	( v1 isNaN or: [ v2 isNaN ]) 		ifTrue: [ ^ JSENumber nan ].	v1 isInfinity 		ifTrue: 		[	v2 isInfinity 				ifTrue: [ ^ JSENumber nan ].			^ JSENumber infinity: v1 jseIsPositive = v2 jseIsPositive		]		ifFalse: 		[	( v1 isZero and: [ v2 isZero ]) 				ifTrue: [ ^ JSENumber nan ].			v2 isInfinity 				ifTrue: [ ^ JSENumber value: 0 ].			( v1 isZero not and: [ v2 isZero ]) 				ifTrue: 				[	^ JSENumber infinity: v1 jseIsPositive = v2 jseIsPositive				].			^ self class value: v1 / v2		]</body>

<body package="JavascriptEngine-Runtime-Core">moduloFromNumber: aNumber	| v1 v2 |	v1 := aNumber value.	v2 := self value.	( v1 isNaN or: [ v2 isNaN ]) 		ifTrue: [ ^ JSENumber nan ].	(v1 isInfinity or: [ v2 isZero ])		ifTrue: [ ^ JSENumber nan ].	v2 isInfinity		ifTrue: [ ^ v1 ].	^ self class value: (v1 rem: v2)</body>

<body package="JavascriptEngine-Runtime-Core">multiplyFromNumber: aNumber	^ self class value: aNumber value * self value</body>
</methods>

<methods>
<class-id>JSE.JSENumber</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">toBooleanValue	^ value isZero not and: [ value isNaN not ]</body>

<body package="JavascriptEngine-Runtime-Core">toNumber	^ self</body>

<body package="JavascriptEngine-Runtime-Core">toObject	^ JSEPrimitiveObject primitiveValue: self</body>

<body package="JavascriptEngine-Runtime-Core">toStringValue	^ self class toStringValue: self value</body>
</methods>

<methods>
<class-id>JSE.JSENumber</class-id> <category>internal - prototype</category>

<body package="JavascriptEngine-Runtime-Core">createPrototypeObjectForGlobalObject: globalObject 	| prototype |	prototype := super createPrototypeObjectForGlobalObject: globalObject .	prototype primitiveValue: (self class value: 0).	^ prototype</body>
</methods>

<methods>
<class-id>JSE.JSENumber</class-id> <category>operators</category>

<body package="JavascriptEngine-Runtime-Core">negated	^ self isNaN 		ifTrue: [ self ]		ifFalse: [ self class value: self value jseNegated ]</body>
</methods>

<methods>
<class-id>JSE.JSENumber</class-id> <category>internal - JSON</category>

<body package="JavascriptEngine-Runtime-Core">asStringifyPropertyName	^ self toStringValue</body>

<body package="JavascriptEngine-Runtime-Core">asStringifySpace	| integer |	integer := self toIntegerValue.	^ integer &gt; 0 		ifTrue: 		[( String new: ( integer min: 10 ))				atAllPut: Character space;				yourself		]		ifFalse: [ nil ]</body>

<body package="JavascriptEngine-Runtime-Core">stringifyReplacerFunction: replacerFunction propertyList: propertyList gap: gap indent: indent stack: stack executionEnvironment: executionEnvironment 	^ self isFinite		ifTrue: [ self toStringValue ]		ifFalse: [ JSENull singleton toStringValue ]</body>
</methods>

<methods>
<class-id>JSE.JSENumber</class-id> <category>internal</category>

<body package="JavascriptEngine-Runtime-Core">sameValueAs: anotherAbstractObject 	^ ( super sameValueAs: anotherAbstractObject ) 		ifTrue: 		[	( self isPositiveZero and: [ anotherAbstractObject isNegativeZero ]) 				ifTrue: [ ^ false ].			( self isNegativeZero and: [ anotherAbstractObject isPositiveZero ]) 				ifTrue: [ ^ false ].			true		]		ifFalse: [ false ]</body>
</methods>

<methods>
<class-id>JSE.JSENumber</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">asPropertyName	^  self toNumberValue asJSEPropertyName</body>
</methods>

<methods>
<class-id>JSE.JSENumber</class-id> <category>comparing - private</category>

<body package="JavascriptEngine-Runtime-Core">equalsObjectOfDifferentType: anotherObject	" see 11.9.3 The Abstract Equality Comparison Algorithm "	anotherObject isJSEString 		ifTrue: [ ^ self equals: anotherObject toNumber ].	anotherObject isJSEBoolean		ifTrue: [ ^ self equals: anotherObject toNumber ].	anotherObject isObject 		ifTrue: [ ^ self equals: anotherObject toPrimitive ].	^ false</body>

<body package="JavascriptEngine-Runtime-Core">equalsPrimitiveOfSameType: aPrimitiveValue	self isNaN 		ifTrue: [ ^ false ].	aPrimitiveValue isNaN 		ifTrue: [ ^ false ].	^ self value = aPrimitiveValue value</body>
</methods>

<methods>
<class-id>JSE.JSENumber</class-id> <category>comparing</category>

<body package="JavascriptEngine-Runtime-Core">sameValueAsObjectOfSameType: anotherNumber	^ (super sameValueAsObjectOfSameType: anotherNumber )		 or: [ self isNaN and: [ anotherNumber isNaN ]]</body>
</methods>

<methods>
<class-id>JSE.JSENumber</class-id> <category>functions - private</category>

<body package="JavascriptEngine-Runtime-Core">numberToExponential: fractionDigits 	| fractionDigitsValue s x |	fractionDigitsValue := fractionDigits isUndefined 			ifTrue: [ nil ]			ifFalse: [ fractionDigits toIntegerValue ].	self isNaN 		ifTrue: [ ^ self class nanString ].	s := ''.	x := self value.	x &lt; 0 		ifTrue: 		[	s := '-'.			x := x negated		].	x isInfinity 		ifTrue: [ ^ s , self class positiveInfinityString ].	( fractionDigitsValue notNil and: [ fractionDigitsValue &lt; 0 or: [ fractionDigitsValue &gt; 20 ]]) 		ifTrue: [ JSERangeError raiseSignal: 'fractionDigits must be between 0 and 20' ].	^ s, (x jseToExponential: fractionDigitsValue )</body>

<body package="JavascriptEngine-Runtime-Core">numberToFixed: fractionDigits 	| fractionDigitsValue fixedPoint string |	fractionDigitsValue := fractionDigits toIntegerValue.	(fractionDigitsValue &lt; 0 or: [ fractionDigitsValue &gt; 20 ])		ifTrue: [ JSERangeError raiseSignal: 'fractionDigits must be between 0 and 20' ].	self isNaN		ifTrue: [ ^ self class nanString ].	fixedPoint := self value asFixedPoint: fractionDigitsValue.	string :=  fixedPoint printString.	^ string copyFrom: 1 to: string size - 1</body>

<body package="JavascriptEngine-Runtime-Core">numberToLocaleString	" This function is implementation-dependent, thus use the VW implementation "	^ self class convertSmalltalkPrintString: (Locale current printAsNumber: self value) asString</body>

<body package="JavascriptEngine-Runtime-Core">numberToPrecision: precision	| precionValue s x |	precision isUndefined		ifTrue: [ ^ self toString ].	precionValue := precision toIntegerValue.	self isNaN 		ifTrue: [ ^ self class nanString ].	s := ''.	x := self value.	x &lt; 0 		ifTrue: 		[	s := '-'.			x := x negated		].	x isInfinity 		ifTrue: [ ^ s , self class positiveInfinityString ].	( precionValue &lt; 1 or: [ precionValue &gt; 21 ]) 		ifTrue: [ JSERangeError raiseSignal: 'fprecision must be between 1 and 21' ].	^ s, (x jseToPrecision: precionValue)</body>

<body package="JavascriptEngine-Runtime-Core">numberToString: radix 	| radixValue |	radixValue := radix isUndefined 			ifTrue: [ 10 ]			ifFalse: [ radix toIntegerValue ].	( radixValue &lt; 2 or: [ radixValue &gt; 36 ]) 		ifTrue: [ JSERangeError raiseSignal: 'Radix must be berween 2 and 36' ].	^ (radixValue = 10 or: [ self isFinite not ])		ifTrue: [ self toString ]		ifFalse: 		[	self value = self value jseAsInteger 				ifTrue: [ self value jseAsInteger printStringRadix: radixValue ]				ifFalse: 				[	" LimitedPrecisionReal with Radix != 10 .... "					JSERangeError raiseSignal: 'Printing floating point numbers with radix != 10 is not supported yet'				]		]</body>

<body package="JavascriptEngine-Runtime-Core">numberValueOf	^ self value</body>
</methods>

<methods>
<class-id>JSE.JSENumber</class-id> <category>internal - testing</category>

<body package="JavascriptEngine-Runtime-Core">isJSENumber	^ true</body>
</methods>

<methods>
<class-id>JSE.JSENumber class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">infinity: positive 	| value |	value := self positiveInfinityValue.	^ positive 		ifTrue: [ self value: value ]		ifFalse: [ self value: value negated ]</body>

<body package="JavascriptEngine-Runtime-Core">nan	^ self value: self nanValue</body>

<body package="JavascriptEngine-Runtime-Core">negativeInfinity	^ self value: self negativeInfinityValue</body>

<body package="JavascriptEngine-Runtime-Core">positiveInfinity	^ self value: self positiveInfinityValue</body>

<body package="JavascriptEngine-Runtime-Core">value: aNumberValue	^ self new value: aNumberValue ; yourself</body>
</methods>

<methods>
<class-id>JSE.JSENumber class</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">toNumberValue: aNumberValue	^ aNumberValue</body>

<body package="JavascriptEngine-Runtime-Core">toStringValue: aNumber 	" 9.8.1 ToString Applied to the Number Type "	| stream |	aNumber isNaN 		ifTrue: [ ^ self nanString ].	aNumber isZero 		ifTrue: [ ^ '0' ].	aNumber isInfinity 		ifTrue: 		[	^ aNumber &lt; 0 				ifTrue: [ self negativeInfinityString ]				ifFalse: [ self positiveInfinityString ]		].	stream := String new writeStream.	aNumber jsePrintOn:  stream.	^ stream contents</body>
</methods>

<methods>
<class-id>JSE.JSENumber class</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">convertSmalltalkPrintString: stringValue 	" convert a print string created by Smalltalk into a string that is more suitable for JavaScript "	^ stringValue last = $d 		ifTrue: [ stringValue copyFrom: 1 to: stringValue size - 1 ]		ifFalse: 		[	stringValue replaceAll: $d with: $e.			stringValue		]</body>

<body package="JavascriptEngine-Runtime-Core">nanString	^ 'NaN'</body>

<body package="JavascriptEngine-Runtime-Core">nanValue	^ JSEPlatform nanValue</body>

<body package="JavascriptEngine-Runtime-Core">negativeInfinityString	^ '-Infinity'</body>

<body package="JavascriptEngine-Runtime-Core">negativeInfinityValue	^ JSEPlatform negativeInfinityValue</body>

<body package="JavascriptEngine-Runtime-Core">positiveInfinityString	^ 'Infinity'</body>

<body package="JavascriptEngine-Runtime-Core">positiveInfinityValue	^ JSEPlatform positiveInfinityValue</body>
</methods>

<methods>
<class-id>JSE.JSENumber class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'A number primitive'</body>

<body package="JavascriptEngine-Runtime-Core">objectName	^ #Number</body>

<body package="JavascriptEngine-Runtime-Core">typeOfSymbol	^ #number</body>
</methods>

<methods>
<class-id>JSE.JSEPrimitiveObject</class-id> <category>internal</category>

<body package="JavascriptEngine-Runtime-Core">classString	^ self primitiveValue classString</body>

<body package="JavascriptEngine-Runtime-Core">getOrNil: propertyName 	" intercept index accesses, required for strings "	^ (( self indexOfPropertyName: propertyName ) ifNotNil: [: index | self primitiveValue getOrNil: propertyName ]) ifNil: [ super getOrNil: propertyName ]</body>

<body package="JavascriptEngine-Runtime-Core">getOwnPropertyOrNil: propertyName 	" intercept index accesses, required for strings "	^ (( self indexOfPropertyName: propertyName ) ifNotNil: [: index | self primitiveValue elementPropertyOrNilAtIndex: index ]) 		ifNil: [ super getOwnPropertyOrNil: propertyName ]</body>

<body package="JavascriptEngine-Runtime-Core">getValueOfDataProperty: aDataProperty	" required for supporting the length property of strings "	^ (aDataProperty name = #length and: [ (self getOwnPropertyOrNil: #length) isNil ])		ifTrue: [ self primitiveValue getValueOfDataProperty: aDataProperty ]		ifFalse: [ super getValueOfDataProperty: aDataProperty]</body>

<body package="JavascriptEngine-Runtime-Core">primitiveValue	^ self internalProperties at: #primitiveValue ifAbsent: [ self undefined ]</body>

<body package="JavascriptEngine-Runtime-Core">primitiveValue: aPrimitiveValue	self internalProperties at: #primitiveValue put: aPrimitiveValue.	self internalPrototype: aPrimitiveValue internalPrototype.</body>
</methods>

<methods>
<class-id>JSE.JSEPrimitiveObject</class-id> <category>prototype functions - boolean</category>

<body package="JavascriptEngine-Runtime-Core">booleanValueOf	^ self primitiveValue booleanValueOf</body>
</methods>

<methods>
<class-id>JSE.JSEPrimitiveObject</class-id> <category>prototype functions - string</category>

<body package="JavascriptEngine-Runtime-Core">length	^ self primitiveValue length</body>
</methods>

<methods>
<class-id>JSE.JSEPrimitiveObject</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">convertToNativeObjectWith: aConversionRegistry	^ self primitiveValue toNativeObjectWith: aConversionRegistry</body>

<body package="JavascriptEngine-Runtime-Core">primitiveValueDo: primitiveBlock orElse: elseBlock	^ primitiveBlock value: self primitiveValue</body>

<body package="JavascriptEngine-Runtime-Core">toErrorMessageString	^ self primitiveValue toErrorMessageString</body>
</methods>

<methods>
<class-id>JSE.JSEPrimitiveObject</class-id> <category>internal - JSON</category>

<body package="JavascriptEngine-Runtime-Core">asStringifyPropertyName	^ self primitiveValue asStringifyPropertyName</body>

<body package="JavascriptEngine-Runtime-Core">asStringifySpace	^ self primitiveValue asStringifySpace</body>

<body package="JavascriptEngine-Runtime-Core">stringifyReplacerFunction: replacerFunction propertyList: propertyList gap: gap indent: indent stack: stack executionEnvironment: executionEnvironment 	^ self primitiveValue stringifyReplacerFunction: replacerFunction propertyList: propertyList gap: gap indent: indent stack: stack executionEnvironment: executionEnvironment</body>
</methods>

<methods>
<class-id>JSE.JSEPrimitiveObject</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">toDate	^ self primitiveValue toDate</body>
</methods>

<methods>
<class-id>JSE.JSEPrimitiveObject</class-id> <category>printing</category>

<body package="JavascriptEngine-Runtime-Core">displayString	^ self primitiveValue displayString</body>
</methods>

<methods>
<class-id>JSE.JSEPrimitiveObject class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">primitiveValue: aPrimitiveValue 	^ self new 		primitiveValue: aPrimitiveValue;		yourself</body>
</methods>

<methods>
<class-id>JSE.JSEPrimitiveObject class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">internalClassSymbol	^ #Object</body>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'An object that wraps a primitive value'</body>
</methods>

<methods>
<class-id>JSE.JSEBuiltInObject</class-id> <category>internal - prototype</category>

<body package="JavascriptEngine-Runtime-Core">defaultPrototype	^ JSEObject getPrototype</body>
</methods>

<methods>
<class-id>JSE.JSEBuiltInObject</class-id> <category>internal</category>

<body package="JavascriptEngine-Runtime-Core">isBuiltIn	^ true</body>
</methods>

<methods>
<class-id>JSE.JSEBuiltInObject</class-id> <category>functions - private</category>

<body package="JavascriptEngine-Runtime-Core">initializeAsBuiltInObjectStrict: isStrict environment: lexicalEnvironment globalObject: globalObject 	self initializeAsGlobalObjectForCode: isStrict environment: lexicalEnvironment globalObject: globalObject</body>
</methods>

<methods>
<class-id>JSE.JSEBuiltInObject</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">newProperties	^ self propertiesClass new: 50</body>

<body package="JavascriptEngine-Runtime-Core">propertiesClass	^ Dictionary</body>
</methods>

<methods>
<class-id>JSE.JSEBuiltInObject class</class-id> <category>testing</category>

<body package="JavascriptEngine-Runtime-Core">isAbstract	^ self == JSEBuiltInObject</body>
</methods>

<methods>
<class-id>JSE.JSEBuiltInObject class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'An object that is part of the Javascript engine'</body>

<body package="JavascriptEngine-Runtime-Core">prototypeObjectClass	" implementation class of the prototype "	^ nil</body>
</methods>

<methods>
<class-id>JSE.JSEFunctionObject</class-id> <category>internal</category>

<body package="JavascriptEngine-Runtime-Core">code	^ code</body>

<body package="JavascriptEngine-Runtime-Core">code: aCode 	code := aCode.</body>

<body package="JavascriptEngine-Runtime-Core">function	^ self code ifNotNil: [: c | c function ]</body>

<body package="JavascriptEngine-Runtime-Core">get: propertyName 	" 15.3.5.4 [[Get]] (P) "	| propertyValue |	propertyValue := super get: propertyName.	(propertyName = #caller and: [ propertyValue isCallable and: [ propertyValue isStrict ]])		ifTrue: [ JSETypeError raiseSignal: 'Cannot access property "caller"' ].	^ propertyValue</body>

<body package="JavascriptEngine-Runtime-Core">isStrict	^ isStrict ifNil: [ false ]</body>

<body package="JavascriptEngine-Runtime-Core">isStrict: aBoolean 	isStrict := aBoolean.</body>

<body package="JavascriptEngine-Runtime-Core">length	^ self code notNil 		ifTrue: [ self code formalParameters size ]		ifFalse: [ 0 ]</body>

<body package="JavascriptEngine-Runtime-Core">newObjectClass	^ JSEObject</body>

<body package="JavascriptEngine-Runtime-Core">scope	^ scope</body>

<body package="JavascriptEngine-Runtime-Core">scope: aLexicalEnvironment	scope := aLexicalEnvironment</body>
</methods>

<methods>
<class-id>JSE.JSEFunctionObject</class-id> <category>internal - testing</category>

<body package="JavascriptEngine-Runtime-Core">hasInstance: aJSEObject 	" 15.3.5.3 [[HasInstance]] (V) "	| myProto |	aJSEObject isObject 		ifFalse: [ ^ false ].	myProto := self get: #prototype.	myProto isObject 		ifFalse: 		[	JSETypeError raiseSignal: 'Function prototype is not an object'.			^ false		].	^ aJSEObject isInstanceOfPrototype: myProto</body>

<body package="JavascriptEngine-Runtime-Core">isCallable	^ true</body>

<body package="JavascriptEngine-Runtime-Core">isConstructor	^ true</body>
</methods>

<methods>
<class-id>JSE.JSEFunctionObject</class-id> <category>internal - call</category>

<body package="JavascriptEngine-Runtime-Core">callCodeWithThis: thisObject arguments: arguments 	" see 13.2.1 [[Call]] "	^ self code notNil 		ifTrue: 		[	self code 				callWithThis: thisObject				arguments: arguments				executionEnvironment: JSECurrentExecutionEnvironment value				scope: self scope				strict: self isStrict				functionObject: self				callerIsStrict: false				isDirectEvalCall: false		]		ifFalse: [ JSEUndefined singleton ]</body>

<body package="JavascriptEngine-Runtime-Core">callWithThis: thisObject 	^ self callWithThis: thisObject arguments: #( ) executionEnvironment: JSECurrentExecutionEnvironment value</body>

<body package="JavascriptEngine-Runtime-Core">callWithThis: thisObject argument: argument 	^ self callWithThis: thisObject arguments: ( Array with: argument ) executionEnvironment: JSECurrentExecutionEnvironment value</body>

<body package="JavascriptEngine-Runtime-Core">callWithThis: thisObject arguments: arguments executionEnvironment: executionEnvironment callerIsStrict: callerIsStrict isDirectEvalCall: isDirectEvalCall 	" see 13.2.1 [[Call]].	callerIsStrict is only relevant for eval(), see 10.1.1 Strict Mode Code "	^ self code notNil 		ifTrue: 		[	self code 				callWithThis: thisObject				arguments: arguments				executionEnvironment: executionEnvironment				scope: self scope				strict: self isStrict				functionObject: self				callerIsStrict: callerIsStrict				isDirectEvalCall: isDirectEvalCall		]		ifFalse: [ JSEUndefined singleton ]</body>
</methods>

<methods>
<class-id>JSE.JSEFunctionObject</class-id> <category>printing</category>

<body package="JavascriptEngine-Runtime-Core">displayString	^ 'function ', self code displayString</body>

<body package="JavascriptEngine-Runtime-Core">printOn: aStream 	super printOn: aStream.	self code notNil 		ifTrue: 		[	aStream nextPutAll: ' ('.			self code printOn: aStream.			aStream nextPutAll: ')'		].</body>
</methods>

<methods>
<class-id>JSE.JSEFunctionObject</class-id> <category>internal - JSON</category>

<body package="JavascriptEngine-Runtime-Core">asStringifyReplacerFunction	^ self</body>

<body package="JavascriptEngine-Runtime-Core">stringifyReplacerFunction: replacerFunction propertyList: propertyList gap: gap indent: indent stack: stack executionEnvironment: executionEnvironment 	^ nil</body>
</methods>

<methods>
<class-id>JSE.JSEFunctionObject</class-id> <category>internal - constructor</category>

<body package="JavascriptEngine-Runtime-Core">constructWithArguments: arguments 	" 13.2.2 [[Construct]] "	| newObject proto result |	proto := self getPrototypeForNewObject.	newObject := proto constructNewObject.	newObject setConstructedFlag.	newObject isExtensible: true.	result := self callCodeWithThis: newObject arguments: arguments.	newObject resetConstructedFlag.	^ result isObject 		ifTrue: [ result ]		ifFalse: [ newObject ]</body>

<body package="JavascriptEngine-Runtime-Core">getPrototypeForNewObject	" 13.2.2 [[Construct]] "	| proto |	proto := self get: #prototype.	proto isObject 		ifFalse: [ proto := JSEObject getPrototype ].	^ proto</body>
</methods>

<methods>
<class-id>JSE.JSEFunctionObject</class-id> <category>internal - prototype</category>

<body package="JavascriptEngine-Runtime-Core">defaultPrototype	^ self getPrototype</body>

<body package="JavascriptEngine-Runtime-Core">prototypeOfPrototypeFromGlobalObject: globalObject 	^ JSEObject getPrototypeFromGlobalObject: globalObject</body>
</methods>

<methods>
<class-id>JSE.JSEFunctionObject</class-id> <category>functions - private</category>

<body package="JavascriptEngine-Runtime-Core">initializePropertiesOfBuiltInObject: aConstructor 	super initializePropertiesOfBuiltInObject: aConstructor.	" 15.3.3.2 Function.length "	aConstructor uncheckedPutReadOnly: #length value: ( JSENumber value: 1 ).</body>
</methods>

<methods>
<class-id>JSE.JSEFunctionObject</class-id> <category>initialize-release</category>

<body package="JavascriptEngine-Runtime-Core">initializePrototypeFromGlobalObject: globalObject 	" see 15.3.4 Properties of the Function Prototype Object "	super initializePrototypeFromGlobalObject: globalObject .	self isExtensible: true.</body>
</methods>

<methods>
<class-id>JSE.JSEFunctionObject</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">propertiesClass	^ Dictionary</body>
</methods>

<methods>
<class-id>JSE.JSEFunctionObject</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">newProperties	^ self propertiesClass new: 5</body>
</methods>

<methods>
<class-id>JSE.JSEFunctionObject class</class-id> <category>testing</category>

<body package="JavascriptEngine-Runtime-Core">isPartOfBootstrap	^ true</body>
</methods>

<methods>
<class-id>JSE.JSEFunctionObject class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">code: aCode scope: aLexicalEnvironment strict: strict 	^ self new		code: aCode;		scope: aLexicalEnvironment;		isStrict: strict;		yourself</body>
</methods>

<methods>
<class-id>JSE.JSEFunctionObject class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'A function object'</body>

<body package="JavascriptEngine-Runtime-Core">objectName	^ #Function</body>

<body package="JavascriptEngine-Runtime-Core">typeOfSymbol	^ #function</body>
</methods>

<methods>
<class-id>JSE.JSEHostObject</class-id> <category>printing</category>

<body package="JavascriptEngine-Runtime-Core">displayString	^ self wrappedObject displayString</body>
</methods>

<methods>
<class-id>JSE.JSEHostObject</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">canBeConstructed	" Returns false if a host object is only a wrapper for and cannot be created in Javascript.	An error will be raised when trying to create new host objects "	^ true</body>

<body package="JavascriptEngine-Runtime-Core">convertToNativeObjectWith: aConversionRegistry	^ self wrappedObject</body>

<body package="JavascriptEngine-Runtime-Core">initializeAsConstructedObject	" check if it is possible to construct objects of this class "	self canBeConstructed		ifFalse: [ self raiseCannotConstruct ].	super initializeAsConstructedObject.</body>

<body package="JavascriptEngine-Runtime-Core">raiseCannotConstruct	JSETypeError raiseSignal: ('Cannot construct new object of "&lt;1s&gt;"' expandMacrosWith: self typeDisplayString)</body>

<body package="JavascriptEngine-Runtime-Core">wrappedObject	" The host object wrapped by this wrapper object "	^ wrappedObject</body>

<body package="JavascriptEngine-Runtime-Core">wrappedObject: anObject	" The host object wrapped by this wrapper object "	wrappedObject := anObject.</body>
</methods>

<methods>
<class-id>JSE.JSEHostObject</class-id> <category>comparing - private</category>

<body package="JavascriptEngine-Runtime-Core">equalsObjectOfSameType: anotherObject	" demand that both objects are host objects of the same class "	^ self strictEqualsObjectOfSameType: anotherObject</body>

<body package="JavascriptEngine-Runtime-Core">strictEqualsObjectOfSameType: anotherObject	" demand that both objects are host objects of the same class "	^ self class = anotherObject class		and: [ self wrappedObject = anotherObject wrappedObject ]</body>
</methods>

<methods>
<class-id>JSE.JSEHostObject</class-id> <category>functions - private</category>

<body package="JavascriptEngine-Runtime-Core">fallbackConstructor: executionContext	" Fallback constructor implementation: Create a new object "	^ self constructedObjectOrErrorIn: executionContext</body>

<body package="JavascriptEngine-Runtime-Core">initializeFallbackConstructorsAt: namespaceObject strict: strict environment: lexicalEnvironment protoypeObject: aPrototypeObject	" Define a default constructor if the class is not abstract "	self class isAbstract		ifFalse: [			self 				initializeConstructorNamed: self objectName				namespaceObject: namespaceObject				strict: strict				environment: lexicalEnvironment				prototype: aPrototypeObject				selector: #fallbackConstructor:				parameters: #()				length: 0		].</body>
</methods>

<methods>
<class-id>JSE.JSEHostObject</class-id> <category>internal</category>

<body package="JavascriptEngine-Runtime-Core">defaultPrototype	^ self getPrototype</body>
</methods>

<methods>
<class-id>JSE.JSEHostObject class</class-id> <category>testing</category>

<body package="JavascriptEngine-Runtime-Core">isAbstract	^ self == JSEHostObject</body>
</methods>

<methods>
<class-id>JSE.JSEHostObject class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">extendedClass	^ self == self hostObjectRootClass 		ifTrue: [ nil ]		ifFalse: 		[	self superclass isAbstract 				ifTrue: [ self superclass extendedClass ]				ifFalse: [ self superclass ]		]</body>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'Abstract superclass of Javascript objects that wrap a Smalltalk objectInstance Variables:	wrappedObject	&lt;Object&gt;	the wrapped Smalltalk object'</body>

<body package="JavascriptEngine-Runtime-Core">objectName	^ self isAbstract 		ifTrue: [ nil ]		ifFalse: [ self name ]</body>
</methods>

<methods>
<class-id>JSE.JSEHostObject class</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">hostObjectRootClass	^ JSEHostObject</body>

<body package="JavascriptEngine-Runtime-Core">pragmaRootClass	" collect all pragmas from abstract superclasses "	| pragmaRootClass pragmaSuperClass |	pragmaRootClass := self.	[	pragmaSuperClass := pragmaRootClass superclass.		pragmaSuperClass ~~ self hostObjectRootClass and: [ pragmaSuperClass isAbstract ]	] whileTrue: [ pragmaRootClass := pragmaSuperClass ].	^ pragmaRootClass</body>
</methods>

<methods>
<class-id>JSE.JSEHostObject class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">on: anObject 	" wrap the Smalltalk object "	^ self new 		wrappedObject: anObject;		yourself</body>
</methods>

<methods>
<class-id>JSE.JSERegExpObject</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">regularExpression	^ regularExpression</body>

<body package="JavascriptEngine-Runtime-Core">regularExpression: aRegularExpression 	regularExpression := aRegularExpression.</body>
</methods>

<methods>
<class-id>JSE.JSERegExpObject</class-id> <category>internal - testing</category>

<body package="JavascriptEngine-Runtime-Core">isRegExp	^ true</body>
</methods>

<methods>
<class-id>JSE.JSERegExpObject</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">toRegExp	^ self</body>
</methods>

<methods>
<class-id>JSE.JSERegExpObject</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">ignoreCase	^ ( self get: #ignoreCase ) toBooleanValue</body>

<body package="JavascriptEngine-Runtime-Core">isEmptyRegExp	^ ( self get: #source ) length = 0</body>

<body package="JavascriptEngine-Runtime-Core">isGlobal	^ ( self get: #global ) toBooleanValue</body>

<body package="JavascriptEngine-Runtime-Core">multiline	^ ( self get: #multiline ) toBooleanValue</body>
</methods>

<methods>
<class-id>JSE.JSERegExpObject</class-id> <category>functions - private</category>

<body package="JavascriptEngine-Runtime-Core">compile: aString ignoreCase: ignoreCase multiline: multiline 	^ [ JSEPlatform asRegex: aString ignoreCase: ignoreCase multiline: multiline ] on: Error do: [: ex | JSESyntaxError raiseSignal: ex description ]</body>

<body package="JavascriptEngine-Runtime-Core">exec: string 	"15.10.6.2 RegExp.prototype.exec(string)"	| s length lastIndex i global |	s := string toString.	length := s length.	lastIndex := self get: #lastIndex.	i := lastIndex toIntegerValue.	global := ( self get: #global ) toBooleanValue.	global ifFalse: [ i := 0 ].	( i &lt; 0 or: [ i &gt; length ]) ifTrue: 		[	self put: #lastIndex value: 0 throw: true.			^ JSENull singleton		].	^ self regularExpression matches: s value		offset: i		do: 		[: groups : startIndex : endIndex | | array |			array := JSEArray withElements: ( groups collect: [: mString | mString asJSEObject ]).			array defineOwnProperty: ( JSEDataProperty name: #index value: startIndex asJSEObject isWritable: true isEnumerable: true isConfigurable: true ) throw: true.			array defineOwnProperty: ( JSEDataProperty name: #input value: string asJSEObject isWritable: true isEnumerable: false isConfigurable: true ) throw: true.			global ifTrue: [ self put: #lastIndex value: endIndex throw: true ].			array		]		elseDo: 		[	self put: #lastIndex value: 0 throw: true.			JSE.JSENull singleton		]</body>

<body package="JavascriptEngine-Runtime-Core">initializeFlagsFromPattern: aPattern 	self uncheckedPutReadOnly: #global value: ( aPattern isGlobal).	self uncheckedPutReadOnly: #ignoreCase value: ( aPattern  ignoreCase).	self uncheckedPutReadOnly: #multiline value: ( aPattern multiline).</body>

<body package="JavascriptEngine-Runtime-Core">initializeFlagsFromString: flagsString 	self uncheckedPutReadOnly: #global value: ( flagsString includes: $g ).	self uncheckedPutReadOnly: #ignoreCase value: ( flagsString includes: $i ).	self uncheckedPutReadOnly: #multiline value: ( flagsString includes: $m ).</body>

<body package="JavascriptEngine-Runtime-Core">initializeLastIndex	self uncheckedAddProperty: ( JSEDataProperty name: #lastIndex value: 0 isWritable: true isEnumerable: false isConfigurable: false ).</body>

<body package="JavascriptEngine-Runtime-Core">initializeWithPattern: pattern flags: flags mustEscapeStrings: mustEscapeStrings executionContext: executionContext 	"15.10.3 The RegExp Constructor Called as a Function / 15.10.4 The RegExp Constructor.	This is the constructed object, not the prototype  "	| compiledRegExp flagsString source sourceString patternString |	( pattern isRegExp and: [ flags isUndefined not ]) ifTrue: [ JSETypeError raiseSignal: 'Flags of a new regular expression cannot be specified if the pattern is already a regular expression object' ].	flagsString := flags isUndefined 			ifTrue: [ '' ]			ifFalse: [ flags toStringValue ].	pattern isRegExp 		ifTrue: 		[	compiledRegExp := pattern regularExpression.			source := pattern get: #source		]		ifFalse: 		[	" todo - escape/format source as described "			sourceString := pattern isUndefined 					ifTrue: [ '' ]					ifFalse: 					[	patternString := pattern toStringValue.						mustEscapeStrings 							ifTrue: [ self parseString: patternString ]							ifFalse: [ patternString ]					].			compiledRegExp := self compile: sourceString ignoreCase: ( flagsString includes: $i ) multiline: self multiline.			source := sourceString asJSEObject		].	flagsString do: [: f | (( 'gim' includes: f ) not or: [( flagsString occurrencesOf: f ) &gt; 1 ]) ifTrue: [ JSESyntaxError raiseSignal: ( 'Invalid flags for regular expression: &lt;1s&gt;' expandMacrosWith: flagsString )]].	self regularExpression: compiledRegExp.	self source: source.	pattern isRegExp 		ifTrue: [ self initializeFlagsFromPattern: pattern ]		ifFalse: [ self initializeFlagsFromString: flagsString ].	self initializeLastIndex.</body>

<body package="JavascriptEngine-Runtime-Core">match: string 	" see 15.5.4.10 String.prototype.match (regexp) "	| matches |	^ self isGlobal		ifTrue: 		[	matches := OrderedCollection new.			self regularExpression matchesIn: string value do: [: match | matches add: match asJSEObject ].			matches notEmpty 				ifTrue: [ JSEArray withElements: matches ]				ifFalse: [ JSENull singleton ]		]		ifFalse: [ self exec: string ]</body>

<body package="JavascriptEngine-Runtime-Core">matchesIn: aString do: aBlock 	" Utility method for implementing replace() "	| global |	global := self isGlobal.	self isEmptyRegExp 		ifTrue: [ 1 to: aString size + 1 do: [: i | aBlock value: '' value: #( ) value: i ]]		ifFalse: 		[	self regularExpression matchesIn: aString				do: 				[: match : captures : stopIndex |					aBlock value: match value: captures value: stopIndex.				]				global: global		].</body>

<body package="JavascriptEngine-Runtime-Core">parseString: aString	" Parse the string to preprocess character escapes that are not handled by the RxMatcher "	^ (JSELexicalParser newStartingAt: #pattern) parse: aString</body>

<body package="JavascriptEngine-Runtime-Core">search: string 	" see 15.5.4.12 String.prototype.search (regexp) "	self isEmptyRegExp 		ifTrue: [ ^ 0 ].	^self regularExpression jsePositionOf: string</body>

<body package="JavascriptEngine-Runtime-Core">source: source 	self uncheckedPutReadOnly: #source value: source.</body>
</methods>

<methods>
<class-id>JSE.JSERegExpObject</class-id> <category>initialize-release</category>

<body package="JavascriptEngine-Runtime-Core">initializePrototypeFromGlobalObject: globalObject 	super initializePrototypeFromGlobalObject: globalObject .	self regularExpression: ( JSEPlatform asRegex: '' ignoreCase: false ).	self source: ''.	self initializeFlagsFromString: ''.	self initializeLastIndex.</body>
</methods>

<methods>
<class-id>JSE.JSERegExpObject</class-id> <category>internal - prototype</category>

<body package="JavascriptEngine-Runtime-Core">prototypeOfPrototypeFromGlobalObject: globalObject 	^ JSEObject getPrototypeFromGlobalObject: globalObject</body>
</methods>

<methods>
<class-id>JSE.JSERegExpObject class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'A regular expression (either a literal or created as a new RegExp object)'</body>

<body package="JavascriptEngine-Runtime-Core">objectName	^ #RegExp</body>
</methods>

<methods>
<class-id>JSE.JSEArgumentsObject</class-id> <category>internal</category>

<body package="JavascriptEngine-Runtime-Core">defineOwnProperty: property throw: throw 	| allowed mappedProperty |	allowed := super defineOwnProperty: property throw: throw.	allowed 		ifTrue: 		[	self parameterMap ifNotNil: 				[: map |					mappedProperty := map getOwnPropertyOrNil: property name.					mappedProperty notNil 						ifTrue: 						[	property isAccessor 								ifTrue: [ self parameterMap delete: property name throw: throw ]								ifFalse: 								[	property valueOrNil ifNotNil: [: value | self parameterMap put: property name value: value throw: throw ].									property isWritableOrNil == false 										ifTrue: [ self parameterMap delete: property name throw: throw ]								]						]				]		]		ifFalse: 		[	throw 				ifTrue: [ JSETypeError raiseSignal: 'Cannot set argument' ]		].	^ allowed</body>

<body package="JavascriptEngine-Runtime-Core">getOrNil: propertyName 	self parameterMap ifNotNil: 		[: map | | mappedProperty |			mappedProperty := map getOrNil: propertyName.			mappedProperty notNil 				ifTrue: [ ^ mappedProperty ]		].	^ super getOrNil: propertyName</body>

<body package="JavascriptEngine-Runtime-Core">getOwnPropertyOrNil: propertyName 	| property mapValue |	property := super getOwnPropertyOrNil: propertyName.	( property notNil and: [ property isData ]) 		ifTrue: 		[	self parameterMap ifNotNil: 				[: map |					mapValue := map getOrNil: propertyName.					mapValue notNil 						ifTrue: [ property value: mapValue ]				]		].	^ property</body>

<body package="JavascriptEngine-Runtime-Core">parameterMap	^ parameterMap</body>

<body package="JavascriptEngine-Runtime-Core">parameterMap: aParameterMapObject	parameterMap := aParameterMapObject</body>
</methods>

<methods>
<class-id>JSE.JSEArgumentsObject</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">overwriteDataProperty: ownProperty value: value throw: throw	" Do it  the slow way (which involes creating a temporary data property),	due to the special implementation of  [[DefineOwnProperty]]"	| newValueProperty |	newValueProperty := JSEDataProperty name: ownProperty name.	newValueProperty value: value.	self defineOwnProperty: newValueProperty throw: throw</body>

<body package="JavascriptEngine-Runtime-Core">uncheckedDeleteProperty: propertyName 	super uncheckedDeleteProperty: propertyName.	self parameterMap ifNotNil: [: map | map uncheckedDeleteProperty: propertyName ].</body>
</methods>

<methods>
<class-id>JSE.JSEArgumentsObject class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'An object that represents arguments of a function call'</body>
</methods>

<methods>
<class-id>JSE.JSEErrorObject</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">nativeError	^ nativeError</body>

<body package="JavascriptEngine-Runtime-Core">nativeError: aNativeError 	nativeError := aNativeError.</body>

<body package="JavascriptEngine-Runtime-Core">objectName	" this class is used for all native errors "	^ (self nativeError ifNotNil: [: error | error objectName ]) ifNil: [ self class objectName ]</body>

<body package="JavascriptEngine-Runtime-Core">objectNamespacePath	" this class is used for all native errors "	^ (self nativeError ifNotNil: [: error | error objectNamespacePath ]) ifNil: [ self class objectNamespacePath ]</body>
</methods>

<methods>
<class-id>JSE.JSEErrorObject</class-id> <category>printing</category>

<body package="JavascriptEngine-Runtime-Core">printOn: aStream 	super printOn: aStream.	self nativeError notNil 		ifTrue: 		[	aStream nextPutAll: ' ('.			aStream nextPutAll: self nativeError class name.			aStream nextPutAll: ')'		].</body>
</methods>

<methods>
<class-id>JSE.JSEErrorObject</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">raiseUncaughtError	self nativeError notNil 		ifTrue: [ self nativeError copyForReraise raiseSignal ]		ifFalse: [ super raiseUncaughtError ].</body>

<body package="JavascriptEngine-Runtime-Core">toErrorMessageString	^ ( self getOrNil: #message ) ifNotNil: [: message | message toStringValue ] ifNil: [ self toStringValue ]</body>
</methods>

<methods>
<class-id>JSE.JSEErrorObject</class-id> <category>internal - prototype</category>

<body package="JavascriptEngine-Runtime-Core">createPrototypeObjectForGlobalObject: globalObject 	| protoObject |	protoObject := self prototypeObjectClass new.	self nativeError notNil ifTrue: [ protoObject nativeError: self nativeError ].	protoObject initializePrototypeFromGlobalObject: globalObject.	^ protoObject</body>

<body package="JavascriptEngine-Runtime-Core">defaultPrototype	^ self getPrototype</body>

<body package="JavascriptEngine-Runtime-Core">getPrototypeFromGlobalObject: globalObject 	^ self objectName 		ifNotNil: [: builtInName | globalObject getPrototypeNamed: builtInName namespace: self objectNamespacePath ]		ifNil: [ JSEUndefined singleton ]</body>

<body package="JavascriptEngine-Runtime-Core">getPrototypeIn: anExecutionEnvironment 	^ self getPrototypeFromGlobalObject: anExecutionEnvironment globalObject</body>

<body package="JavascriptEngine-Runtime-Core">prototypeOfPrototypeFromGlobalObject: globalObject 	^ self nativeError notNil 		ifTrue: [ JSEErrorObject getPrototypeFromGlobalObject: globalObject  ]		ifFalse: [ JSEObject getPrototypeFromGlobalObject: globalObject   ]</body>
</methods>

<methods>
<class-id>JSE.JSEErrorObject</class-id> <category>functions - private</category>

<body package="JavascriptEngine-Runtime-Core">objectNames	^ Array with: self objectName</body>
</methods>

<methods>
<class-id>JSE.JSEErrorObject class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'Error object'</body>

<body package="JavascriptEngine-Runtime-Core">objectName	^ #Error</body>
</methods>

<methods>
<class-id>JSE.JSEBuiltInFunctionDeclaration</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">functionObjectClass	" we need a special function object to handle the construction correctly "	^ JSEBuiltInFunctionObject</body>

<body package="JavascriptEngine-Runtime-Core">length	^ length</body>

<body package="JavascriptEngine-Runtime-Core">length: aLength 	length := aLength.</body>
</methods>

<methods>
<class-id>JSE.JSEBuiltInFunctionDeclaration class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">declareFunctionNamed: functionName parameters: parameterSymbols length: length block: executionBlock strict: strict 	" Declare a function that is evaluated by the execution block "	| codeBlock |	codeBlock := JSESelectorCodeSection selector: #smalltalkFunctionBlock:parameterSymbols:strict: with: executionBlock with: parameterSymbols with: strict.	^ self declareFunctionNamed: functionName parameters: parameterSymbols length: length codeSection: codeBlock</body>

<body package="JavascriptEngine-Runtime-Core">declareFunctionNamed: functionName parameters: parameterSymbols length: length codeSection: codeSection 	| functionDeclaration functionCode |	functionDeclaration := self identifier: functionName formalParameters: parameterSymbols length: length.	functionCode := JSEFunctionCode function: functionDeclaration.	functionCode codeSection: codeSection.	functionDeclaration code: functionCode.	^ functionDeclaration</body>

<body package="JavascriptEngine-Runtime-Core">declareFunctionNamed: functionName parameters: parameterSymbols length: length receiver: receiver selector: selector sendToThis: sendToThis strict: strict 	" Declare a function that is evaluated by the selector of the receiver "	| codeBlock implementationSelector |	implementationSelector := sendToThis 			ifTrue: [ #smalltalkFunctionPrototype:selector:parameterSymbols:strict: ]			ifFalse: [ #smalltalkFunctionReceiver:selector:parameterSymbols:strict: ].	codeBlock := JSESelectorCodeSection selector: implementationSelector with: receiver with: selector with: parameterSymbols with: strict.	^ self declareFunctionNamed: functionName parameters: parameterSymbols length: length codeSection: codeBlock</body>

<body package="JavascriptEngine-Runtime-Core">identifier: functionName formalParameters: parameterSymbols length: length 	^ ( self identifier: functionName formalParameters: parameterSymbols )		length: length;		yourself</body>
</methods>

<methods>
<class-id>JSE.JSEBuiltInObjectPrototype</class-id> <category>internal</category>

<body package="JavascriptEngine-Runtime-Core">newObjectClass	" custom constructors with primitive prototypes create first class objects "	^ JSEPrimitiveObject</body>

<body package="JavascriptEngine-Runtime-Core">prototypeObjectClass	^ prototypeObjectClass</body>
</methods>

<methods>
<class-id>JSE.JSEBuiltInObjectPrototype</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">constructedObjectClass: aObjectClass 	prototypeObjectClass := aObjectClass.</body>

<body package="JavascriptEngine-Runtime-Core">primitiveValue	^ primitiveValue</body>

<body package="JavascriptEngine-Runtime-Core">primitiveValue: aPrimitiveValue 	primitiveValue := aPrimitiveValue.</body>
</methods>

<methods>
<class-id>JSE.JSEBuiltInObjectPrototype</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">internalClassSymbol	^ self prototypeObjectClass internalClassSymbol</body>

<body package="JavascriptEngine-Runtime-Core">primitiveValueDo: primitiveBlock orElse: elseBlock	^ self primitiveValue ifNotNil: [ : prim | primitiveBlock value: prim ] ifNil: [ elseBlock value ]</body>

<body package="JavascriptEngine-Runtime-Core">raiseFunctionOnlyAvailableForThisType	self raiseFunctionOnlyAvailableFor: self prototypeObjectClass objectName</body>
</methods>

<methods>
<class-id>JSE.JSEBuiltInObjectPrototype</class-id> <category>printing</category>

<body package="JavascriptEngine-Runtime-Core">printOn: aStream	aStream nextPutAll: 'Prototype of '.	self prototypeObjectClass printOn: aStream</body>
</methods>

<methods>
<class-id>JSE.JSEBuiltInObjectPrototype</class-id> <category>internal - prototype</category>

<body package="JavascriptEngine-Runtime-Core">prototypeOfPrototypeFromGlobalObject: globalObject 	^ JSEObject getPrototypeFromGlobalObject: globalObject</body>
</methods>

<methods>
<class-id>JSE.JSEBuiltInObjectPrototype class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'Prototype object of built-in objects'</body>
</methods>

<methods>
<class-id>JSE.JSEEvalCode</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">hasConfigurableBindings	^ true</body>
</methods>

<methods>
<class-id>JSE.JSEArray</class-id> <category>internal - array</category>

<body package="JavascriptEngine-Runtime-Core">arrayElements	" Returns a sequencable collection containing the elements of the array "	^ elements</body>

<body package="JavascriptEngine-Runtime-Core">arrayElements: elementsOfArray 	" Set the elements of the array "	elements := elementsOfArray.	self updateLengthValue.</body>

<body package="JavascriptEngine-Runtime-Core">arrayLength	^ self length</body>

<body package="JavascriptEngine-Runtime-Core">checkValidIndex: anInteger 	(self isValidIndex: anInteger ) 		ifFalse: [ JSERangeError raiseSignal: ( '&lt;1s&gt; is not a valid array index' expandMacrosWith: anInteger printString )].</body>

<body package="JavascriptEngine-Runtime-Core">checkValidLength: aLengthValue 	( aLengthValue asInteger = aLengthValue and: [ aLengthValue &gt;= 0 and: [ aLengthValue &lt;= self maxLength ]]) 		ifFalse: [ JSERangeError raiseSignal: ( '&lt;1s&gt; is not a valid array length' expandMacrosWith: aLengthValue printString )].</body>

<body package="JavascriptEngine-Runtime-Core">elementAtIndex: aZeroBasedIndex 	^ (self elementOrNilAtIndex: aZeroBasedIndex) ifNil: [ self undefined ]</body>

<body package="JavascriptEngine-Runtime-Core">elementAtIndex: aZeroBasedIndex put: anElement 	" Set the element at the 0-based index.	anElement can be either a value or a property "	self checkValidIndex: aZeroBasedIndex.	self setLength: ( aZeroBasedIndex + 1 max: self arrayLength ) throw: false.	self arrayElements at: aZeroBasedIndex + 1 put: anElement.</body>

<body package="JavascriptEngine-Runtime-Core">elementOrNilAtIndex: aZeroBasedIndex 	" Returns the element (value or property)  at the 0-based index "	^ ( aZeroBasedIndex &gt;= 0 and: [ aZeroBasedIndex &lt; self arrayElements size ]) 		ifTrue: [ self arrayElements at: aZeroBasedIndex + 1 ]		ifFalse: [ nil ].</body>

<body package="JavascriptEngine-Runtime-Core">elementPropertyOrNilAtIndex: aZeroBasedIndex 	" Returns the property at the 0-based indexed "	| element |	element := self elementOrNilAtIndex: aZeroBasedIndex.	^ element notNil 		ifTrue: 		[	element isProperty 				ifTrue: [ element ]				ifFalse: 				[	" create a volatile property "					JSEDataProperty name: aZeroBasedIndex asJSEPropertyName value: element isWritable: true isEnumerable: true isConfigurable: true				]		]		ifFalse: [ nil ]</body>

<body package="JavascriptEngine-Runtime-Core">length	^ self arrayElements size</body>

<body package="JavascriptEngine-Runtime-Core">setLength: aNumber throw: throw 	" Set the length of the array. Adjust the array elements "	| oldLength newLength newElements  deleteSucceeded deletableLength |	( oldLength := self length ) ~= aNumber 		ifTrue: 		[	deleteSucceeded := true.			deletableLength := oldLength.			newLength := aNumber asInteger.			newLength &lt; oldLength 				ifTrue: 				[	" check if deletable "					deletableLength := self arrayElements jseDeletableLengthFor:  newLength.					deleteSucceeded := deletableLength = newLength.					newLength := deletableLength.				].			newLength ~= oldLength 				ifTrue: 				[	newElements := self arrayElements jseResizedTo: newLength.					self arrayElements: newElements				].			self updateLengthValue.			deleteSucceeded 				ifFalse: 				[	throw 						ifTrue: 						[	JSETypeError raiseSignal: ( 'Could not delete non-configurable property at index &lt;1s&gt;' expandMacrosWith: ( deletableLength - 1 ) printString )						]				]		].</body>

<body package="JavascriptEngine-Runtime-Core">updateLengthValue	" update the #length propery according to the actual length "	self setLengthValue: self length.</body>
</methods>

<methods>
<class-id>JSE.JSEArray</class-id> <category>initialize-release</category>

<body package="JavascriptEngine-Runtime-Core">initializePrototypeFromGlobalObject: globalObject 	super initializePrototypeFromGlobalObject: globalObject .	self initializeWithLength: 0.</body>

<body package="JavascriptEngine-Runtime-Core">initializeWithElements: arrayElements padBefore: padBefore padAfter: padAfter	| length |	length := arrayElements size + padBefore + padAfter.	self initializeWithLength: length.	self arrayElements replaceFrom: padBefore + 1 to: padBefore + arrayElements size with: arrayElements startingAt: 1</body>

<body package="JavascriptEngine-Runtime-Core">initializeWithLength: length 	self checkValidLength: length.	self arrayElements: (JSEPlatform arrayElementsWithSize: length).</body>
</methods>

<methods>
<class-id>JSE.JSEArray</class-id> <category>internal - testing</category>

<body package="JavascriptEngine-Runtime-Core">isArray	^ true</body>
</methods>

<methods>
<class-id>JSE.JSEArray</class-id> <category>internal</category>

<body package="JavascriptEngine-Runtime-Core">arrayIndicesDo: aBlock 	self arrayElements jseIndicesAndValuesDo: [ : index : element |		aBlock value: index	].</body>

<body package="JavascriptEngine-Runtime-Core">defineOwnProperty: property throw: throw 	(property name = #length and: [ property isData and: [ property value isUndefined not ]])		ifTrue: [ self checkValidLength: property value toNumberValue  ].	^ super defineOwnProperty: property throw: throw</body>

<body package="JavascriptEngine-Runtime-Core">delete: propertyName throw: throw 	" so intercept array accesses "	^ ( self indexOfPropertyName: propertyName ) 		ifNotNil: [: index | self deleteIndex: index throw: throw ]		ifNil: [ super delete: propertyName throw: throw ]</body>

<body package="JavascriptEngine-Runtime-Core">deleteIndex: index throw: throw 	| element |	element := self elementOrNilAtIndex: index.	^ element notNil 		ifTrue: 		[( element isProperty not or: [ element isConfigurable ]) 				ifTrue: 				[	self elementAtIndex: index put: nil.					true				]				ifFalse: 				[	throw 						ifTrue: [ JSETypeError raiseSignal: 'Cannot delete property' ].					false				]		]		ifFalse: [ true ]</body>

<body package="JavascriptEngine-Runtime-Core">enumerablePropertyNamesDo: aBlock 	super enumerablePropertyNamesDo: aBlock.	self arrayIndicesDo: [ : i | 		| element |		element := self elementOrNilAtIndex: i.		(element isProperty not or: [ element isEnumerable ])			ifTrue: [ aBlock value: i  ]	]</body>

<body package="JavascriptEngine-Runtime-Core">getIndexOrNil: index 	| element myProto property |	element := self elementOrNilAtIndex: index.	^ element notNil 		ifTrue: [ self valueOfArrayElement: element ]		ifFalse: 		[( myProto := self internalPrototype ) isUndefined 				ifTrue: [ nil ]				ifFalse: 				[	property := myProto getPropertyOrNil: index .					property notNil 						ifTrue: [ property getPropertyValueOf: self ]						ifFalse: [ nil ]				]		]</body>

<body package="JavascriptEngine-Runtime-Core">getOrNil: propertyName 	" intercept array accesses to avoid creating volatile property objects "	^ (( self indexOfPropertyName: propertyName ) ifNotNil: [: index | self getIndexOrNil: index ]) ifNil: [ super getOrNil: propertyName ]</body>

<body package="JavascriptEngine-Runtime-Core">getOwnPropertyOrNil: propertyName 	" intercept array accesses "	^ (( self indexOfPropertyName: propertyName ) ifNotNil: [: index | self elementPropertyOrNilAtIndex: index ]) 		ifNil: [ super getOwnPropertyOrNil: propertyName ]</body>

<body package="JavascriptEngine-Runtime-Core">newObjectClass	^ JSEObject</body>

<body package="JavascriptEngine-Runtime-Core">overwriteProperty: currentProperty with: property throw: throw 	| newProperty |	newProperty := super overwriteProperty: currentProperty with: property throw: throw.	self updateLengthAfterOverwriting: newProperty throw: throw.	^ newProperty</body>

<body package="JavascriptEngine-Runtime-Core">propertyNamesDo: aBlock 	super propertyNamesDo: aBlock.	self arrayIndicesDo: aBlock.</body>

<body package="JavascriptEngine-Runtime-Core">put: propertyName value: value throw: throw 	" do not create properties for array elements "	( self indexOfPropertyName: propertyName ) 		ifNotNil: [: index | self putIndex: index value: value throw: throw ]		ifNil: [ super put: propertyName value: value throw: throw ].</body>

<body package="JavascriptEngine-Runtime-Core">putIndex: index value: value throw: throw 	" do not create properties for array elements "	| element ownProperty |	element := self elementOrNilAtIndex: index.	ownProperty := ( element notNil and: [ element isProperty ]) 			ifTrue: [ element ]			ifFalse: [ nil ].	( self canPut: index ownProperty: ownProperty ) 		ifFalse: 		[	throw 				ifTrue: [ JSETypeError raiseSignal: 'Cannot put property' ]				ifFalse: [ ^ self ]		].	( element isNil and: [ self isExtensible not ]) 		ifTrue: 		[	throw 				ifTrue: [ self raiseNotExtensible ]		]		ifFalse: [ self elementAtIndex: index put: value ].</body>
</methods>

<methods>
<class-id>JSE.JSEArray</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">checkOverwriteDataProperty: ownProperty value: value throw: throw 	( super checkOverwriteDataProperty: ownProperty value: value throw: throw ) 		ifFalse: [ ^ false ].	ownProperty name = #length 		ifTrue: [ self checkValidLength: value toNumberValue ].	^ true</body>

<body package="JavascriptEngine-Runtime-Core">convertToNativeObjectWith: aConversionRegistry	^ self arrayElements  collect: [ : each | each toNativeObjectWith: aConversionRegistry ]</body>

<body package="JavascriptEngine-Runtime-Core">overwriteDataProperty: ownProperty value: value throw: throw 	^ ( super overwriteDataProperty: ownProperty value: value throw: throw ) 		ifTrue: 		[	self updateLengthAfterOverwriting: ownProperty throw: throw.			true		]		ifFalse: [ false ]</body>

<body package="JavascriptEngine-Runtime-Core">uncheckedAddProperty: newProperty 	" intercept array accesses "	( self indexOfPropertyName: newProperty name ) 		ifNotNil: 		[: index |			newProperty canStoreValueInArray 				ifTrue: [ self elementAtIndex: index put: newProperty value ]				ifFalse: [ self elementAtIndex: index put: newProperty ]		]		ifNil: [ super uncheckedAddProperty: newProperty ].</body>

<body package="JavascriptEngine-Runtime-Core">updateLengthAfterOverwriting: newProperty throw: throw 	newProperty name = #length 		ifTrue: [ newProperty valueOrNil ifNotNil: [: newLength | self setLength: newLength toNumberValue throw: throw ]].</body>
</methods>

<methods>
<class-id>JSE.JSEArray</class-id> <category>prototype functions - array</category>

<body package="JavascriptEngine-Runtime-Core">arrayConcat: items 	" see 15.4.4.4 "	| unfoldedItems |	unfoldedItems := OrderedCollection new: items size.	self unfoldConcatItems: items to: unfoldedItems.	^ JSEArray withElements: ( self arrayElements jseConcat: unfoldedItems )</body>

<body package="JavascriptEngine-Runtime-Core">arrayPush: aListOfItems	self arrayElements: (self arrayElements jseAddOrConcat: aListOfItems).	^ self arrayLength</body>

<body package="JavascriptEngine-Runtime-Core">arraySpliceFrom: actualStart actualDeleteCount: actualDeleteCount items: items 	" optimized "	| deletedElements actualStop |	actualStop := actualStart + actualDeleteCount - 1.	deletedElements := self arrayElements copyFrom: actualStart + 1 to: actualStop + 1.	self arrayElements: ( self arrayElements copyReplaceFrom: actualStart + 1 to: actualStop + 1with: items ).	^ JSEArray withElements: deletedElements</body>
</methods>

<methods>
<class-id>JSE.JSEArray</class-id> <category>internal - JSON</category>

<body package="JavascriptEngine-Runtime-Core">asStringifyPropertyList	| propertyList |	propertyList := OrderedCollection new.	0 to: self length - 1 do: [ : i |		(self getIndex: i) asStringifyPropertyName ifNotNil: [ : propertyName |			propertyList add: propertyName		].	].	^ propertyList</body>

<body package="JavascriptEngine-Runtime-Core">stringifyReplacerFunction: replacerFunction propertyList: propertyList gap: gap indent: indent stack: stack executionEnvironment: executionEnvironment 	| partial stream nextIndent separator |	( stack includes: self ) 		ifTrue: [ JSETypeError raiseSignal: 'Cannot stringify cyclical structure' ].	stack addLast: self.	partial := OrderedCollection new.	nextIndent := gap notNil 			ifTrue: [ indent , gap ]			ifFalse: [ indent ].	0 to: self length - 1		do: 		[: i | | propertyString |			propertyString := self 					stringify: i printString					value: (self getIndex: i)					replacerFunction: replacerFunction					propertyList: propertyList					gap: gap					indent: nextIndent					stack: stack					executionEnvironment: executionEnvironment.			propertyString notNil 				ifTrue: [ partial add: propertyString ]				ifFalse: [ partial add: JSENull singleton toStringValue ]		].	stream := String new writeStream.	stream nextPut: $[.	gap notNil 		ifTrue: 		[	separator := ( String with: $, with: Character lf ) , nextIndent.			stream nextPut: Character lf; nextPutAll: nextIndent.			partial do: [: propertyString | stream nextPutAll: propertyString ] separatedBy: [ stream nextPutAll: separator ].			stream nextPut: Character lf; nextPutAll: indent		]		ifFalse: [ partial do: [: propertyString | stream nextPutAll: propertyString ] separatedBy: [ stream nextPut: $, ]].	stream nextPut: $].	stack removeLast.	^ stream contents</body>
</methods>

<methods>
<class-id>JSE.JSEArray</class-id> <category>internal - prototype</category>

<body package="JavascriptEngine-Runtime-Core">defaultPrototype	^ self getPrototype</body>

<body package="JavascriptEngine-Runtime-Core">prototypeOfPrototypeFromGlobalObject: globalObject 	^ JSEObject getPrototypeFromGlobalObject: globalObject</body>
</methods>

<methods>
<class-id>JSE.JSEArray class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">withElements: arrayElements 	^ self withElements: arrayElements padBefore: 0 padAfter: 0</body>

<body package="JavascriptEngine-Runtime-Core">withElements: arrayElements padBefore: padBefore padAfter: padAfter	^ self new initializeWithElements: arrayElements padBefore: padBefore padAfter: padAfter; yourself</body>

<body package="JavascriptEngine-Runtime-Core">withLength: length	^ self new initializeWithLength: length; yourself</body>
</methods>

<methods>
<class-id>JSE.JSEArray class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'An optimized implementation for Array objects'</body>

<body package="JavascriptEngine-Runtime-Core">objectName	^ #Array</body>
</methods>

<methods>
<class-id>JSE.JSECurrentExecutionEnvironment class</class-id> <category>evaluating - comfy</category>

<body package="JavascriptEngine-Runtime-Core">thisValue	^ self value currentExecutionContext thisValue</body>
</methods>

<methods>
<class-id>JSE.JSEDate</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">value	^ value</body>

<body package="JavascriptEngine-Runtime-Core">value: milliceconds 	value := milliceconds jseAsInternalMillisecondValue</body>
</methods>

<methods>
<class-id>JSE.JSEDate</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">asLocalTimestamp	self isValid 		ifFalse: [ JSERangeError raiseSignal: 'Cannot convert invalid date to timestamp' ].	^ self value jseAsTimestamp jseAsLocalTimestamp</body>

<body package="JavascriptEngine-Runtime-Core">asUTCTimestamp	^ self value jseAsTimestamp</body>

<body package="JavascriptEngine-Runtime-Core">convertToNativeObjectWith: aConversionRegistry	" return a Timestamp, not the number of milliseconds "	^ self asLocalTimestamp</body>

<body package="JavascriptEngine-Runtime-Core">internalValueFromValue: aValue 	| primitive number |	primitive := aValue toPrimitive.	number := primitive isJSEString 			ifTrue: [ self parseString: primitive value ]			ifFalse: [ primitive toNumberValue ].	^ number jseIsFinite 		ifTrue: [ number truncated ]		ifFalse: [ JSEPlatform nanValue ]</body>

<body package="JavascriptEngine-Runtime-Core">internalValueFromYear: year month: month date: date hours: hours minutes: minutes seconds: seconds milliseconds: milliseconds isUTC: isUTC 	" Returns the internal value (UTC milliseconds) of the date.	If isUTC  is false, then the date is assumed to be in the local timezone.	See 15.9.1.11 - 14 "	| yearValue monthValue dayValue hourValue minuteValue secondValue millisecondValue timestamp |	yearValue := year toNumberValue.	yearValue jseIsFinite 		ifFalse: [ ^ self class invalidDateValue ].	monthValue := month toNumberValue.	monthValue jseIsFinite 		ifFalse: [ ^ self class invalidDateValue ].	dayValue := date isNil 			ifTrue: [ 1 ]			ifFalse: [ date toNumberValue ].	dayValue jseIsFinite 		ifFalse: [ ^ self class invalidDateValue ].	hourValue := hours isNil 			ifTrue: [ 0 ]			ifFalse: [ hours toNumberValue ].	hourValue jseIsFinite 		ifFalse: [ ^ self class invalidDateValue ].	minuteValue := minutes isNil 			ifTrue: [ 0 ]			ifFalse: [ minutes toNumberValue ].	minuteValue jseIsFinite 		ifFalse: [ ^ self class invalidDateValue ].	secondValue := seconds isNil 			ifTrue: [ 0 ]			ifFalse: [ seconds toNumberValue ].	secondValue jseIsFinite 		ifFalse: [ ^ self class invalidDateValue ].	millisecondValue := milliseconds isNil 			ifTrue: [ 0 ]			ifFalse: [ milliseconds toNumberValue ].	millisecondValue jseIsFinite 		ifFalse: [ ^ self class invalidDateValue ].	( yearValue &gt;= 0 and: [ yearValue &lt;= 99 ]) 		ifTrue: [ yearValue := yearValue + 1900 ].	monthValue := monthValue + 1.	timestamp := JSEPlatform 			timestampFromYear: yearValue			month: monthValue			day: dayValue			hours: hourValue			minutes: minuteValue			seconds: secondValue			milliseconds: millisecondValue.	timestamp jseNormalize.	^ isUTC 		ifTrue: [ timestamp jseAsMilliseconds ]		ifFalse: [ timestamp jseAsUTCMilliseconds ]</body>

<body package="JavascriptEngine-Runtime-Core">intervalValueFromElements: dateElements isUTC: isUTC 	" year and month are required, all other elements are optional "	| elementsSize |	elementsSize := dateElements size.	^ self 		internalValueFromYear: ( elementsSize &gt;= 1 				ifTrue: [ dateElements at: 1 ]				ifFalse: [ self undefined ])		month: ( elementsSize &gt;= 2 				ifTrue: [ dateElements at: 2 ]				ifFalse: [ self undefined ])		date: ( elementsSize &gt;= 3 				ifTrue: [ dateElements at: 3 ]				ifFalse: [ nil ])		hours: ( elementsSize &gt;= 4 				ifTrue: [ dateElements at: 4 ]				ifFalse: [ nil ])		minutes: ( elementsSize &gt;= 5 				ifTrue: [ dateElements at: 5 ]				ifFalse: [ nil ])		seconds: ( elementsSize &gt;= 6 				ifTrue: [ dateElements at: 6 ]				ifFalse: [ nil ])		milliseconds: ( elementsSize &gt;= 7 				ifTrue: [ dateElements at: 7 ]				ifFalse: [ nil ])		isUTC: isUTC</body>

<body package="JavascriptEngine-Runtime-Core">isValid	^ self value isNaN not</body>

<body package="JavascriptEngine-Runtime-Core">modifyTimestamp: aTimestampBlock get: getBlock set: setBlock	" set the internal value from the timestamp passed to the block"	| timestamp |	self isValid 		ifTrue: 		[	timestamp := getBlock value.			aTimestampBlock value: timestamp.			timestamp jsIsValid 				ifTrue: 				[	timestamp jseNormalize.					setBlock value: timestamp				]				ifFalse: [ self value: self class invalidDateValue ]		].</body>

<body package="JavascriptEngine-Runtime-Core">modifyTimestamp: aTimestampBlock inUTC: inUTC 	" set the internal value from the timestamp passed to the block"	inUTC 		ifTrue: [ self modifyTimestamp: aTimestampBlock get: [ self asUTCTimestamp ] set: [: timestamp | self value: timestamp ]]		ifFalse: [ self modifyTimestamp: aTimestampBlock get: [ self asLocalTimestamp ] set: [: timestamp | self value: timestamp jseAsUTCTimestamp ]].</body>

<body package="JavascriptEngine-Runtime-Core">parseString: aString	" Returns an internal value. See 5.9.1.15 "	^ (self class parseDateString: aString) ifNil: [ self class invalidDateValue ]</body>

<body package="JavascriptEngine-Runtime-Core">toDateStringValue: aTimestamp isUTC: isUTC locale: locale 	^ self 		toStringValue: aTimestamp		valueBlock: [: timestamp | timestamp asDate ]		isUTC: isUTC		locale: locale		policy: #long		printTimezone: false</body>

<body package="JavascriptEngine-Runtime-Core">toStringValue	^ self isValid 		ifTrue: [ self toStringValue: self asLocalTimestamp isUTC: false locale: Locale current ]		ifFalse: [ self class invalidDateString ]</body>

<body package="JavascriptEngine-Runtime-Core">toStringValue: aTimestamp isUTC: isUTC locale: locale 	^ self toStringValue: aTimestamp valueBlock: [: timestamp | timestamp ] isUTC: isUTC locale: locale policy: #long printTimezone: true</body>

<body package="JavascriptEngine-Runtime-Core">toStringValue: aTimestamp valueBlock: valueBlock isUTC: isUTC locale: locale policy: policy printTimezone: printTimezone 	" Utility method to print timestamp/time/date values "	^ JSEPlatform toStringValue: aTimestamp valueBlock: valueBlock isUTC: isUTC locale: locale policy: policy printTimezone: printTimezone</body>

<body package="JavascriptEngine-Runtime-Core">toTimeStringValue: aTimestamp isUTC: isUTC locale: locale 	^ self 		toStringValue: aTimestamp		valueBlock: [: timestamp | timestamp asTime ]		isUTC: isUTC		locale: locale		policy: #long		printTimezone: true</body>
</methods>

<methods>
<class-id>JSE.JSEDate</class-id> <category>prototype functions - date</category>

<body package="JavascriptEngine-Runtime-Core">dateToJSON: key	^ self isValid		ifTrue: [ self uncheckedDateToISOString ]		ifFalse: [ nil ]</body>
</methods>

<methods>
<class-id>JSE.JSEDate</class-id> <category>internal - prototype</category>

<body package="JavascriptEngine-Runtime-Core">createPrototypeObjectForGlobalObject: globalObject 	| prototype |	prototype := super createPrototypeObjectForGlobalObject: globalObject .	prototype primitiveValue: (self class value: self class invalidDateValue).	^ prototype</body>
</methods>

<methods>
<class-id>JSE.JSEDate</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">toDate	^ self</body>

<body package="JavascriptEngine-Runtime-Core">toObject	^ JSEPrimitiveObject primitiveValue: self</body>
</methods>

<methods>
<class-id>JSE.JSEDate</class-id> <category>functions - private</category>

<body package="JavascriptEngine-Runtime-Core">dateToString	" ECMA demands a 'human-readble' form, so simply return the same string as toLocaleString() "	^ self toLocaleString</body>

<body package="JavascriptEngine-Runtime-Core">setHours: hours minutes: minutes seconds: seconds milliseconds: milliseconds inUTC: inUTC	self 		modifyTimestamp: 		[: timestamp |			(hours notNil and: [ hours isUndefined not ])				ifTrue: [ timestamp hour: hours toNumberValue ].			(minutes notNil and: [ minutes isUndefined not ])				ifTrue: [ timestamp minute: minutes toNumberValue ].			(seconds notNil and: [ seconds isUndefined not ])				ifTrue: [ timestamp second: seconds toNumberValue ].			(milliseconds  notNil and: [ milliseconds isUndefined not ])				ifTrue: [ timestamp millisecond: milliseconds toNumberValue ]		]		inUTC: inUTC</body>

<body package="JavascriptEngine-Runtime-Core">setYear: year month: month day: day inUTC: inUTC	self 		modifyTimestamp: 		[: timestamp |			(year notNil and: [ year isUndefined not ])				ifTrue: [ timestamp year: year toNumberValue ].			(month notNil and: [ month isUndefined not ])				ifTrue: [ timestamp month: month toNumberValue + 1 ].			(day notNil and: [ day isUndefined not ])				ifTrue: [ timestamp day: day toNumberValue ].		]		inUTC: inUTC</body>

<body package="JavascriptEngine-Runtime-Core">toLocaleDateString	^ self isValid 		ifTrue: [ self toDateStringValue: self asLocalTimestamp isUTC: false locale: Locale current ]		ifFalse: [ self class invalidDateString ]</body>

<body package="JavascriptEngine-Runtime-Core">toLocaleString	^ self isValid 		ifTrue: [ self toStringValue: self asLocalTimestamp isUTC: false locale: Locale current ]		ifFalse: [ self class invalidDateString ]</body>

<body package="JavascriptEngine-Runtime-Core">toLocaleTimeString	^ self isValid 		ifTrue: [ self toTimeStringValue: self asLocalTimestamp isUTC: false locale: Locale current ]		ifFalse: [ self class invalidDateString ]</body>

<body package="JavascriptEngine-Runtime-Core">toTimeString	" ECMA demands a 'human-readble' form, so simply return the same strign as toLocaleTimeString() "	^ self toLocaleTimeString</body>

<body package="JavascriptEngine-Runtime-Core">uncheckedDateToISOString	^ self 		toStringValue: self asUTCTimestamp		valueBlock: [: timestamp | timestamp ]		isUTC: true		locale: Locale current		policy: #iso8601Enhanced		printTimezone: true</body>
</methods>

<methods>
<class-id>JSE.JSEDate</class-id> <category>printing</category>

<body package="JavascriptEngine-Runtime-Core">printOn: aStream 	aStream nextPutAll: self toStringValue.	aStream nextPutAll: ' ('.	self value printOn: aStream.	aStream nextPutAll: ')'.</body>
</methods>

<methods>
<class-id>JSE.JSEDate class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">value: aTimestampOrMilliseconds	^ self new value: aTimestampOrMilliseconds ; yourself</body>
</methods>

<methods>
<class-id>JSE.JSEDate class</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">invalidDateString	^ 'Invalid Date'</body>

<body package="JavascriptEngine-Runtime-Core">invalidDateValue	" value representing invalid dates "	^ JSEPlatform nanValue</body>

<body package="JavascriptEngine-Runtime-Core">parseDateString: aString 	" Returns an internal Date value, or nil if the value could not be parsed.	See 5.9.1.15 "	| dateRegexStrings timeRegexStrings dateParts timeParts timezoneRegexString |	dateRegexStrings := #( 		'(\d\d\d\d)-(\d\d)-(\d\d)' 		'(\d\d\d\d)-(\d\d)' 		'(\d\d\d\d)' 	).	timeRegexStrings := #(		'T(\d\d)\:(\d\d)\:(\d\d)\.(\d\d\d)'		'T(\d\d)\:(\d\d)\:(\d\d)'		'T(\d\d)\:(\d\d)' 	).	timezoneRegexString := '(Z|([+-])(\d\d)\:(\d\d))?'.	dateParts := 3.	dateRegexStrings do: 		[: dateRegexString |			" date only "			( self parseDateString: aString regexString: dateRegexString, timezoneRegexString dateParts: dateParts timeParts: 0 ) ifNotNil: [: dateValue | ^ dateValue ].			timeParts := 4.			timeRegexStrings do: 				[: timeRegexString |					" date and time "					( self parseDateString: aString regexString: dateRegexString , timeRegexString, timezoneRegexString dateParts: dateParts timeParts: timeParts ) 						ifNotNil: [: dateValue | ^ dateValue ].					timeParts := timeParts - 1				].			dateParts := dateParts - 1		].	timeParts := 4.	timeRegexStrings do: 		[: timeRegexString |			" time only "			( self parseDateString: aString regexString: timeRegexString dateParts: 0 timeParts: timeParts ) ifNotNil: [: dateValue | ^ dateValue ].			timeParts := timeParts - 1		].	^ nil</body>

<body package="JavascriptEngine-Runtime-Core">parseDateString: aString regexString: regexString dateParts: dateParts timeParts: timeParts 	" try to parse and convert the string with the regular expression "	| year month day hours minutes seconds milliseconds regex timestamp timezoneOffset timezoneHours timezoneMinutes timezoneSign timezoneIndex utcTimestamp |	regex := JSEPlatform asRegex: regexString ignoreCase: false.	( regex matches: aString ) 		ifFalse: [ ^ nil ].	year := 1970.	month := 1.	day := 1.	hours := 0.	minutes := 0.	seconds := 0.	milliseconds := 0.	timezoneOffset := nil.	dateParts &gt;= 1 		ifTrue: 		[	year := ( regex subexpression: 2 ) jseAsInteger.			dateParts &gt;= 2 				ifTrue: 				[	month := ( regex subexpression: 3 ) jseAsInteger.					dateParts &gt;= 3 						ifTrue: [ day := ( regex subexpression: 4 ) jseAsInteger ]				]		].	timeParts &gt;= 1 		ifTrue: 		[	hours := ( regex subexpression: 2 + dateParts ) jseAsInteger.			timeParts &gt;= 2 				ifTrue: 				[	minutes := ( regex subexpression: 3 + dateParts ) jseAsInteger.					timeParts &gt;= 3 						ifTrue: 						[	seconds := ( regex subexpression: 4 + dateParts ) jseAsInteger.							timeParts &gt;= 4 								ifTrue: [ milliseconds := ( regex subexpression: 5 + dateParts ) jseAsInteger ]						]				].			" optional timezone "			timezoneIndex := 3 + dateParts + timeParts.			regex subexpressionCount &gt;= timezoneIndex 				ifTrue: 				[	timezoneOffset := 0 seconds.					timezoneSign := regex subexpression: timezoneIndex.					timezoneSign notNil 						ifTrue: 						[	timezoneHours := regex subexpression: timezoneIndex + 1.							timezoneHours notNil 								ifTrue: 								[	timezoneMinutes := regex subexpression: timezoneIndex + 2.									timezoneMinutes notNil 										ifTrue: 										[	timezoneOffset := timezoneHours jseAsInteger hours + timezoneMinutes jseAsInteger minutes.											timezoneSign = '-' 												ifTrue: [ timezoneOffset := timezoneOffset negated ]										]								]						]				]		].	timestamp := JSEPlatform timestampFromYear: year month: month day: day hours: hours minutes: minutes seconds: seconds milliseconds: milliseconds.	" If a time without timezone is specified, assume a local time. Unfortunately, this is not specified by the ECMA standard "	( timezoneOffset isNil and: [ timeParts &gt; 0 ]) 		ifTrue: [ timezoneOffset := timestamp jseTimeZone ].	utcTimestamp := timezoneOffset notNil 			ifTrue: [ timestamp - timezoneOffset ]			ifFalse: [ timestamp ].	^ utcTimestamp jseAsMilliseconds</body>
</methods>

<methods>
<class-id>JSE.JSEDate class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'A date primitive. The internal value is the date as milliseconds in UTC'</body>

<body package="JavascriptEngine-Runtime-Core">objectName	^ #Date</body>

<body package="JavascriptEngine-Runtime-Core">typeOfSymbol	^ #date</body>
</methods>

<methods>
<class-id>JSE.JSENodeCodeSection</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">lineNumberInterval	^ self node lineNumberInterval</body>

<body package="JavascriptEngine-Runtime-Core">node	" Returns the AST node associated with this section "	^ node</body>

<body package="JavascriptEngine-Runtime-Core">node: aNode 	node := aNode.</body>

<body package="JavascriptEngine-Runtime-Core">sourceInterval	^ self node sourceInterval</body>

<body package="JavascriptEngine-Runtime-Core">sourceString	^ self node notNil 		ifTrue: [ self node sourceString ]		ifFalse: [ nil ]</body>
</methods>

<methods>
<class-id>JSE.JSENodeCodeSection</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">lineNumber	lineNumber isNil 		ifTrue: [ lineNumber := self node lineNumber ].	^ lineNumber</body>
</methods>

<methods>
<class-id>JSE.JSENodeCodeSection</class-id> <category>evaluating</category>

<body package="JavascriptEngine-Runtime-Core">executeIn: anExecutionContext 	| oldSection result |	oldSection := anExecutionContext currentCodeSection.	anExecutionContext currentCodeSection: self.	anExecutionContext executionEnvironment triggerEventsForCodeSection: self in: anExecutionContext.	result := anExecutionContext implementation perform: self selector withArguments: self arguments.	anExecutionContext currentCodeSection: oldSection.	^ result</body>

<body package="JavascriptEngine-Runtime-Core">getValueIn: anExecutionContext 	| oldSection result |	oldSection := anExecutionContext currentCodeSection.	anExecutionContext currentCodeSection: self.	anExecutionContext executionEnvironment triggerEventsForCodeSection: self in: anExecutionContext.	result := ( anExecutionContext implementation perform: self selector withArguments: self arguments ) 			getValue.	anExecutionContext currentCodeSection: oldSection.	^ result</body>
</methods>

<methods>
<class-id>JSE.JSEFunctionCode</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">formalParameters	^ self function formalParameters</body>

<body package="JavascriptEngine-Runtime-Core">function	^ function</body>

<body package="JavascriptEngine-Runtime-Core">function: aFunction 	function := aFunction.</body>
</methods>

<methods>
<class-id>JSE.JSEFunctionCode</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">addArguments: arguments toEnvironment: variableEnvironment strict: strict 	" see 10.4.3 Entering Function Code / 10.5 Declaration Binding Instantiation "	| environmentRecord formalParameters |	environmentRecord := variableEnvironment environmentRecord.	" bind formal parameters to arguments "	formalParameters := self function formalParameters.	1 to: formalParameters size		do: 		[: n | | argumentValue argumentName |			argumentName := formalParameters at: n.			" some built-in functions have ellipsis parameters. need to create a binding for the arguments "			argumentValue := JSEFunction ellipsisParameterName = argumentName 					ifTrue: 					[	n &lt;= arguments size 							ifTrue: [ arguments copyFrom: n to: arguments size ]							ifFalse: [ #( )]					]					ifFalse: 					[	n &lt;= arguments size 							ifTrue: [ arguments at: n ]							ifFalse: [ JSEUndefined singleton ]					].			( environmentRecord hasBinding: argumentName ) 				ifFalse: [ environmentRecord createMutableBinding: argumentName ].			environmentRecord setMutableBinding: argumentName value: argumentValue strict: strict		].</body>

<body package="JavascriptEngine-Runtime-Core">addArgumentsObjectFor: arguments strict: strict functionObject: functionObject toExecutionContext: executionContext 	" Create an arguments object.	This is rather expensive, so only build it on demand.	See 10.5 Declaration Binding Instantiation and 10.6 Arguments Object "	| environmentRecord |	environmentRecord := executionContext variableEnvironment environmentRecord.	( environmentRecord hasBinding: #arguments ) 		ifFalse: [ environmentRecord createMutableBinding: #arguments ].	environmentRecord 		setMutableBinding: #arguments		value: [ self createArgumentsObjectFor: arguments strict: strict functionObject: functionObject toExecutionContext: executionContext ]		strict: strict.</body>

<body package="JavascriptEngine-Runtime-Core">createArgumentsObjectFor: arguments strict: strict functionObject: functionObject toExecutionContext: executionContext 	" see 10.5 Declaration Binding Instantiation and 10.6 Arguments Object "	| argumentsObject |	argumentsObject := JSEArgumentsObject new.	argumentsObject internalPrototype: ( JSEObject getPrototypeIn: executionContext executionEnvironment ).	argumentsObject classString: 'Arguments'.	argumentsObject 		uncheckedAddProperty: ( JSEDataProperty name: #length value: arguments size asJSEObject isWritable: true isEnumerable: false isConfigurable: true ).	strict 		ifFalse: 		[	argumentsObject 				parameterMap: ( self createParameterMapFor: arguments strict: strict functionObject: functionObject executionContext: executionContext )		].	arguments size to: 1		by: -1		do: 		[: index |			argumentsObject uncheckedAddProperty: ( JSEDataProperty 						name: ( index - 1 ) asJSEPropertyName						value: ( arguments at: index )						isWritable: true						isEnumerable: true						isConfigurable: true )		].	strict 		ifTrue: 		[	argumentsObject addTypeErrorAccessorForPropertiesNamed: #( #caller #callee ) executionEnvironment: executionContext executionEnvironment		]		ifFalse: 		[	argumentsObject 				uncheckedAddProperty: ( JSEDataProperty name: #callee value: functionObject isWritable: true isEnumerable: false isConfigurable: true )		].	^ argumentsObject</body>

<body package="JavascriptEngine-Runtime-Core">createExecutionContextWithThis: thisObject arguments: arguments scope: scopeEnvironment strict: strict executionEnvironment: executionEnvironment functionObject: functionObject 	" see 10.5 Declaration Binding Instantiation "	| executionContext variableEnvironment |	executionContext := self createExecutionContextWithThis: thisObject scope: scopeEnvironment strict: strict executionEnvironment: executionEnvironment.	variableEnvironment := executionContext variableEnvironment.	self addArguments: arguments toEnvironment: variableEnvironment strict: strict.	self createFunctionBindingsIn: variableEnvironment executionContext: executionContext.	( variableEnvironment hasOwnBinding: #arguments ) 		ifFalse: [ self addArgumentsObjectFor: arguments strict: strict functionObject: functionObject toExecutionContext: executionContext ].	self createVariableBindingsIn: variableEnvironment executionContext: executionContext.	^ executionContext</body>

<body package="JavascriptEngine-Runtime-Core">createExecutionContextWithThis: thisObject scope: scopeEnvironment strict: strict executionEnvironment: executionEnvironment 	" see 10.4.3 Entering Function Code "	| localEnvironment executionContext thisBinding |	thisBinding := strict 			ifTrue: [ thisObject ]			ifFalse: 			[( thisObject isUndefined or: [ thisObject isJSENull ]) 					ifTrue: [ executionEnvironment globalObject ]					ifFalse: [ thisObject toObject ]			].	localEnvironment := scopeEnvironment newDeclarativeEnvironment.	executionContext := JSEFunctionExecutionContext thisBinding: thisBinding lexicalEnvironment: localEnvironment variableEnvironment: localEnvironment.	executionContext executionEnvironment: executionEnvironment.	" knowing the function is useful for debugging / logging / error messages "	executionContext code: self.	" inital node is the sender "	executionContext currentCodeSection: executionEnvironment currentExecutionContext currentCodeSection.	^ executionContext</body>

<body package="JavascriptEngine-Runtime-Core">createParameterMapFor: arguments strict: strict functionObject: functionObject executionContext: executionContext 	" see 10.6 Arguments Object "	| map formalParameters mappedNames lexicalEnvironment |	map := JSEObject constructNewObjectIn: executionContext executionEnvironment.	formalParameters := self formalParameters.	mappedNames := Set new.	lexicalEnvironment := executionContext lexicalEnvironment.	arguments size to: 1		by: -1		do: 		[: index | | name getFunction setFunction accessor |			index &lt;= formalParameters size 				ifTrue: 				[	name := formalParameters at: index.					( mappedNames includes: name ) 						ifFalse: 						[	mappedNames add: name.							getFunction := self getFunctionForArgumentNamed: name environment: lexicalEnvironment strict: strict.							setFunction := self setFunctionForArgumentNamed: name environment: lexicalEnvironment strict: strict.							accessor := JSEAccessorProperty name: ( index - 1 ) asJSEPropertyName getFunction: getFunction setFunction: setFunction.							map uncheckedAddProperty: accessor						]				]		].	^ map</body>

<body package="JavascriptEngine-Runtime-Core">getFunctionForArgumentNamed: name environment: environment strict: strict 	" get function for the arguments object "	| functionDeclaration functionObject protoObject |	functionDeclaration := JSEBuiltInFunctionDeclaration 			declareFunctionNamed: #get			parameters: #( )			length: 0			block: [: arguments : executionContext | ( executionContext lexicalEnvironment getIdentifierReference: name strict: strict ) getValue ]			strict: strict.	protoObject := JSEObject new.	functionObject := functionDeclaration createFunctionObjectInEnvironment: environment strict: strict prototypeObject: protoObject writable: false.	^ functionObject</body>

<body package="JavascriptEngine-Runtime-Core">setFunctionForArgumentNamed: name environment: environment strict: strict 	" set function for the arguments object "	| functionDeclaration functionObject protoObject |	functionDeclaration := JSEBuiltInFunctionDeclaration 			declareFunctionNamed: #set			parameters: #( #'_arg' )			length: 0			block: 			[: arguments : executionContext | | value nameReference |				nameReference := executionContext lexicalEnvironment getIdentifierReference: name strict: strict.				value := ( executionContext lexicalEnvironment getIdentifierReference: #'_arg' strict: strict ) getValue.				nameReference putValue: value.				JSEUndefined singleton			]			strict: strict.	protoObject := JSEObject new.	functionObject := functionDeclaration createFunctionObjectInEnvironment: environment strict: strict prototypeObject: protoObject writable: false.	^ functionObject</body>
</methods>

<methods>
<class-id>JSE.JSEFunctionCode</class-id> <category>printing</category>

<body package="JavascriptEngine-Runtime-Core">displayString	| stream |	^ self function notNil 		ifTrue: 		[	stream := String new writeStream.			self function printFunctionSignatureOn: stream.			stream contents		]		ifFalse: [ super displayString ]</body>

<body package="JavascriptEngine-Runtime-Core">printOn: aStream 	self function notNil 		ifTrue: [ self function printFunctionSignatureOn: aStream ]		ifFalse: [ super printOn: aStream ].</body>
</methods>

<methods>
<class-id>JSE.JSEFunctionCode</class-id> <category>call</category>

<body package="JavascriptEngine-Runtime-Core">callWithThis: thisObject arguments: arguments executionEnvironment: executionEnvironment scope: scopeEnvironment strict: strict functionObject: functionObject callerIsStrict: callerIsStrict isDirectEvalCall: isDirectEvalCall 	" see 13.2.1 [[Call]] "	| executionContext |	executionContext := self 			createExecutionContextWithThis: thisObject			arguments: arguments			scope: scopeEnvironment			strict: strict			executionEnvironment: executionEnvironment			functionObject: functionObject.	executionContext callerIsStrict: callerIsStrict.	executionContext isDirectEvalCall: isDirectEvalCall.	^ executionEnvironment increaseStepDepthWhile: 		[				[	executionEnvironment pushExecutionContext: executionContext.				[ self codeSection executeIn: executionContext ] 					on: JSECompletion					do: [: completion | completion handleForFunctionCall ]			] ensure: [ executionEnvironment popExecutionContext ]		]</body>
</methods>

<methods>
<class-id>JSE.JSEFunctionCode class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">function: aFunction 	^ self new function: aFunction;		yourself</body>
</methods>

<methods>
<class-id>JSE.JSEObject</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">checkTypeIsObject: object 	object checkTypeIsObject</body>

<body package="JavascriptEngine-Runtime-Core">convertToNativeObjectWith: aConversionRegistry	| nativeObject |	nativeObject := Dictionary new.	aConversionRegistry at: self put: nativeObject .	self properties do: [ : property |		| key value |		property isData ifTrue:[ 			key := property name asJSEPropertyNameString.			value := property valueOrNil toNativeObjectWith: aConversionRegistry.			nativeObject at: key put: value		].	].	^ nativeObject</body>
</methods>

<methods>
<class-id>JSE.JSEObject</class-id> <category>internal - prototype</category>

<body package="JavascriptEngine-Runtime-Core">defaultPrototype	^ self getPrototype</body>

<body package="JavascriptEngine-Runtime-Core">prototypeOfPrototypeFromGlobalObject: globalObject 	^ JSENull singleton</body>
</methods>

<methods>
<class-id>JSE.JSEObject class</class-id> <category>testing</category>

<body package="JavascriptEngine-Runtime-Core">isPartOfBootstrap	^ true</body>
</methods>

<methods>
<class-id>JSE.JSEObject class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'Represent literal objects, prototype objects and objects  created with the new operator'</body>

<body package="JavascriptEngine-Runtime-Core">objectName	^ #Object</body>
</methods>

<methods>
<class-id>JSE.JSEBoolean</class-id> <category>logical operations</category>

<body package="JavascriptEngine-Runtime-Core">not	self subclassResponsibility</body>
</methods>

<methods>
<class-id>JSE.JSEBoolean</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">value	JSETypeError raiseSignal: 'Abstract boolean objects do not have a value'</body>
</methods>

<methods>
<class-id>JSE.JSEBoolean</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">toBoolean	^ self</body>

<body package="JavascriptEngine-Runtime-Core">toBooleanValue	^ self value</body>

<body package="JavascriptEngine-Runtime-Core">toObject	^ JSEPrimitiveObject primitiveValue: self</body>
</methods>

<methods>
<class-id>JSE.JSEBoolean</class-id> <category>internal - prototype</category>

<body package="JavascriptEngine-Runtime-Core">createPrototypeObjectForGlobalObject: globalObject 	| prototype |	prototype := super createPrototypeObjectForGlobalObject: globalObject .	prototype primitiveValue: (self class value: false).	^ prototype</body>
</methods>

<methods>
<class-id>JSE.JSEBoolean</class-id> <category>internal - JSON</category>

<body package="JavascriptEngine-Runtime-Core">stringifyReplacerFunction: replacerFunction propertyList: propertyList gap: gap indent: indent stack: stack executionEnvironment: executionEnvironment 	^ self toStringValue</body>
</methods>

<methods>
<class-id>JSE.JSEBoolean</class-id> <category>comparing - private</category>

<body package="JavascriptEngine-Runtime-Core">equalsObjectOfDifferentType: anotherObject	" see 11.9.3 The Abstract Equality Comparison Algorithm "	^ self toNumber equals: anotherObject</body>
</methods>

<methods>
<class-id>JSE.JSEBoolean</class-id> <category>functions - private</category>

<body package="JavascriptEngine-Runtime-Core">booleanToString	^ self toString</body>

<body package="JavascriptEngine-Runtime-Core">booleanValueOf	^ self</body>
</methods>

<methods>
<class-id>JSE.JSEBoolean</class-id> <category>internal - testing</category>

<body package="JavascriptEngine-Runtime-Core">isJSEBoolean	^ true</body>
</methods>

<methods>
<class-id>JSE.JSEBoolean class</class-id> <category>testing</category>

<body package="JavascriptEngine-Runtime-Core">isAbstract	^ self == JSEBoolean</body>
</methods>

<methods>
<class-id>JSE.JSEBoolean class</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">toNumberValue: aBolean 	^ aBolean 		ifTrue: [ 1 ]		ifFalse: [ 0 ]</body>
</methods>

<methods>
<class-id>JSE.JSEBoolean class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">value: aBoolean 	^ aBoolean 		ifTrue: [ JSETrue singleton ]		ifFalse: [ JSEFalse singleton ]</body>
</methods>

<methods>
<class-id>JSE.JSEBoolean class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'Boolean primitive'</body>

<body package="JavascriptEngine-Runtime-Core">objectName	^ #Boolean</body>

<body package="JavascriptEngine-Runtime-Core">typeOfSymbol	^ #boolean</body>
</methods>

<methods>
<class-id>JSE.JSEGlobalObject</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">getPrototypeNamed: aName namespace: aNamespacePath 	| namespaceObject |	namespaceObject := self.	aNamespacePath do: [ : namespaceName |		namespaceObject := namespaceObject get: namespaceName .		namespaceObject isUndefined ifTrue: [ ^ self undefined ].	].	^ ( namespaceObject get: aName ) get: #prototype</body>
</methods>

<methods>
<class-id>JSE.JSEGlobalObject</class-id> <category>functions - private</category>

<body package="JavascriptEngine-Runtime-Core">decodeURIComponentReserved	^ #()</body>

<body package="JavascriptEngine-Runtime-Core">decodeURIReserved	DecodeURIReserved isNil 		ifTrue: 		[	DecodeURIReserved := Set new.			DecodeURIReserved addAll: self uriReserved.			DecodeURIReserved add: $#		].	^ DecodeURIReserved</body>

<body package="JavascriptEngine-Runtime-Core">encodeSurrogateHigh: high low: low on: encodeStream 	| val bytes |	val := ((high - 16rD800) bitShift: 10) + (low - 16rDC00) + 16r10000.	bytes := ByteArray		with: (16rF0 + ((val bitAnd: 16r1C0000) bitShift: -18)) 		with: (16r80 + ((val bitAnd: 16r3F000) bitShift: -12)) 		with: (16r80 + ((val bitAnd: 16rFC0) bitShift: -6)) 		with: (16r80 + (val bitAnd: 16r3F) ).	self encodeURIBytes: bytes on: encodeStream</body>

<body package="JavascriptEngine-Runtime-Core">encodeURIBytes: bytes on: encodeStream 	bytes do: 		[: byte |			encodeStream nextPut: $%.			byte printOn: encodeStream paddedWith: $0 to: 2 base: 16		]</body>

<body package="JavascriptEngine-Runtime-Core">encodeURIComponentUnescaped	EncodeURIComponentUnescaped isNil 		ifTrue: 		[	EncodeURIComponentUnescaped := Set new.			EncodeURIComponentUnescaped addAll: self uriMarks.			EncodeURIComponentUnescaped addAll: self uriAlpha.			EncodeURIComponentUnescaped addAll: self uriDigits		].	^ EncodeURIComponentUnescaped</body>

<body package="JavascriptEngine-Runtime-Core">encodeURIUnescaped	EncodeURIUnescaped isNil 		ifTrue: 		[	EncodeURIUnescaped := Set new.			EncodeURIUnescaped addAll: self uriReserved.			EncodeURIUnescaped addAll: self uriMarks.			EncodeURIUnescaped addAll: self uriAlpha.			EncodeURIUnescaped addAll: self uriDigits.			EncodeURIUnescaped add: $#		].	^ EncodeURIUnescaped</body>

<body package="JavascriptEngine-Runtime-Core">hexValueOf: aCharacter 	^ (aCharacter jseAlphaNumValueWithRadix: 16) ifNil: [ JSEURIError raiseSignal: ( 'Hexidecimal value expected:  ' copyWith: aCharacter ) ]</body>

<body package="JavascriptEngine-Runtime-Core">uriAlpha	^ 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</body>

<body package="JavascriptEngine-Runtime-Core">uriDecode: string reserved: reservedCharacters 	| readStream decodeStream byteStream  byteStrings |	readStream := string readStream.	decodeStream := String new writeStream.	byteStream := ByteArray new writeStream.	byteStrings := OrderedCollection new.	[ readStream atEnd ] whileFalse: 		[ | char code1 code2 byte byteStart |			char := readStream next.			char = $% 				ifTrue: 				[	byteStart := readStream position.					code1 := readStream next.					code2 := readStream next.					( code1 isNil or: [ code2 isNil ]) 						ifTrue: [ JSEURIError raiseSignal: 'Incomplete hex sequence' ].					byte := ( self hexValueOf: code1 ) * 16 + ( self hexValueOf: code2 ).					byteStream nextPut: byte.					byteStrings add: (string copyFrom: byteStart to: byteStart + 2).				]				ifFalse: 				[	byteStream position &gt; 0 						ifTrue: 						[	self utf8DecodeBytes: byteStream contents byteStrings: byteStrings reserved: reservedCharacters on: decodeStream.							byteStream := ByteArray new writeStream.							byteStrings := OrderedCollection new.						].					decodeStream nextPut: char				]		].	byteStream position &gt; 0 		ifTrue: 		[	self utf8DecodeBytes: byteStream contents byteStrings: byteStrings reserved: reservedCharacters on: decodeStream.		].	^ decodeStream contents</body>

<body package="JavascriptEngine-Runtime-Core">uriDigits	^ '1234567890'</body>

<body package="JavascriptEngine-Runtime-Core">uriEncode: string unescaped: unescapedCharacters 	" see 15.1.3 URI Handling Function Properties.	Basically uses the built-in UTF-8 decoder, with special handling for surrogates "	| readStream encodeStream lowSurrogates highSurrogates lastHighSurrogate |	readStream := string readStream.	encodeStream := String new writeStream.	highSurrogates := 16rD800 to: 16rDBFF.	lowSurrogates := 16rDC00 to: 16rDFFF.	lastHighSurrogate := nil.	[ readStream atEnd ] whileFalse: 		[ | char bytes codePoint isLowSurrogate |			char := readStream next.			( unescapedCharacters includes: char ) 				ifTrue: [ encodeStream nextPut: char ]				ifFalse: 				[	codePoint := char codePoint.					isLowSurrogate := lowSurrogates includes: codePoint.					( lastHighSurrogate notNil xor: isLowSurrogate ) 						ifTrue: 						[	JSEURIError raiseSignal: ( 'Malformed surrogate character &lt;1s&gt; not allowed in URIs' expandMacrosWith: codePoint jseHexString )						].					isLowSurrogate 						ifTrue: 						[	self encodeSurrogateHigh: lastHighSurrogate low: codePoint on: encodeStream.							lastHighSurrogate := nil						]						ifFalse: 						[	lastHighSurrogate := ( highSurrogates includes: codePoint ) 									ifTrue: [ codePoint ]									ifFalse: [ nil ].							lastHighSurrogate isNil 								ifTrue: 								[	bytes := ( String with: char ) asByteArrayEncoding: #utf8.									self encodeURIBytes: bytes on: encodeStream								]						]				]		].	lastHighSurrogate notNil 		ifTrue: [ JSEURIError raiseSignal: ( 'Incomplete surrogate sequence &lt;1s&gt;' expandMacrosWith: lastHighSurrogate jseHexString )].	^ encodeStream contents</body>

<body package="JavascriptEngine-Runtime-Core">uriMarks	^ '-_.!~*''()'</body>

<body package="JavascriptEngine-Runtime-Core">uriReserved	^ ';/?:@&amp;=+$,'</body>

<body package="JavascriptEngine-Runtime-Core">utf8DecodeBytes: bytes byteStrings: byteStrings reserved: reservedCharacters on: decodeStream 	| readStream |	readStream := bytes readStream.	[ readStream atEnd ] whileFalse: 		[ | c start |			start := readStream position.			c := JSEPlatform utf8DecodeNextFrom: readStream.			( c isNil or: [ c codePoint = Character illegalCode ]) 				ifTrue: [ JSEURIError raiseSignal: 'Invalid UTF-8 sequence' ].			( reservedCharacters includes: c ) 				ifTrue: 				[	" emit original strings. ECMA-262 tests actually test that "					start + 1 to: readStream position do: [: i | decodeStream nextPutAll: ( byteStrings at: readStream position )]				]				ifFalse: [ decodeStream nextPut: c ]		].</body>
</methods>

<methods>
<class-id>JSE.JSEGlobalObject</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">newProperties	^ self propertiesClass new: 50</body>
</methods>

<methods>
<class-id>JSE.JSEGlobalObject class</class-id> <category>testing</category>

<body package="JavascriptEngine-Runtime-Core">isPartOfBootstrap	^ true</body>
</methods>

<methods>
<class-id>JSE.JSEGlobalObject class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'The global object'</body>

<body package="JavascriptEngine-Runtime-Core">objectName	^ nil</body>
</methods>

<methods>
<class-id>JSE.JSEBoundFunctionObject</class-id> <category>internal</category>

<body package="JavascriptEngine-Runtime-Core">length	^ super length - self boundArguments size max: 0</body>
</methods>

<methods>
<class-id>JSE.JSEBoundFunctionObject</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">boundArguments	^ boundArguments</body>

<body package="JavascriptEngine-Runtime-Core">boundArguments: aBoundArguments 	boundArguments := aBoundArguments.</body>

<body package="JavascriptEngine-Runtime-Core">boundThis	^ boundThis</body>

<body package="JavascriptEngine-Runtime-Core">boundThis: aBoundThis 	boundThis := aBoundThis.</body>

<body package="JavascriptEngine-Runtime-Core">targetFunction	^ targetFunction</body>

<body package="JavascriptEngine-Runtime-Core">targetFunction: aTargetFunction 	targetFunction := aTargetFunction.</body>
</methods>

<methods>
<class-id>JSE.JSEBoundFunctionObject</class-id> <category>internal - constructor</category>

<body package="JavascriptEngine-Runtime-Core">constructWithArguments: arguments 	^ self targetFunction constructWithArguments: self boundArguments, arguments</body>
</methods>

<methods>
<class-id>JSE.JSEBoundFunctionObject</class-id> <category>internal - call</category>

<body package="JavascriptEngine-Runtime-Core">callWithThis: thisObject arguments: arguments executionEnvironment: executionEnvironment callerIsStrict: callerIsStrict isDirectEvalCall: isDirectEvalCall 	"15.3.4.5.1 [[Call]] "	^ self targetFunction 		callWithThis: self boundThis		arguments: self boundArguments , arguments		executionEnvironment: executionEnvironment		callerIsStrict: callerIsStrict		isDirectEvalCall: isDirectEvalCall</body>
</methods>

<methods>
<class-id>JSE.JSEBoundFunctionObject class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">targetFunction: targetFunction boundThis: boundThis boundArguments: boundArguments 	^ self new		targetFunction: targetFunction;		boundThis: boundThis;		boundArguments: boundArguments;		yourself</body>
</methods>

<methods>
<class-id>JSE.JSEBoundFunctionObject class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'A function object bound to arguments'</body>
</methods>

<methods>
<class-id>JSE.JSEBuiltInFunctionObject</class-id> <category>internal</category>

<body package="JavascriptEngine-Runtime-Core">isBuiltIn	^ true</body>

<body package="JavascriptEngine-Runtime-Core">isStrict	^ true</body>

<body package="JavascriptEngine-Runtime-Core">prototypeObjectClass	^ JSEFunctionObject</body>
</methods>

<methods>
<class-id>JSE.JSEBuiltInFunctionObject</class-id> <category>internal - testing</category>

<body package="JavascriptEngine-Runtime-Core">isConstructor	" See 15 Standard Built-in ECMAScript Objects :	None of the built-in functions described in this clause that are not constructors 	shall implement the [[Construct]] internal method 	unless otherwise specified in the description of a particular function. "	^ isConstructor ifNil: [ false ]</body>

<body package="JavascriptEngine-Runtime-Core">isConstructor: aIsConstructor 	isConstructor := aIsConstructor.</body>
</methods>

<methods>
<class-id>JSE.JSEBuiltInFunctionObject</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">newProperties	^ self propertiesClass new: 50</body>
</methods>

<methods>
<class-id>JSE.JSEBuiltInFunctionObject class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'An object for a built-in function'</body>
</methods>

<methods>
<class-id>JSE.JSEMathObject</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">pi	^ JSEPlatform floatClass pi</body>

<body package="JavascriptEngine-Runtime-Core">random	random isNil 		ifTrue: [ random := Random new ].	^ random</body>
</methods>

<methods>
<class-id>JSE.JSEMathObject class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'The Math object'</body>

<body package="JavascriptEngine-Runtime-Core">objectName	^ #Math</body>
</methods>

<methods>
<class-id>JSE.JSEUndefined</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">value	^ nil</body>
</methods>

<methods>
<class-id>JSE.JSEUndefined</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">checkObjectCoercible	JSETypeError raiseSignal: 'Cannot convert undefined to an object'.</body>

<body package="JavascriptEngine-Runtime-Core">toBooleanValue	^ false</body>

<body package="JavascriptEngine-Runtime-Core">toStringValue	^ 'undefined'</body>

<body package="JavascriptEngine-Runtime-Core">toStringValueOrNil	^ nil</body>
</methods>

<methods>
<class-id>JSE.JSEUndefined</class-id> <category>internal - testing</category>

<body package="JavascriptEngine-Runtime-Core">isPrimitiveBase	^ false</body>

<body package="JavascriptEngine-Runtime-Core">isUndefined	^ true</body>
</methods>

<methods>
<class-id>JSE.JSEUndefined</class-id> <category>printing</category>

<body package="JavascriptEngine-Runtime-Core">printOn: aStream 	aStream nextPutAll: self toStringValue.</body>
</methods>

<methods>
<class-id>JSE.JSEUndefined</class-id> <category>comparing</category>

<body package="JavascriptEngine-Runtime-Core">equals: anotherObject	^ anotherObject isUndefined or: [ anotherObject isJSENull ]</body>

<body package="JavascriptEngine-Runtime-Core">strictEqualsValue: anotherObject	^ anotherObject isUndefined</body>
</methods>

<methods>
<class-id>JSE.JSEUndefined class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">internalClassSymbol	^ #Undefined</body>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'undefined primitive'</body>

<body package="JavascriptEngine-Runtime-Core">typeOfSymbol	^ #undefined</body>
</methods>

<methods>
<class-id>JSE.JSEUndefined class</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">toNumberValue: aPrimitiveValue	^ JSEPlatform nanValue</body>
</methods>

<methods>
<class-id>JSE.JSEJsonObject class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'The JSON object'</body>

<body package="JavascriptEngine-Runtime-Core">objectName	^ #JSON</body>
</methods>

<methods>
<class-id>JSE.JSENull</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">checkObjectCoercible	JSETypeError raiseSignal: 'Cannot convert null to an object'.</body>

<body package="JavascriptEngine-Runtime-Core">toBooleanValue	^ false</body>

<body package="JavascriptEngine-Runtime-Core">toStringValue	^ 'null'</body>

<body package="JavascriptEngine-Runtime-Core">toStringValueOrNil	^ nil</body>
</methods>

<methods>
<class-id>JSE.JSENull</class-id> <category>internal - testing</category>

<body package="JavascriptEngine-Runtime-Core">isJSENull	^ true</body>

<body package="JavascriptEngine-Runtime-Core">isPrimitiveBase	^ false</body>
</methods>

<methods>
<class-id>JSE.JSENull</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">value	^ nil</body>
</methods>

<methods>
<class-id>JSE.JSENull</class-id> <category>printing</category>

<body package="JavascriptEngine-Runtime-Core">printOn: aStream 	aStream nextPutAll: 'null'.</body>
</methods>

<methods>
<class-id>JSE.JSENull</class-id> <category>internal - JSON</category>

<body package="JavascriptEngine-Runtime-Core">stringifyReplacerFunction: replacerFunction propertyList: propertyList gap: gap indent: indent stack: stack executionEnvironment: executionEnvironment 	" Convert the object to a JSON string representation "	^ self toStringValue</body>
</methods>

<methods>
<class-id>JSE.JSENull</class-id> <category>comparing</category>

<body package="JavascriptEngine-Runtime-Core">equals: anotherObject	^ anotherObject isUndefined or: [ anotherObject isJSENull ]</body>

<body package="JavascriptEngine-Runtime-Core">strictEqualsValue: anotherObject	^ anotherObject isJSENull</body>
</methods>

<methods>
<class-id>JSE.JSENull class</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">toNumberValue: aPrimitiveValue	^ 0</body>
</methods>

<methods>
<class-id>JSE.JSENull class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">internalClassSymbol	^ #Null</body>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'null primitive. Javascript rarely uses null. The Smalltalk nil is thus mapped to undefined, not to null.'</body>

<body package="JavascriptEngine-Runtime-Core">typeOfSymbol	^ #object</body>
</methods>

<methods>
<class-id>JSE.JSENumberString</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">number	^ number</body>

<body package="JavascriptEngine-Runtime-Core">number: aNumber 	number := aNumber.</body>

<body package="JavascriptEngine-Runtime-Core">value	" convert the number into a string as late as possible, to avoid unnecessary conversions for array indexes "	^ value ifNil: [ value := JSENumber toStringValue: self number ]</body>
</methods>

<methods>
<class-id>JSE.JSENumberString</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">toNumberValue	^ self number</body>
</methods>

<methods>
<class-id>JSE.JSENumberString</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">asPropertyName	^ self number asJSEPropertyName</body>
</methods>

<methods>
<class-id>JSE.JSENumberString class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">number: aNumber 	^ self new number: aNumber;		yourself</body>

<body package="JavascriptEngine-Runtime-Core">shouldInitializeBuiltInObject	" this is a specialized implementation class "	^ false</body>
</methods>

<methods>
<class-id>JSE.JSENumberString class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'A string primitive that provides lazy conversion of a number to a string.'</body>
</methods>

<methods>
<class-id>JSE.JSEFalse</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">toStringValue	^ 'false'</body>
</methods>

<methods>
<class-id>JSE.JSEFalse</class-id> <category>logical operations</category>

<body package="JavascriptEngine-Runtime-Core">not	^ JSETrue singleton</body>
</methods>

<methods>
<class-id>JSE.JSEFalse</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">value	^ false</body>
</methods>

<methods>
<class-id>JSE.JSEFalse class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">shouldInitializeBuiltInObject	" this is a specialized implementation class "	^ false</body>
</methods>

<methods>
<class-id>JSE.JSEFalse class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'Boolean false primitive'</body>
</methods>

<methods>
<class-id>JSE.JSETrue</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">toStringValue	^ 'true'</body>
</methods>

<methods>
<class-id>JSE.JSETrue</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">value	^ true</body>
</methods>

<methods>
<class-id>JSE.JSETrue</class-id> <category>logical operations</category>

<body package="JavascriptEngine-Runtime-Core">not	^ JSEFalse singleton</body>
</methods>

<methods>
<class-id>JSE.JSETrue class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">shouldInitializeBuiltInObject	" this is a specialized implementation class "	^ false</body>
</methods>

<methods>
<class-id>JSE.JSETrue class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'Boolean true primitive'</body>
</methods>

<methods>
<class-id>JSE.JSETypeError class</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">jsDocComment	^ 'Represents a TypeError of the ECMA specification'</body>

<body package="JavascriptEngine-Runtime-Core">objectName	^ #TypeError</body>
</methods>

<methods>
<class-id>JSE.JSEExecutionEnvironment</class-id> <category>execution context</category>

<body package="JavascriptEngine-Runtime-Core">callingExecutionContext	^ self contextStack at: self contextStack size - 1</body>

<body package="JavascriptEngine-Runtime-Core">callingExecutionContextOf: functionExecutionContext 	| i |	i := self contextStack indexOf: functionExecutionContext ifAbsent: [ nil ].	^ ( i notNil and: [ i &gt; 1 ]) 		ifTrue: [ self contextStack at: i - 1 ]		ifFalse: [ nil ]</body>

<body package="JavascriptEngine-Runtime-Core">currentExecutionContext	^self contextStack last</body>

<body package="JavascriptEngine-Runtime-Core">globalExecutionContext	^  self contextStack first</body>

<body package="JavascriptEngine-Runtime-Core">popExecutionContextself contextStack notEmpty ifTrue: [ self contextStack removeLast.]</body>

<body package="JavascriptEngine-Runtime-Core">pushExecutionContext: newContext 	newContext executionEnvironment: self.	self contextStack add: newContext.	^ newContext</body>
</methods>

<methods>
<class-id>JSE.JSEExecutionEnvironment</class-id> <category>private</category>

<body package="JavascriptEngine-Runtime-Core">contextStack	^ contextStack</body>

<body package="JavascriptEngine-Runtime-Core">errorStackStringSkipCurrent: skipCurrent	" stack string for non-standard error.stack property "	| stream first writeCr |	stream := String new writeStream.	first  := self contextStack size.	skipCurrent ifTrue: [ first := first - 1 ].	writeCr := false.	first to: 1 by: -1 do: [ : i |		writeCr ifTrue: [ stream cr ] ifFalse: [ writeCr := true ].		(self contextStack at: i) printErrorStackOn: stream.	].	^  stream contents</body>

<body package="JavascriptEngine-Runtime-Core">initializeBuiltInObjectsStrict: isStrict environment: lexicalEnvironment 	" Create the functions/constructors of built-in objects "	" Bootstrap "	| objectObject functionObject |	objectObject := JSEObject new.	functionObject := JSEFunctionObject new.	objectObject initializeAsBuiltInObjectStrict: isStrict environment: lexicalEnvironment globalObject: globalObject.	functionObject initializeAsBuiltInObjectStrict: isStrict environment: lexicalEnvironment globalObject: globalObject.	globalObject initializeAsBuiltInObjectStrict: isStrict environment: lexicalEnvironment globalObject: globalObject.	" Define built-in objects "	JSEAbstractObject builtInObjectClasses 		do: [: objectClass | objectClass new initializeAsBuiltInObjectStrict: isStrict environment: lexicalEnvironment globalObject: globalObject ].	self globalObject internalPrototype: ( JSEObject getPrototypeIn: self ).	" Errors "	JSEError allSubclasses do: 		[: errorClass |			errorClass objectName notNil 				ifTrue: [ errorClass initializeAsBuiltInObjectStrict: isStrict environment: lexicalEnvironment globalObject: globalObject ]		].	self initializeThrowTypeErrorFunctionObjectIn: lexicalEnvironment.</body>

<body package="JavascriptEngine-Runtime-Core">initializeThrowTypeErrorFunctionObjectIn: aLexicalEnvironment 	" 13.2.3 The [[ThrowTypeError]] Function Object "	| functionDeclaration protoObject |	functionDeclaration := JSEBuiltInFunctionDeclaration 			declareFunctionNamed: #'_throwTypeError'			parameters: #( )			length: 0			block: [: arguments : executionContext | JSETypeError raiseSignal ]			strict: true.	protoObject := JSEObject new.	throwTypeErrorFunctionObject := functionDeclaration 			createFunctionObjectInEnvironment: aLexicalEnvironment			strict: true			prototypeObject: protoObject			writable: false.</body>

<body package="JavascriptEngine-Runtime-Core">triggerEventsForCodeSection: aCodeSection in: anExecutionContext 	self debugEnvironment notNil 		ifTrue: [ self debugEnvironment triggerEventsForCodeSection: aCodeSection in: anExecutionContext ].</body>
</methods>

<methods>
<class-id>JSE.JSEExecutionEnvironment</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">debugEnvironment	^  debugEnvironment</body>

<body package="JavascriptEngine-Runtime-Core">debugEnvironment: aDebugEnvironment	 debugEnvironment := aDebugEnvironment</body>

<body package="JavascriptEngine-Runtime-Core">getPrototypeNamed: aName namespace: aNamespacePath 	^ self globalObject getPrototypeNamed: aName namespace: aNamespacePath</body>

<body package="JavascriptEngine-Runtime-Core">globalObject	^ globalObject</body>

<body package="JavascriptEngine-Runtime-Core">throwTypeErrorFunctionObject	^ throwTypeErrorFunctionObject</body>
</methods>

<methods>
<class-id>JSE.JSEExecutionEnvironment</class-id> <category>accessing - parsers</category>

<body package="JavascriptEngine-Runtime-Core">evalParser	evalParser isNil		ifTrue: [			evalParser := JSEParser new.			evalParser  factory: JSESyntaxTreeFactory new.		].	^  evalParser</body>

<body package="JavascriptEngine-Runtime-Core">evalParser: aJSEParser	evalParser := aJSEParser</body>

<body package="JavascriptEngine-Runtime-Core">formalParameterListParser	formalParameterListParser isNil 		ifTrue: 		[	formalParameterListParser := JSEFormalParameterListParser new.			formalParameterListParser factory: JSESyntaxTreeFactory new		].	^ formalParameterListParser</body>

<body package="JavascriptEngine-Runtime-Core">formalParameterListParser: aFormalParameterListParser	formalParameterListParser := aFormalParameterListParser</body>

<body package="JavascriptEngine-Runtime-Core">formalParameterListParserOrNil	^ formalParameterListParser</body>

<body package="JavascriptEngine-Runtime-Core">functionBodyParser	functionBodyParser isNil 		ifTrue: 		[	functionBodyParser := JSEFunctionBodyParser new.			functionBodyParser factory: JSESyntaxTreeFactory new		].	^ functionBodyParser</body>

<body package="JavascriptEngine-Runtime-Core">functionBodyParser: aFunctionBodyParser	functionBodyParser := aFunctionBodyParser</body>

<body package="JavascriptEngine-Runtime-Core">functionBodyParserOrNil	^ functionBodyParser</body>
</methods>

<methods>
<class-id>JSE.JSEExecutionEnvironment</class-id> <category>debugging</category>

<body package="JavascriptEngine-Runtime-Core">breakStepKindAt: aLineNumber 	" Returns a step kind (in/out/step) if a break should be triggered"	| shouldBreak |	^ self stepCondition notNil 		ifTrue: 		[	shouldBreak := self stepCondition = #next 					ifTrue: 					[	" step over/out, but not in "						aLineNumber ~= self stepLineNumber and: [ self currentStepDepth &lt;= self stepDepth ]					]					ifFalse: 					[	self stepCondition = #in 							ifTrue: 							[	" step in, or over / out if there's nothing to step in "								self currentStepDepth &gt; self stepDepth or: [ aLineNumber ~= self stepLineNumber ]							]							ifFalse: 							[	self stepCondition = #out 									ifTrue: [ self currentStepDepth &lt; self stepDepth ]									ifFalse: [ false ]							]					].			shouldBreak 				ifTrue: [ self stepCondition ]				ifFalse: [ nil ]		]		ifFalse: [ nil ]</body>

<body package="JavascriptEngine-Runtime-Core">currentStepDepth	^ currentStepDepth</body>

<body package="JavascriptEngine-Runtime-Core">increaseStepDepthWhile: aBlock	| old |	old := currentStepDepth.	currentStepDepth := currentStepDepth + 1.	^ aBlock ensure: [ currentStepDepth := old ]</body>

<body package="JavascriptEngine-Runtime-Core">noDebuggingWhile: aBlock 	| oldStepCondition oldStepLineNumber oldStepDepth oldDebugEnvironment |	oldStepCondition := stepCondition.	oldStepLineNumber := stepLineNumber.	oldStepDepth := stepDepth.	oldDebugEnvironment := debugEnvironment.	stepCondition := nil.	stepLineNumber := nil.	stepDepth := nil.	debugEnvironment := nil.	^ aBlock ensure: 		[	stepCondition := oldStepCondition.			stepLineNumber := oldStepLineNumber.			stepDepth := oldStepDepth.			debugEnvironment := oldDebugEnvironment		]</body>

<body package="JavascriptEngine-Runtime-Core">resetStep	stepCondition := nil.	stepLineNumber := nil.	stepDepth := nil.</body>

<body package="JavascriptEngine-Runtime-Core">step: aStepKind 	" Prepare a step "	stepCondition := aStepKind.	stepLineNumber := self currentExecutionContext node ifNotNil: [ : node | node lineNumber ].	stepDepth := self currentStepDepth.</body>

<body package="JavascriptEngine-Runtime-Core">stepCondition	^ stepCondition</body>

<body package="JavascriptEngine-Runtime-Core">stepDepth	^ stepDepth</body>

<body package="JavascriptEngine-Runtime-Core">stepLineNumber	^ stepLineNumber</body>
</methods>

<methods>
<class-id>JSE.JSEExecutionEnvironment</class-id> <category>initialize-release</category>

<body package="JavascriptEngine-Runtime-Core">initialize	contextStack := OrderedCollection new.	currentStepDepth := 0.</body>

<body package="JavascriptEngine-Runtime-Core">initializeGlobalEnvironmentForCode: aCompiledCode bindingObject: bindingObjectOrNil 	" see 10.4.1.1 Initial Global Execution Context "	| executionContext globalEnvironmentRecord globalEnvironment |	globalObject := JSEGlobalObject new.	globalEnvironmentRecord := JSEObjectEnvironmentRecord new.	globalEnvironmentRecord bindingObject: globalObject.	globalEnvironment := JSELexicalEnvironment on: globalEnvironmentRecord outerEnvironment: nil.	executionContext := JSEExecutionContext 			thisBinding: ( bindingObjectOrNil ifNil: [ globalObject ])			lexicalEnvironment: globalEnvironment			variableEnvironment: globalEnvironment.	executionContext code: aCompiledCode.	self pushExecutionContext: executionContext.	JSECurrentExecutionEnvironment 		use: self		during: 		[	self initializeBuiltInObjectsStrict: aCompiledCode isStrict environment: globalEnvironment		].</body>
</methods>

<methods>
<class-id>JSE.JSEExecutionEnvironment class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">createGlobalEnvironmentForCode: aCompiledCode 	^ self new		initializeGlobalEnvironmentForCode: aCompiledCode bindingObject: nil;		yourself</body>

<body package="JavascriptEngine-Runtime-Core">new	^ self basicNew initialize</body>
</methods>

<methods>
<class-id>JSE.JSERegExpState</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">captures	^ captures</body>

<body package="JavascriptEngine-Runtime-Core">captures: aCaptures 	captures := aCaptures.</body>

<body package="JavascriptEngine-Runtime-Core">endIndex	^ endIndex</body>

<body package="JavascriptEngine-Runtime-Core">endIndex: aEndIndex 	endIndex := aEndIndex.</body>
</methods>

<methods>
<class-id>JSE.JSERegExpState class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">endIndex: aIndex captures: aCaptures 	^ self new		endIndex: aIndex;		captures: aCaptures;		yourself</body>
</methods>

<methods>
<class-id>JSE.JSERuntimeBuilderVisitor</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">builder	^ builder</body>

<body package="JavascriptEngine-Runtime-Core">builder: aBuilder 	builder := aBuilder.</body>

<body package="JavascriptEngine-Runtime-Core">codeClass	^ codeClass</body>

<body package="JavascriptEngine-Runtime-Core">codeClass: aCodeClass 	codeClass := aCodeClass.</body>
</methods>

<methods>
<class-id>JSE.JSERuntimeBuilderVisitor</class-id> <category>visiting</category>

<body package="JavascriptEngine-Runtime-Core">acceptArrayLiteral: anArrayLiteralNode 	" 11.1.4 Array Initialiser "	self 		addSelector: #arrayLiteralArrayBlocks:padBefore:padAfter:		node: anArrayLiteralNode		arguments: ( Array 				with: ( anArrayLiteralNode array collect: 						[: elementNode |							elementNode notNil 								ifTrue: [ self codeSectionOfNode: elementNode ]								ifFalse: [ nil ]						])				with: anArrayLiteralNode padBefore				with: anArrayLiteralNode padAfter ).</body>

<body package="JavascriptEngine-Runtime-Core">acceptAssignment: anAssignmentNode 	" 11.13 Assignment Operators "	self 		addSelector: #assignmentLeftHandBlockBlock:assignedBlock:assignmentBlock:		node: anAssignmentNode		arguments: ( Array 				with: ( self codeSectionOfNode: anAssignmentNode leftHandSide )				with: ( self codeSectionOfNode: anAssignmentNode assignedExpression )				with: ( self blockForAssignmentOperator: anAssignmentNode operator node: anAssignmentNode )).</body>

<body package="JavascriptEngine-Runtime-Core">acceptBinaryOperator: aBinaryOperatorNode 	" 11.5 and following chapters "	| operatorBlockOrSymbol |	operatorBlockOrSymbol := self blockOrSelectorForBinaryOperator: aBinaryOperatorNode operator node: aBinaryOperatorNode.	operatorBlockOrSymbol jseIsBlockClosure 		ifTrue: 		[	self 				addSelector: #binaryOperatorLeftBlock:rightBlock:operatorBlock:				node: aBinaryOperatorNode				arguments: ( Array 						with: ( self codeSectionOfNode: aBinaryOperatorNode leftExpression )						with: ( self codeSectionOfNode: aBinaryOperatorNode rightExpression )						with: operatorBlockOrSymbol )		]		ifFalse: 		[	self 				addSelector: operatorBlockOrSymbol				node: aBinaryOperatorNode				arguments: ( Array with: ( self codeSectionOfNode: aBinaryOperatorNode leftExpression ) with: ( self codeSectionOfNode: aBinaryOperatorNode rightExpression ))		].</body>

<body package="JavascriptEngine-Runtime-Core">acceptBooleanLiteral: anBooleanLiteralNode 	anBooleanLiteralNode literalValue = true 		ifTrue: [ self addLiteral: JSETrue singleton]		ifFalse: [ self addLiteral: JSEFalse singleton ].</body>

<body package="JavascriptEngine-Runtime-Core">acceptBracketMember: aBracketMemberNode 	" 11.2.1 Property Accessors "	self 		addSelector: #bracketMemberBaseBlock:propertyNameBlock:isStrict:		node: aBracketMemberNode		arguments: ( Array with: ( self codeSectionOfNode: aBracketMemberNode base ) with: ( self codeSectionOfNode: aBracketMemberNode member ) with: self isInStrictMode ).</body>

<body package="JavascriptEngine-Runtime-Core">acceptBreak: aBreakNode 	" 12.8 The break Statement "	self 		addSelector: #break:		node: aBreakNode		arguments: ( Array with: aBreakNode identifierString ).</body>

<body package="JavascriptEngine-Runtime-Core">acceptCommaSeparatedExpressions: aCommaSeparatedExpressionsNode 	" 11.14 Comma Operator ( , ) "	self 		addSelector: #commaSeparatedExpressionsLeftBlock:rightBlock:		node: aCommaSeparatedExpressionsNode		arguments: ( Array 				with: ( self codeSectionOfNode: aCommaSeparatedExpressionsNode leftExpression )				with: ( self codeSectionOfNode: aCommaSeparatedExpressionsNode rightExpression )).</body>

<body package="JavascriptEngine-Runtime-Core">acceptConditionalExpression: aConditionalExpressionNode 	" 11.12 Conditional Operator "	self 		addSelector: #conditionalExpression:trueBlock:falseBlock:		node: aConditionalExpressionNode		arguments: ( Array 				with: ( self codeSectionOfNode: aConditionalExpressionNode condition )				with: ( self codeSectionOfNode: aConditionalExpressionNode trueExpression )				with: ( self codeSectionOfNode: aConditionalExpressionNode falseExpression )).</body>

<body package="JavascriptEngine-Runtime-Core">acceptContinue: aContinueNode 	" 12.7 The continue Statement "	self 		addSelector: #continue:		node: aContinueNode		arguments: ( Array with: aContinueNode identifierString ).</body>

<body package="JavascriptEngine-Runtime-Core">acceptDebugger: aDebuggerNode 	" 12.15 The debugger statement "	self 		addSelector: #debuggerSourceInterval:lineNumber:		node: aDebuggerNode		arguments: (Array with: aDebuggerNode sourceInterval with: aDebuggerNode lineNumber)</body>

<body package="JavascriptEngine-Runtime-Core">acceptDoWhile: aDoWhileNode 	" 12.6.1 The do-while Statement "	self 		addSelector: #doWhile:conditionBlock:		node: aDoWhileNode		arguments: ( Array with: ( self codeSectionOfNode: aDoWhileNode statement ) with: ( self codeSectionOfNode: aDoWhileNode condition )).</body>

<body package="JavascriptEngine-Runtime-Core">acceptDotMember: aDotMemberNode 	" 11.2.1 Property Accessors "	self 		addSelector: #dotMember:propertyName:isStrict:		node: aDotMemberNode		arguments: ( Array with: ( self codeSectionOfNode: aDotMemberNode base ) with: aDotMemberNode member identifierSymbol with: self isInStrictMode ).</body>

<body package="JavascriptEngine-Runtime-Core">acceptEmptyStatement: anEmptyStatementNode	" 12.3 Empty Statement "</body>

<body package="JavascriptEngine-Runtime-Core">acceptExpressionStatement: anExpressionStatementNode 	" 12.4 Expression Statement 	Optimization: avoid the block if possible "	anExpressionStatementNode returnsReferences 		ifTrue: 		[	self 				addSelector: #expressionStatement:				node: anExpressionStatementNode				arguments: ( Array with: ( self codeSectionOfNode: anExpressionStatementNode expression ))		]		ifFalse: [ self acceptNode: anExpressionStatementNode ].</body>

<body package="JavascriptEngine-Runtime-Core">acceptForEnumerateElements: aForEnumerateElementsNode 	" 12.6.4 The for-in Statement		for (enumerable in collection) statement "	| enumerableBlock |	enumerableBlock := self codeSectionOfNode: aForEnumerateElementsNode enumerable.	self 		addSelector: #enumerate:statementBlock:enumerableBlock:strict:		node: aForEnumerateElementsNode		arguments: ( OrderedCollection new				add: ( self codeSectionOfNode: aForEnumerateElementsNode enumeratedObject );				add: ( self codeSectionOfNode: aForEnumerateElementsNode statement );				add: enumerableBlock;				add: self isInStrictMode;				yourself ).</body>

<body package="JavascriptEngine-Runtime-Core">acceptForEnumerateVariable: aForEnumerateVariableNode 	" 12.6.4 The for-in Statement		for (var variable in collection) statement "	| variableDeclarationBlock |	variableDeclarationBlock := self codeSectionOfNode: aForEnumerateVariableNode variableDeclaration.	self 		addSelector: #enumerate:statementBlock:variableDeclarationBlock:strict:		node: aForEnumerateVariableNode		arguments: ( OrderedCollection new				add: ( self codeSectionOfNode: aForEnumerateVariableNode enumeratedObject );				add: ( self codeSectionOfNode: aForEnumerateVariableNode statement );				add: variableDeclarationBlock;				add: self isInStrictMode;				yourself ).</body>

<body package="JavascriptEngine-Runtime-Core">acceptForWithInitializer: anInitializedForNode	self acceptConditionalFor: anInitializedForNode initialiserBlock: (anInitializedForNode initializer ifNotNil: [ : initializer | self codeSectionOfNode: initializer ])</body>

<body package="JavascriptEngine-Runtime-Core">acceptForWithVariableList: aForWithVariableListNode 	self acceptConditionalFor: aForWithVariableListNode initialiserBlock: ( self codeSectionForNodes: aForWithVariableListNode variableDeclarations ).</body>

<body package="JavascriptEngine-Runtime-Core">acceptFunctionCall: aFunctionCallNode 	" 11.2.3 Function Calls "	self 		addSelector: #functionCall:argumentListBlocks:strict:		node: aFunctionCallNode		arguments: ( Array 				with: ( self codeSectionOfNode: aFunctionCallNode member )				with: ( aFunctionCallNode arguments collect: [: argumentNode | self codeSectionOfNode: argumentNode ])				with: self isInStrictMode ).</body>

<body package="JavascriptEngine-Runtime-Core">acceptFunctionDeclaration: aFunctionDeclarationNode  	" 13 Function Definition "	| function |	function := JSEFunctionDeclaration 			identifier: aFunctionDeclarationNode identifier identifierSymbol			formalParameters: ( aFunctionDeclarationNode formalParameters collect: [: parameterIdentifier | parameterIdentifier identifierSymbol ]).	" generate function code "	self buildCodeForFunction: function node: aFunctionDeclarationNode.	" register the function "	self builder currentCode addFunctionDeclaration: function.</body>

<body package="JavascriptEngine-Runtime-Core">acceptFunctionExpression: aFunctionExpressionNode 	" 13 Function Definition "	| function code |	function := JSEFunctionExpression			identifier: (aFunctionExpressionNode identifier ifNotNil: [ : identifier | identifier identifierSymbol ])			formalParameters: ( aFunctionExpressionNode formalParameters collect: [: parameterIdentifier | parameterIdentifier identifierSymbol ]).	" generate function code "	code := self buildCodeForFunction: function node: aFunctionExpressionNode.	self 		addSelector: #functionExpression:strict:		node: aFunctionExpressionNode		arguments: ( Array with: function with: code isStrict ).</body>

<body package="JavascriptEngine-Runtime-Core">acceptGetPropertyAssignment: aGetPropertyAssignmentNode 	" 11.1.5 Object Initialiser "	| function propertyName |	propertyName := aGetPropertyAssignmentNode propertyNameSymbol.	function := JSEFunctionDeclaration identifier: propertyName formalParameters: #( ).	self buildCodeForFunction: function node: aGetPropertyAssignmentNode functionBody.	self 		addSelector: #getPropertyAssignment:function:strict:		node: aGetPropertyAssignmentNode		arguments: ( Array with: propertyName with: function with: ( function code isStrict or: [ self isInStrictMode ])).</body>

<body package="JavascriptEngine-Runtime-Core">acceptIdentifier: anIdentifierNode	self buildCodeForIdentifier: anIdentifierNode</body>

<body package="JavascriptEngine-Runtime-Core">acceptIdentifierName: anIdentifierNameNode	self buildCodeForIdentifier: anIdentifierNameNode</body>

<body package="JavascriptEngine-Runtime-Core">acceptIf: anIfNode 	" 12.5 The if Statement "	self 		addSelector: #if:trueBlock:falseBlock:		node: anIfNode		arguments: ( Array 				with: ( self codeSectionOfNode: anIfNode condition )				with: ( self codeSectionOfNode: anIfNode trueExpression )				with: ( anIfNode falseExpression ifNotNil: [: falseExpression | self codeSectionOfNode: falseExpression ])).</body>

<body package="JavascriptEngine-Runtime-Core">acceptLabelledStatement: aLabelledStatementNode 	" 12.12 Labelled Statements "	self 		addSelector: #labelledStatement:label:		node: aLabelledStatementNode		arguments: ( Array with: ( self codeSectionOfNode: aLabelledStatementNode statement ) with: aLabelledStatementNode label identifierString ).</body>

<body package="JavascriptEngine-Runtime-Core">acceptNew: aNewNode 	" 11.2.2 The new Operator "	self 		addSelector: #new:argumentListBlocks:		node: aNewNode		arguments: ( Array 				with: ( self codeSectionOfNode: aNewNode member )				with: ( aNewNode arguments ifNotNil: [: arguments | arguments collect: [: argumentNode | self codeSectionOfNode: argumentNode ]])).</body>

<body package="JavascriptEngine-Runtime-Core">acceptNullLiteral: anNullLiteralNode 	" 7.8.1 Null Literals " 	self addLiteral: JSENull singleton</body>

<body package="JavascriptEngine-Runtime-Core">acceptNumericLiteral: anNumericLiteralNode 	self addLiteral: (JSENumber value: anNumericLiteralNode literalValue)</body>

<body package="JavascriptEngine-Runtime-Core">acceptObjectLiteral: anObjectLiteralNode 	" 11.1.5 Object Initialiser "	self 		addSelector: #objectLiteral:strict:		node: anObjectLiteralNode		arguments: ( Array 				with: ( anObjectLiteralNode propertyAssignments collect: [: assignmentNode | self codeSectionOfNode: assignmentNode ])				with: self isInStrictMode ).</body>

<body package="JavascriptEngine-Runtime-Core">acceptPostfixOperator: anPostfixOperatorNode 	" 11.3 Postfix Expressions "	self 		addSelector: #postfixOperator:operatorBlock:		node: anPostfixOperatorNode		arguments: ( Array 				with: ( self codeSectionOfNode: anPostfixOperatorNode expression )				with: ( self blockForPostfixOperator: anPostfixOperatorNode operator node: anPostfixOperatorNode )).</body>

<body package="JavascriptEngine-Runtime-Core">acceptPrefixOperator: aPrefixOperatorNode 	" 11.4 Unary Operators "	self 		addSelector: #prefixOperator:operatorBlock:		node: aPrefixOperatorNode		arguments: ( Array 				with: ( self codeSectionOfNode: aPrefixOperatorNode expression )				with: ( self blockForPrefixOperator: aPrefixOperatorNode operator node: aPrefixOperatorNode )).</body>

<body package="JavascriptEngine-Runtime-Core">acceptProgram: aProgramNode 	" 14 Program "	^ self compileCode: aProgramNode</body>

<body package="JavascriptEngine-Runtime-Core">acceptPropertyAssignment: anPropertyAssignmentNode 	" 11.1.5 Object Initialiser "	self 		addSelector: #propertyAssignment:assignmentBlock:		node: anPropertyAssignmentNode		arguments: ( Array with: anPropertyAssignmentNode propertyNameSymbol with: ( self codeSectionOfNode: anPropertyAssignmentNode assignedExpression )).</body>

<body package="JavascriptEngine-Runtime-Core">acceptReturn: aReturnNode 	" 12.9 The return Statement "	| block |	block := aReturnNode return ifNotNil: [: return | self codeSectionOfNode: return ].	block notNil 		ifTrue: [ self addSelector: #return: node: aReturnNode argument: block ]		ifFalse: [ self addSelector: #returnUndefined node: aReturnNode ].</body>

<body package="JavascriptEngine-Runtime-Core">acceptSetPropertyAssignment: aSetPropertyAssignmentNode 	" 11.1.5 Object Initialiser "	| propertyName function |	propertyName := aSetPropertyAssignmentNode propertyNameSymbol.	function := JSEFunctionDeclaration 			identifier: propertyName			formalParameters: ( OrderedCollection with: aSetPropertyAssignmentNode parameter identifierSymbol ).	self buildCodeForFunction: function node: aSetPropertyAssignmentNode functionBody.	self 		addSelector: #setPropertyAssignment:function:strict:		node: aSetPropertyAssignmentNode		arguments: ( Array with: propertyName with: function with: ( function code isStrict or: [ self isInStrictMode ])).</body>

<body package="JavascriptEngine-Runtime-Core">acceptStringLiteral: anStringLiteralNode 	self addLiteral: (anStringLiteralNode literalValue asJSEObject)</body>

<body package="JavascriptEngine-Runtime-Core">acceptSwitch: aSwitchNode 	" 12.11 The switch Statement "	| clauses |	clauses := aSwitchNode clauses collect: 			[: switchClause | | clauseBlock statementsBlock |				clauseBlock := switchClause clause ifNotNil: [: clause | self codeSectionOfNode: clause ].				statementsBlock := self codeSectionForNodes: switchClause statements.				clauseBlock -&gt; statementsBlock			].	self 		addSelector: #switch:clausesAndStatementBlocks:		node: aSwitchNode		arguments: ( Array with: ( self codeSectionOfNode: aSwitchNode switch ) with: clauses ).</body>

<body package="JavascriptEngine-Runtime-Core">acceptThis: aThisNode 	" 11.1.1 The this Keyword "	self addSelector: #this node: aThisNode</body>

<body package="JavascriptEngine-Runtime-Core">acceptThrow: aThrowNode 	" 12.13 The throw Statement "	self addSelector: #throw: node: aThrowNode argument: ( self codeSectionOfNode: aThrowNode throwExpression ).</body>

<body package="JavascriptEngine-Runtime-Core">acceptTry: aTryNode 	" 12.14 The try Statement "	self 		addSelector: #try:catchBlock:identifier:finallyBlock:		node: aTryNode		arguments: ( Array 				with: ( self codeSectionOfNode: aTryNode tryBlock )				with: ( aTryNode catch ifNotNil: [: catchNode | self codeSectionOfNode: catchNode block ])				with: ( aTryNode catch ifNotNil: [: catchNode | catchNode identifierSymbol ])				with: ( aTryNode finally ifNotNil: [: finallyNode | self codeSectionOfNode: finallyNode block ])).</body>

<body package="JavascriptEngine-Runtime-Core">acceptUnaryOperator: aUnaryOperatorNode 	" 11.4 Unary Operators "	self 		addSelector: #unaryOperator:operatorBlock:		node: aUnaryOperatorNode		arguments: ( Array 				with: ( self codeSectionOfNode: aUnaryOperatorNode expression )				with: ( self blockForUnaryOperator: aUnaryOperatorNode operator node: aUnaryOperatorNode )).</body>

<body package="JavascriptEngine-Runtime-Core">acceptVariableDeclaration: aVariableDeclarationNode 	" 12.2 Variable Statement "	| idString declaration idBlock initiBlock |	idString := aVariableDeclarationNode identifier identifierString.	declaration := JSEVariableDeclaration identifier: idString asJSEPropertyName.	self builder currentCode addVariableDeclaration: declaration.	idBlock := self codeSectionOfNode: aVariableDeclarationNode identifier.	initiBlock := aVariableDeclarationNode initializer ifNotNil: [: initializerNode | self codeSectionOfNode: initializerNode ].	self 		addSelector: #variableDeclaration:identifierBlock:initializerBlock:		node: aVariableDeclarationNode		arguments: ( Array with: idString asJSEObject with: idBlock with: initiBlock ).</body>

<body package="JavascriptEngine-Runtime-Core">acceptVariableStatement: aVariableStatementNode	" 12.2 Variable Statement "	self acceptNode: aVariableStatementNode.	" variable statements do not return anything "	self addCodeSection: (self codeSectionForUndefined).</body>

<body package="JavascriptEngine-Runtime-Core">acceptWhile: aWhileNode 	" 12.6.2 The while Statement "	self 		addSelector: #while:conditionBlock:		node: aWhileNode		arguments: ( Array with: ( self codeSectionOfNode: aWhileNode statement ) with: ( self codeSectionOfNode: aWhileNode condition )).</body>

<body package="JavascriptEngine-Runtime-Core">acceptWith: aWithNode 	" 12.10 The with Statement "	self isInStrictMode 		ifTrue: [ JSESyntaxError raiseSignal: 'Strict mode code may not include a "with" statement' node: aWithNode ].	self 		addSelector: #with:statementBlock:		node: aWithNode		arguments: ( Array with: ( self codeSectionOfNode: aWithNode withExpression ) with: ( self codeSectionOfNode: aWithNode statement )).</body>
</methods>

<methods>
<class-id>JSE.JSERuntimeBuilderVisitor</class-id> <category>code building</category>

<body package="JavascriptEngine-Runtime-Core">addCodeSection: aCodeSection	self builder addCodeSection: aCodeSection</body>

<body package="JavascriptEngine-Runtime-Core">addLiteral: aLiteral	self addCodeSection: (JSELiteralSection literal: aLiteral)</body>

<body package="JavascriptEngine-Runtime-Core">addSelector: aSelector node: aNode	self addSelector: aSelector node: aNode arguments: #()</body>

<body package="JavascriptEngine-Runtime-Core">addSelector: aSelector node: aNode argument: argument	self addSelector: aSelector node: aNode arguments: (Array with: argument)</body>

<body package="JavascriptEngine-Runtime-Core">addSelector: aSelector node: aNode arguments: arguments 	self builder addSelector: aSelector node: aNode arguments: arguments.</body>

<body package="JavascriptEngine-Runtime-Core">buildCodeForFunction: function node: aFunctionNode 	" 13 Function Definition "	| code |	code := JSEFunctionCode function: function.	code isStrict: self isInStrictMode.	self builder startCode: code.	self visitChildrenOf: aFunctionNode.	" Return undefined if the function call does encounter a return statement "	self addCodeSection: self codeSectionForUndefined.	self builder endCode.	code parentCode: self builder currentCode.	function code: code.	^ code</body>

<body package="JavascriptEngine-Runtime-Core">buildCodeForIdentifier: anIdentifierNode 	" see 10.3.1 Identifier Resolution "	self 		addSelector: #resolution:isStrict:		node: anIdentifierNode		arguments: ( Array with: anIdentifierNode identifierString asJSEPropertyName with: self isInStrictMode).</body>

<body package="JavascriptEngine-Runtime-Core">codeSectionForNodes: aListOfNodes	| blocks |	self builder startCodeSections.	aListOfNodes do: [ : node |		self visit: node.	].	blocks := self builder endCodeSections.	^ self builder combineCodeSections: blocks</body>

<body package="JavascriptEngine-Runtime-Core">codeSectionForUndefined	^ JSEUndefinedSection new</body>

<body package="JavascriptEngine-Runtime-Core">codeSectionOfNode: aNode 	| blocks |	^ aNode notNil 		ifTrue: 		[	self builder startCodeSections.			self visit: aNode.			blocks := self builder endCodeSections.			self builder combineCodeSections: blocks		]		ifFalse: [ self codeSectionForUndefined ]</body>

<body package="JavascriptEngine-Runtime-Core">compileCode: aNode	^ self compileCode: aNode ofClass: self codeClass</body>

<body package="JavascriptEngine-Runtime-Core">compileCode: aNode ofClass: aCompiledCodeClass	| compiledCode |	compiledCode := aCompiledCodeClass new.	self isInStrictMode ifTrue: [ compiledCode isStrict: true ].	self builder startCode: compiledCode.	self visitChildrenOf: aNode.	self builder endCode.	compiledCode sourceNode: aNode nodeCodeSections: self builder nodeCodeSections.	^ compiledCode</body>
</methods>

<methods>
<class-id>JSE.JSERuntimeBuilderVisitor</class-id> <category>double dispatch - to do</category>

<body package="JavascriptEngine-Runtime-Core">acceptBlock: anBlockNode	" Blocks simply evaluate all statements.	See 12.1 Block "	^ self acceptNode: anBlockNode</body>
</methods>

<methods>
<class-id>JSE.JSERuntimeBuilderVisitor</class-id> <category>initialize-release</category>

<body package="JavascriptEngine-Runtime-Core">initialize	super initialize.	self builder: JSERuntimeBuilder new.	codeClass := JSEGlobalCode.</body>
</methods>

<methods>
<class-id>JSE.JSERuntimeBuilderVisitor</class-id> <category>operators</category>

<body package="JavascriptEngine-Runtime-Core">blockForAssignmentOperator: operatorSymbol node: aNode 	^ self blockOrSelectorForOperator: operatorSymbol type: #assignment node: aNode</body>

<body package="JavascriptEngine-Runtime-Core">blockForPostfixOperator: operatorSymbol node: aNode 	" 11.3 Postfix Expressions "	^ self blockOrSelectorForOperator: operatorSymbol type: #postfix node: aNode</body>

<body package="JavascriptEngine-Runtime-Core">blockForPrefixOperator: operatorSymbol node: aNode 	" 11.4 Unary Operators "	^ self blockOrSelectorForOperator: operatorSymbol type: #prefix node: aNode</body>

<body package="JavascriptEngine-Runtime-Core">blockForUnaryOperator: operatorSymbol node: aNode 	" 11.4 Unary Operators (except prefix operators)"	^ self blockOrSelectorForOperator: operatorSymbol type: #unary node: aNode</body>

<body package="JavascriptEngine-Runtime-Core">blockOrSelectorForBinaryOperator: operatorSymbol node: aNode 	^ self blockOrSelectorForOperator: operatorSymbol type: #binary node: aNode</body>

<body package="JavascriptEngine-Runtime-Core">blockOrSelectorForOperator: operatorSymbol type: operatorType node: aNode 	| block |	block := self operatorBlocksOrSelectors at: operatorType ifPresent: [: operatorBlocks | operatorBlocks at: operatorSymbol ifAbsent: [ nil ]].	block isNil 		ifTrue: [ JSESyntaxError raiseSignal: ( 'Unsupported &lt;1s&gt; operator: &lt;2s&gt;' expandMacrosWith: operatorType with: operatorSymbol ) node: aNode ].	^ block</body>

<body package="JavascriptEngine-Runtime-Core">initializeOperatorBlocks	" Build operator dictionaries: 	operator symbol -&gt; runtime block "	OperatorBlocksOrSelectors  := Dictionary new.	#(		(binaryOperator: #binary)		(unaryOperator: #unary)		(prefixOperator: #prefix)		(postfixOperator: #postfix)		(assignmentOperator: #assignment)	) do: [ : pragmaAndType | | blocks |		blocks := Dictionary new.				(Pragma allNamed: pragmaAndType first from: self class to: JSERuntimeBuilderVisitor) do: [ : pragma |			blocks at: (pragma argumentAt: 1) put: (self perform: pragma selector)		].		OperatorBlocksOrSelectors at: pragmaAndType last put: blocks	].</body>

<body package="JavascriptEngine-Runtime-Core">operatorBlocksOrSelectors	OperatorBlocksOrSelectors isNil		ifTrue: [ self initializeOperatorBlocks ].	^ OperatorBlocksOrSelectors</body>
</methods>

<methods>
<class-id>JSE.JSERuntimeBuilderVisitor</class-id> <category>visiting - private</category>

<body package="JavascriptEngine-Runtime-Core">acceptConditionalFor: aJSEConditionalForNode initialiserBlock: anInitialiserBlockOrNil 	" 12.6.3 The for Statement		for (initialiser/declaration;expression;expression) statement "	self 		addSelector: #conditional:updateBlockOrNil:statementBlock:initialiserBlockOrNil:		node: aJSEConditionalForNode		arguments: ( Array 				with: ( aJSEConditionalForNode condition ifNotNil: [: condition | self codeSectionOfNode: condition ])				with: ( aJSEConditionalForNode updateExpression ifNotNil: [: expression | self codeSectionOfNode: expression ])				with: ( self codeSectionOfNode: aJSEConditionalForNode statement )				with: anInitialiserBlockOrNil ).</body>
</methods>

<methods>
<class-id>JSE.JSERuntimeBuilderVisitor</class-id> <category>visiting - to do</category>

<body package="JavascriptEngine-Runtime-Core">acceptRegularExpression: anRegularExpressionNode 	self 		addSelector: #regExpLiteral:flags:		node: anRegularExpressionNode		arguments: ( Array with: anRegularExpressionNode regularExpressionString asJSEObject with: anRegularExpressionNode flags asJSEObject ).</body>
</methods>

<methods>
<class-id>JSE.JSERuntimeBuilderVisitor class</class-id> <category>compiling</category>

<body package="JavascriptEngine-Runtime-Core">instanceMethodsChanged	OperatorBlocksOrSelectors := nil</body>
</methods>

<methods>
<class-id>JSE.JSEReference</class-id> <category>reference</category>

<body package="JavascriptEngine-Runtime-Core">assign: aValue 	" see note of 11.13.1 Simple Assignment ( = ) "	( self isStrict and: [( #( #eval #arguments ) includes: self name ) and: [ self base isEnvironmentRecord ]]) 		ifTrue: [ JSESyntaxError raiseSignal: ( 'Cannot assign "&lt;1s&gt;" in strict mode' expandMacrosWith: self nameString )].	self putValue: aValue.	^ aValue</body>

<body package="JavascriptEngine-Runtime-Core">compoundAssign: aValue with: aBlock	" Evalute the block with both values and assign the result.	see 11.13.2 Compound Assignment ( op= ) "	| newValue |	newValue := (aBlock value: self getValue value: aValue) asJSEObject.	self assign: newValue.	^ newValue</body>

<body package="JavascriptEngine-Runtime-Core">getValue	" see 8.7.1 GetValue "	self isUnresolvableReference 		ifTrue: [ JSEReferenceError raiseSignal: ('Reference "&lt;1s&gt;" is unresolved' expandMacrosWith: self displayString) with: self ].	^ self getValueNoCheck</body>

<body package="JavascriptEngine-Runtime-Core">getValueNoCheck	" see 8.7.1 GetValue "	^ self base getReferenceValue: self name strict: self isStrict</body>

<body package="JavascriptEngine-Runtime-Core">isDirectEvalCall	^ self name = #eval and: [ self base isEnvironmentRecord ]</body>

<body package="JavascriptEngine-Runtime-Core">isReference	^ true</body>

<body package="JavascriptEngine-Runtime-Core">isUnresolvableReference	^ self base isUndefined</body>

<body package="JavascriptEngine-Runtime-Core">putValue: value 	" see 8.7.2 PutValue "	self isUnresolvableReference 		ifTrue: 		[	self isStrict 				ifTrue: [ JSEReferenceError raiseSignal: ( 'Reference "&lt;1s&gt; is unresolved' expandMacrosWith: self displayString ) with: self ]				ifFalse: [ JSECurrentExecutionEnvironment value globalObject put: self name value: value throw: false ]		]		ifFalse: [ self base setReference: self name value: value strict: self isStrict ].</body>
</methods>

<methods>
<class-id>JSE.JSEReference</class-id> <category>printing</category>

<body package="JavascriptEngine-Runtime-Core">displayString	^ self name displayString</body>

<body package="JavascriptEngine-Runtime-Core">nameString	^  self name displayString</body>

<body package="JavascriptEngine-Runtime-Core">printOn: aStream	self base printOn: aStream.	aStream nextPut: $..	aStream nextPutAll: self nameString.</body>
</methods>

<methods>
<class-id>JSE.JSEReference</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">base	^ base</body>

<body package="JavascriptEngine-Runtime-Core">base: aBase 	base := aBase.</body>

<body package="JavascriptEngine-Runtime-Core">isStrict	^ isStrict</body>

<body package="JavascriptEngine-Runtime-Core">isStrict: aBoolean 	isStrict := aBoolean.</body>

<body package="JavascriptEngine-Runtime-Core">name	^ name</body>

<body package="JavascriptEngine-Runtime-Core">name: aName 	name := aName asJSEPropertyName.</body>
</methods>

<methods>
<class-id>JSE.JSEReference</class-id> <category>operators - private</category>

<body package="JavascriptEngine-Runtime-Core">checkIsValidForPreOrPostfixOperator	" 11.4.4 Prefix Increment Operator / 11.4.5 Prefix Decrement Operator "	(self isStrict and: [ #(#eval arguments) includes: self name ])		ifTrue: [ JSESyntaxError raiseSignal: ('Prefix/postfix operator cannot be applied to "&lt;1s&gt;"' expandMacrosWith: self displayString) ].</body>
</methods>

<methods>
<class-id>JSE.JSEReference</class-id> <category>bindings</category>

<body package="JavascriptEngine-Runtime-Core">getFunctionCallThisValue	^ self base functionCallThisValue</body>
</methods>

<methods>
<class-id>JSE.JSEReference</class-id> <category>operators</category>

<body package="JavascriptEngine-Runtime-Core">delete	^ self isUnresolvableReference 		ifTrue: 		[	self isStrict 				ifTrue: 				[	JSESyntaxError 						raiseSignal: ( 'Cannot delete unresolved reference "&lt;1s&gt;" of "&lt;2s&gt;"' expandMacrosWith: self displayString with: self base displayString )				]				ifFalse: [ JSETrue singleton ]		]		ifFalse: [( self base delete: self name strict: self isStrict ) asJSEObject ]</body>

<body package="JavascriptEngine-Runtime-Core">postfixOperatorAdd: anInteger 	" 11.3 Postfix Expressions "	| oldNumber |	self checkIsValidForPreOrPostfixOperator.	oldNumber := self getValue toNumber.	self putValue: ( JSENumber value: oldNumber value + anInteger ).	^ oldNumber</body>

<body package="JavascriptEngine-Runtime-Core">prefixOperatorAdd: anInteger 	" 11.4 Unary Operators "	| newValue |	self checkIsValidForPreOrPostfixOperator.	self putValue: ( newValue := JSENumber value: self getValue toNumberValue + anInteger ).	^ newValue</body>

<body package="JavascriptEngine-Runtime-Core">typeOf	^ self isUnresolvableReference 		ifTrue: [ JSEUndefined typeOfSymbol asString asJSEObject ]		ifFalse: [ self getValueNoCheck typeOf ]</body>
</methods>

<methods>
<class-id>JSE.JSEReference class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">base: aBase name: aName strict: strict 	^ self new		base: aBase;		name: aName;		isStrict: strict;		yourself</body>
</methods>

<methods>
<class-id>JSE.JSEVariableDeclaration</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">identifier	^ identifier</body>

<body package="JavascriptEngine-Runtime-Core">identifier: anIdentifierSymbol	identifier := anIdentifierSymbol.</body>
</methods>

<methods>
<class-id>JSE.JSEVariableDeclaration</class-id> <category>bindings</category>

<body package="JavascriptEngine-Runtime-Core">createBindingInEnvironment: aLexicalEnvironment executionContext: executionContext configurable: configurable strict: strict 	" see 10.5 Declaration Binding Instantiation "	| environmentRecord |	environmentRecord := aLexicalEnvironment environmentRecord.	( environmentRecord hasBinding: self identifier ) 		ifFalse: 		[	environmentRecord createMutableBinding: self identifier deletable: configurable.			environmentRecord setMutableBinding: self identifier value: JSEUndefined singleton strict: strict		].</body>
</methods>

<methods>
<class-id>JSE.JSEVariableDeclaration class</class-id> <category>instance creation</category>

<body package="JavascriptEngine-Runtime-Core">identifier: anIdentifierSymbol 	^ self new identifier: anIdentifierSymbol;		yourself</body>
</methods>

<methods>
<class-id>JSE.JSEBlockNode</class-id> <category>testing</category>

<body package="JavascriptEngine-Runtime-Core">canBreak	^  false</body>
</methods>

<methods>
<class-id>JSE.JSEStringLiteralNode</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">propertyNameSymbol	^ self literalValue asJSEPropertyName</body>
</methods>

<methods>
<class-id>JSE.JSESyntaxTreeNode</class-id> <category>testing</category>

<body package="JavascriptEngine-Runtime-Core">canBreak	" true if a breakpoint can be attached to this node "	^  true</body>
</methods>

<methods>
<class-id>JSE.JSEEmptyStatementNode</class-id> <category>testing</category>

<body package="JavascriptEngine-Runtime-Core">canBreak	^  false</body>
</methods>

<methods>
<class-id>JSE.JSEAbstractPropertyAssignmentNode</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">propertyNameSymbol	^ self propertyName propertyNameSymbol</body>
</methods>

<methods>
<class-id>JSE.JSENumericLiteralNode</class-id> <category>accessing</category>

<body package="JavascriptEngine-Runtime-Core">propertyNameSymbol	^ ( JSENumber value: self literalValue ) toStringValue asJSEPropertyName</body>
</methods>

<methods>
<class-id>JSE.JSEError class</class-id> <category>built in - private</category>

<body package="JavascriptEngine-Runtime-Core">initializeAsBuiltInObjectStrict: isStrict environment: lexicalEnvironment globalObject: globalObject 	" Register the constructor and prototype of the associated error object "	JSEErrorObject new 		nativeError: self new;		initializeAsBuiltInObjectStrict: isStrict environment: lexicalEnvironment globalObject: globalObject</body>
</methods>

<methods>
<class-id>JSE.JSEError</class-id> <category>converting</category>

<body package="JavascriptEngine-Runtime-Core">asJSEObjectIn: anExecutionEnvironment	" 15.11 Error Objects "	| object prototype |	object := JSEErrorObject new.	object nativeError: self.	self objectName ifNotNil: [ : objectName |		prototype := anExecutionEnvironment globalObject getPrototypeNamed: objectName namespace: self objectNamespacePath.		object internalPrototype: prototype.	].	object uncheckedPut: #message value: self messageText.	object uncheckedPut: #name value: self errorName.	" non-standard extension "	object uncheckedPut: #stack value: (anExecutionEnvironment errorStackStringSkipCurrent: false).	^ object</body>
</methods>

<do-it>"Imported Classes:"</do-it>

<do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it>

<class>
<name>Object</name>
<environment>Core</environment>
<super></super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Kernel-Objects</category>
<attributes>
<package>Kernel-Objects</package>
</attributes>
</class>

<class>
<name>Character</name>
<environment>Core</environment>
<super>Core.Magnitude</super>
<private>false</private>
<indexed-type>immediate</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Magnitude-General</category>
<attributes>
<package>Magnitude-General</package>
</attributes>
</class>

<class>
<name>Number</name>
<environment>Core</environment>
<super>Core.ArithmeticValue</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Magnitude-Numbers</category>
<attributes>
<package>Magnitude-Numbers</package>
</attributes>
</class>

<class>
<name>Boolean</name>
<environment>Core</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Kernel-Objects</category>
<attributes>
<package>Kernel-Objects</package>
</attributes>
</class>

<class>
<name>False</name>
<environment>Core</environment>
<super>Core.Boolean</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Kernel-Objects</category>
<attributes>
<package>Kernel-Objects</package>
</attributes>
</class>

<class>
<name>Error</name>
<environment>Core</environment>
<super>Core.Exception</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Kernel-Exception Handling</category>
<attributes>
<package>Kernel-Exception Handling</package>
</attributes>
</class>

<class>
<name>JSEError</name>
<environment>JSE</environment>
<super>Core.Error</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>sourceInterval lineNumber sourceInformation </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Parser-Core</package>
</attributes>
</class>

<class>
<name>True</name>
<environment>Core</environment>
<super>Core.Boolean</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Kernel-Objects</category>
<attributes>
<package>Kernel-Objects</package>
</attributes>
</class>

<class>
<name>Integer</name>
<environment>Core</environment>
<super>Core.Number</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Magnitude-Numbers</category>
<attributes>
<package>Magnitude-Numbers</package>
</attributes>
</class>

<class>
<name>Collection</name>
<environment>Core</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Collections-Abstract</category>
<attributes>
<package>Collections-Abstract</package>
</attributes>
</class>

<class>
<name>JSEJsonFactory</name>
<environment>JSE</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Parser-Core</package>
</attributes>
</class>

<class>
<name>JSESyntaxTreeNode</name>
<environment>JSE</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>sourceInterval sourceInformation </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-AST</package>
</attributes>
</class>

<class>
<name>JSENumericLiteralNode</name>
<environment>JSE</environment>
<super>JSE.JSEPrimitiveLiteralNode</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-AST</package>
</attributes>
</class>

<class>
<name>JSEBlockNode</name>
<environment>JSE</environment>
<super>JSE.JSESyntaxTreeNode</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>statements </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-AST</package>
</attributes>
</class>

<class>
<name>Dictionary</name>
<environment>Core</environment>
<super>Core.Set</super>
<private>false</private>
<indexed-type>objects</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Collections-Unordered</category>
<attributes>
<package>Collections-Unordered</package>
</attributes>
</class>

<class>
<name>JSEEmptyStatementNode</name>
<environment>JSE</environment>
<super>JSE.JSESyntaxTreeNode</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-AST</package>
</attributes>
</class>

<class>
<name>UndefinedObject</name>
<environment>Core</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Kernel-Objects</category>
<attributes>
<package>Kernel-Objects</package>
</attributes>
</class>

<class>
<name>Notification</name>
<environment>Core</environment>
<super>Core.Exception</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Kernel-Exception Handling</category>
<attributes>
<package>Kernel-Exception Handling</package>
</attributes>
</class>

<class>
<name>Announcer</name>
<environment>Core</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>subscriptionRegistry </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Model-Observables</category>
<attributes>
<package>System-Announcements</package>
</attributes>
</class>

<class>
<name>JSEStringLiteralNode</name>
<environment>JSE</environment>
<super>JSE.JSEPrimitiveLiteralNode</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-AST</package>
</attributes>
</class>

<class>
<name>JSESyntaxTreeVisitor</name>
<environment>JSE</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>strictModeStack </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-AST</package>
</attributes>
</class>

<class>
<name>JSENumericStringParser</name>
<environment>JSE</environment>
<super>JSE.JSEAbstractLexicalParser</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>strDecimalLiteral stringNumericLiteral strNumericLiteral strUnsignedDecimalLiteral strWhiteSpace strWhiteSpaceChar </inst-vars>
<class-inst-vars>default </class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-Parser-Core</package>
</attributes>
</class>

<class>
<name>Timestamp</name>
<environment>Core</environment>
<super>Core.Magnitude</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>year month day hours minutes seconds milliseconds partialNanosecond </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Magnitude-General</category>
<attributes>
<package>Magnitude-General</package>
</attributes>
</class>

<class>
<name>JSEAbstractPropertyAssignmentNode</name>
<environment>JSE</environment>
<super>JSE.JSESyntaxTreeNode</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>propertyName </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JavascriptEngine-AST</package>
</attributes>
</class>

<class>
<name>CharacterArray</name>
<environment>Core</environment>
<super>Core.ArrayedCollection</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Collections-Text</category>
<attributes>
<package>Collections-Text</package>
</attributes>
</class>

<class>
<name>String</name>
<environment>Core</environment>
<super>Core.CharacterArray</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Collections-Text</category>
<attributes>
<package>Collections-Text</package>
</attributes>
</class>

<class>
<name>Symbol</name>
<environment>Core</environment>
<super>Core.String</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Collections-Text</category>
<attributes>
<package>Collections-Text</package>
</attributes>
</class>

</st-source>
